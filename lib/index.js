#!/usr/bin/env node
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 244);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(1)
  , core      = __webpack_require__(37)
  , hide      = __webpack_require__(10)
  , redefine  = __webpack_require__(18)
  , ctx       = __webpack_require__(13)
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target)redefine(target, key, out, type & $export.U);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4);
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var store      = __webpack_require__(84)('wks')
  , uid        = __webpack_require__(21)
  , Symbol     = __webpack_require__(1).Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var anObject       = __webpack_require__(2)
  , IE8_DOM_DEFINE = __webpack_require__(113)
  , toPrimitive    = __webpack_require__(44)
  , dP             = Object.defineProperty;

exports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};

/***/ }),
/* 7 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(5)(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(32)
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var dP         = __webpack_require__(6)
  , createDesc = __webpack_require__(17);
module.exports = __webpack_require__(8) ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.createDetails = exports.subtractFixed = exports.addFixed = exports.doUntilDone = exports.shouldThrowError = exports.registerStream = exports.subscribeToStream = exports.getPipSizes = exports.getDirection = exports.tradeOptionToProposal = exports.noop = undefined;

var _immutable = __webpack_require__(56);

var _tools = __webpack_require__(245);

var noop = exports.noop = function noop() {};

var tradeOptionToProposal = exports.tradeOptionToProposal = function tradeOptionToProposal(tradeOption) {
  return tradeOption.contractTypes.map(function (type) {
    return Object.assign({
      duration_unit: tradeOption.duration_unit,
      basis: 'stake',
      currency: tradeOption.currency,
      symbol: tradeOption.symbol,
      duration: tradeOption.duration,
      amount: tradeOption.amount.toFixed(2),
      contract_type: type
    }, tradeOption.prediction !== undefined && {
      barrier: tradeOption.prediction
    }, tradeOption.barrierOffset !== undefined && {
      barrier: tradeOption.barrierOffset
    }, tradeOption.secondBarrierOffset !== undefined && {
      barrier2: tradeOption.secondBarrierOffset
    });
  });
};

var getDirection = exports.getDirection = function getDirection(ticks) {
  var length = ticks.length;

  var _ticks$slice = ticks.slice(-2),
      tick1 = _ticks$slice[0],
      tick2 = _ticks$slice[1];

  var direction = '';
  if (length >= 2) {
    direction = tick1.quote > tick2.quote ? 'rise' : direction;
    direction = tick1.quote < tick2.quote ? 'fall' : direction;
  }

  return direction;
};

var getPipSizes = exports.getPipSizes = function getPipSizes(symbols) {
  return symbols.reduce(function (s, i) {
    return s.set(i.symbol, +(+i.pip).toExponential().substring(3));
  }, new _immutable.Map()).toObject();
};

var subscribeToStream = exports.subscribeToStream = function subscribeToStream(observer, name, respHandler, request, registerOnce, type, unregister) {
  return new Promise(function (resolve) {
    observer.register(name, function () {
      respHandler.apply(undefined, arguments);
      resolve();
    }, registerOnce, type && { type: type, unregister: unregister }, true);
    request();
  });
};

var registerStream = exports.registerStream = function registerStream(observer, name, cb) {
  if (observer.isRegistered(name)) {
    return;
  }
  observer.register(name, cb);
};

var shouldThrowError = exports.shouldThrowError = function shouldThrowError(e) {
  var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return e && !types.concat(['CallError', 'WrongResponse']).includes(e.name);
};

var doUntilDone = exports.doUntilDone = function doUntilDone(f, types) {
  return new Promise(function (resolve, reject) {
    var expBackOff = 512;

    var repeat = function repeat(e) {
      if (shouldThrowError(e, types)) {
        reject(e);
        return;
      }

      setTimeout(function () {
        var promise = f();

        expBackOff *= 2;

        if (promise) {
          promise.then(resolve).catch(repeat);
        } else {
          resolve();
        }
      }, expBackOff);
    };
    repeat();
  });
};

var toFixedTwo = function toFixedTwo(num) {
  return +num.toFixed(2);
};

var addFixed = exports.addFixed = function addFixed(a, b) {
  return toFixedTwo(+a + +b);
};

var subtractFixed = exports.subtractFixed = function subtractFixed(a, b) {
  return toFixedTwo(+a - +b);
};

var createDetails = exports.createDetails = function createDetails(contract) {
  var profit = subtractFixed(contract.sell_price, contract.buy_price);
  var result = profit < 0 ? 'loss' : 'win';

  return [contract.transaction_ids.buy, +contract.buy_price, +contract.sell_price, profit, contract.contract_type, (0, _tools.getUTCTime)(new Date(parseInt(contract.entry_tick_time + '000', 10))), +contract.entry_tick, (0, _tools.getUTCTime)(new Date(parseInt(contract.exit_tick_time + '000', 10))), +contract.exit_tick, +(contract.barrier ? contract.barrier : 0), result];
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(77)
  , defined = __webpack_require__(15);
module.exports = function(it){
  return IObject(defined(it));
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(19);
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if(__webpack_require__(8)){
  var LIBRARY             = __webpack_require__(28)
    , global              = __webpack_require__(1)
    , fails               = __webpack_require__(5)
    , $export             = __webpack_require__(0)
    , $typed              = __webpack_require__(129)
    , $buffer             = __webpack_require__(352)
    , ctx                 = __webpack_require__(13)
    , anInstance          = __webpack_require__(25)
    , propertyDesc        = __webpack_require__(17)
    , hide                = __webpack_require__(10)
    , redefineAll         = __webpack_require__(30)
    , toInteger           = __webpack_require__(32)
    , toLength            = __webpack_require__(9)
    , toIndex             = __webpack_require__(43)
    , toPrimitive         = __webpack_require__(44)
    , has                 = __webpack_require__(7)
    , same                = __webpack_require__(125)
    , classof             = __webpack_require__(72)
    , isObject            = __webpack_require__(4)
    , toObject            = __webpack_require__(20)
    , isArrayIter         = __webpack_require__(78)
    , create              = __webpack_require__(39)
    , getPrototypeOf      = __webpack_require__(41)
    , gOPN                = __webpack_require__(40).f
    , getIterFn           = __webpack_require__(87)
    , uid                 = __webpack_require__(21)
    , wks                 = __webpack_require__(3)
    , createArrayMethod   = __webpack_require__(36)
    , createArrayIncludes = __webpack_require__(71)
    , speciesConstructor  = __webpack_require__(126)
    , ArrayIterators      = __webpack_require__(58)
    , Iterators           = __webpack_require__(27)
    , $iterDetect         = __webpack_require__(54)
    , setSpecies          = __webpack_require__(82)
    , arrayFill           = __webpack_require__(70)
    , arrayCopyWithin     = __webpack_require__(109)
    , $DP                 = __webpack_require__(6)
    , $GOPD               = __webpack_require__(16)
    , dP                  = $DP.f
    , gOPD                = $GOPD.f
    , RangeError          = global.RangeError
    , TypeError           = global.TypeError
    , Uint8Array          = global.Uint8Array
    , ARRAY_BUFFER        = 'ArrayBuffer'
    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
    , PROTOTYPE           = 'prototype'
    , ArrayProto          = Array[PROTOTYPE]
    , $ArrayBuffer        = $buffer.ArrayBuffer
    , $DataView           = $buffer.DataView
    , arrayForEach        = createArrayMethod(0)
    , arrayFilter         = createArrayMethod(2)
    , arraySome           = createArrayMethod(3)
    , arrayEvery          = createArrayMethod(4)
    , arrayFind           = createArrayMethod(5)
    , arrayFindIndex      = createArrayMethod(6)
    , arrayIncludes       = createArrayIncludes(true)
    , arrayIndexOf        = createArrayIncludes(false)
    , arrayValues         = ArrayIterators.values
    , arrayKeys           = ArrayIterators.keys
    , arrayEntries        = ArrayIterators.entries
    , arrayLastIndexOf    = ArrayProto.lastIndexOf
    , arrayReduce         = ArrayProto.reduce
    , arrayReduceRight    = ArrayProto.reduceRight
    , arrayJoin           = ArrayProto.join
    , arraySort           = ArrayProto.sort
    , arraySlice          = ArrayProto.slice
    , arrayToString       = ArrayProto.toString
    , arrayToLocaleString = ArrayProto.toLocaleString
    , ITERATOR            = wks('iterator')
    , TAG                 = wks('toStringTag')
    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
    , DEF_CONSTRUCTOR     = uid('def_constructor')
    , ALL_CONSTRUCTORS    = $typed.CONSTR
    , TYPED_ARRAY         = $typed.TYPED
    , VIEW                = $typed.VIEW
    , WRONG_LENGTH        = 'Wrong length!';

  var $map = createArrayMethod(1, function(O, length){
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function(){
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
    new Uint8Array(1).set({});
  });

  var strictToLength = function(it, SAME){
    if(it === undefined)throw TypeError(WRONG_LENGTH);
    var number = +it
      , length = toLength(it);
    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
    return length;
  };

  var toOffset = function(it, BYTES){
    var offset = toInteger(it);
    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function(it){
    if(isObject(it) && TYPED_ARRAY in it)return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function(C, length){
    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function(O, list){
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function(C, list){
    var index  = 0
      , length = list.length
      , result = allocate(C, length);
    while(length > index)result[index] = list[index++];
    return result;
  };

  var addGetter = function(it, key, internal){
    dP(it, key, {get: function(){ return this._d[internal]; }});
  };

  var $from = function from(source /*, mapfn, thisArg */){
    var O       = toObject(source)
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , iterFn  = getIterFn(O)
      , i, length, values, result, step, iterator;
    if(iterFn != undefined && !isArrayIter(iterFn)){
      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
        values.push(step.value);
      } O = values;
    }
    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/*...items*/){
    var index  = 0
      , length = arguments.length
      , result = allocate(this, length);
    while(length > index)result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString(){
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /*, end */){
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /*, thisArg */){
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /*, thisArg */){
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /*, thisArg */){
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /*, thisArg */){
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /*, thisArg */){
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /*, fromIndex */){
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /*, fromIndex */){
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator){ // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /*, thisArg */){
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse(){
      var that   = this
        , length = validate(that).length
        , middle = Math.floor(length / 2)
        , index  = 0
        , value;
      while(index < middle){
        value         = that[index];
        that[index++] = that[--length];
        that[length]  = value;
      } return that;
    },
    some: function some(callbackfn /*, thisArg */){
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn){
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end){
      var O      = validate(this)
        , length = O.length
        , $begin = toIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end){
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /*, offset */){
    validate(this);
    var offset = toOffset(arguments[1], 1)
      , length = this.length
      , src    = toObject(arrayLike)
      , len    = toLength(src.length)
      , index  = 0;
    if(len + offset > length)throw RangeError(WRONG_LENGTH);
    while(index < len)this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries(){
      return arrayEntries.call(validate(this));
    },
    keys: function keys(){
      return arrayKeys.call(validate(this));
    },
    values: function values(){
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function(target, key){
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key){
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc){
    if(isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ){
      target[key] = desc.value;
      return target;
    } else return dP(target, key, desc);
  };

  if(!ALL_CONSTRUCTORS){
    $GOPD.f = $getDesc;
    $DP.f   = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty:           $setDesc
  });

  if(fails(function(){ arrayToString.call({}); })){
    arrayToString = arrayToLocaleString = function toString(){
      return arrayJoin.call(this);
    }
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice:          $slice,
    set:            $set,
    constructor:    function(){ /* noop */ },
    toString:       arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function(){ return this[TYPED_ARRAY]; }
  });

  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
    CLAMPED = !!CLAMPED;
    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
      , ISNT_UINT8 = NAME != 'Uint8Array'
      , GETTER     = 'get' + KEY
      , SETTER     = 'set' + KEY
      , TypedArray = global[NAME]
      , Base       = TypedArray || {}
      , TAC        = TypedArray && getPrototypeOf(TypedArray)
      , FORCED     = !TypedArray || !$typed.ABV
      , O          = {}
      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function(that, index){
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function(that, index, value){
      var data = that._d;
      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function(that, index){
      dP(that, index, {
        get: function(){
          return getter(this, index);
        },
        set: function(value){
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if(FORCED){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME, '_d');
        var index  = 0
          , offset = 0
          , buffer, byteLength, length, klass;
        if(!isObject(data)){
          length     = strictToLength(data, true)
          byteLength = length * BYTES;
          buffer     = new $ArrayBuffer(byteLength);
        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if($length === undefined){
            if($len % BYTES)throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if(TYPED_ARRAY in data){
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while(index < length)addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if(!$iterDetect(function(iter){
      // V8 works with iterators, but fails in many other cases
      // https://code.google.com/p/v8/issues/detail?id=4552
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
      , $iterator         = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
      dP(TypedArrayPrototype, TAG, {
        get: function(){ return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES,
      from: $from,
      of: $of
    });

    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

    $export($export.P + $export.F * fails(function(){
      new TypedArray(1).slice();
    }), NAME, {slice: $slice});

    $export($export.P + $export.F * (fails(function(){
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
    }) || !fails(function(){
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {toLocaleString: $toLocaleString});

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function(){ /* empty */ };

/***/ }),
/* 15 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var pIE            = __webpack_require__(42)
  , createDesc     = __webpack_require__(17)
  , toIObject      = __webpack_require__(12)
  , toPrimitive    = __webpack_require__(44)
  , has            = __webpack_require__(7)
  , IE8_DOM_DEFINE = __webpack_require__(113)
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(8) ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(1)
  , hide      = __webpack_require__(10)
  , has       = __webpack_require__(7)
  , SRC       = __webpack_require__(21)('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

__webpack_require__(37).inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  var isFunction = typeof val == 'function';
  if(isFunction)has(val, 'name') || hide(val, 'name', key);
  if(O[key] === val)return;
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if(O === global){
    O[key] = val;
  } else {
    if(!safe){
      delete O[key];
      hide(O, key, val);
    } else {
      if(O[key])O[key] = val;
      else hide(O, key, val);
    }
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(15);
module.exports = function(it){
  return Object(defined(it));
};

/***/ }),
/* 21 */
/***/ (function(module, exports) {

var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.observer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _immutable = __webpack_require__(56);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Observer = function () {
  function Observer() {
    _classCallCheck(this, Observer);

    this.eam = new _immutable.Map(); // event action map
  }

  _createClass(Observer, [{
    key: 'register',
    value: function register(event, _action, once, unregisterIfError, unregisterAllBefore) {
      var _this = this;

      if (unregisterAllBefore) {
        this.unregisterAll(event);
      }
      var apiError = function apiError(error) {
        if (error.type === unregisterIfError.type) {
          _this.unregister('api.error', apiError);
          unregisterIfError.unregister.forEach(function (unreg) {
            if (unreg instanceof Array) {
              _this.unregister.apply(_this, _toConsumableArray(unreg));
            } else {
              _this.unregisterAll(unreg);
            }
          });
        }
      };
      if (unregisterIfError) {
        this.register('api.error', apiError);
      }
      var action = function action() {
        if (once) {
          _this.unregister(event, _action);
        }
        if (unregisterIfError) {
          _this.unregister('api.error', apiError);
        }
        _action.apply(undefined, arguments);
      };

      var actionList = this.eam.get(event);

      this.eam = actionList ? this.eam.set(event, actionList.push({ action: action, searchBy: _action })) : this.eam.set(event, new _immutable.List().push({ action: action, searchBy: _action }));
    }
  }, {
    key: 'unregister',
    value: function unregister(event, f) {
      this.eam = this.eam.set(event, this.eam.get(event).filter(function (r) {
        return r.searchBy !== f;
      }));
    }
  }, {
    key: 'isRegistered',
    value: function isRegistered(event) {
      return this.eam.has(event);
    }
  }, {
    key: 'unregisterAll',
    value: function unregisterAll(event) {
      this.eam = this.eam.delete(event);
    }
  }, {
    key: 'emit',
    value: function emit(event, data) {
      if (this.eam.has(event)) {
        this.eam.get(event).forEach(function (action) {
          return action.action(data);
        });
      }
    }
  }]);

  return Observer;
}();

exports.default = Observer;
var observer = exports.observer = new Observer();

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.xml = exports.translate = exports.init = exports.supportedLanguages = undefined;

var _sha = __webpack_require__(357);

var _sha2 = _interopRequireDefault(_sha);

var _i10n = __webpack_require__(373);

var _i10n2 = _interopRequireDefault(_i10n);

var _i10n3 = __webpack_require__(362);

var _i10n4 = _interopRequireDefault(_i10n3);

var _i10n5 = __webpack_require__(366);

var _i10n6 = _interopRequireDefault(_i10n5);

var _i10n7 = __webpack_require__(372);

var _i10n8 = _interopRequireDefault(_i10n7);

var _i10n9 = __webpack_require__(367);

var _i10n10 = _interopRequireDefault(_i10n9);

var _i10n11 = __webpack_require__(371);

var _i10n12 = _interopRequireDefault(_i10n11);

var _i10n13 = __webpack_require__(368);

var _i10n14 = _interopRequireDefault(_i10n13);

var _i10n15 = __webpack_require__(370);

var _i10n16 = _interopRequireDefault(_i10n15);

var _i10n17 = __webpack_require__(369);

var _i10n18 = _interopRequireDefault(_i10n17);

var _i10n19 = __webpack_require__(364);

var _i10n20 = _interopRequireDefault(_i10n19);

var _i10n21 = __webpack_require__(365);

var _i10n22 = _interopRequireDefault(_i10n21);

var _i10n23 = __webpack_require__(363);

var _i10n24 = _interopRequireDefault(_i10n23);

var _i10n25 = __webpack_require__(361);

var _i10n26 = _interopRequireDefault(_i10n25);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var supportedLanguages = exports.supportedLanguages = {
  zh_tw: _i10n2.default,
  de: _i10n4.default,
  id: _i10n6.default,
  zh_cn: _i10n8.default,
  it: _i10n10.default,
  vi: _i10n12.default,
  pl: _i10n14.default,
  ru: _i10n16.default,
  pt: _i10n18.default,
  es: _i10n20.default,
  fr: _i10n22.default,
  en: _i10n24.default,
  ach: _i10n26.default
};

var fallbackLang = _i10n24.default;
var translation = {};

var t = function t(key) {
  return key in translation ? translation[key] : fallbackLang[key];
};

var init = exports.init = function init(lang) {
  return translation = supportedLanguages[lang];
};

var translate = exports.translate = function translate(str) {
  return str && t((0, _sha2.default)(str)) || str;
};

var xml = exports.xml = function xml(dom) {
  var categories = Array.from(dom.getElementsByTagName('category') || []);
  categories.forEach(function (child) {
    var text = child.getAttribute('i18n-text');
    if (text) {
      child.setAttribute('name', translate(text));
    }
    xml(child);
  });
  return dom;
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(3)('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)__webpack_require__(10)(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

/***/ }),
/* 26 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = false;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = __webpack_require__(122)
  , enumBugKeys = __webpack_require__(75);

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(18);
module.exports = function(target, src, safe){
  for(var key in src)redefine(target, key, src[key], safe);
  return target;
};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(6).f
  , has = __webpack_require__(7)
  , TAG = __webpack_require__(3)('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};

/***/ }),
/* 32 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var takeField = exports.takeField = function takeField(arr, field) {
    return arr.map(function (x) {
        return field ? x[field] : x;
    });
};

var takeLast = exports.takeLast = function takeLast(arr, n, field) {
    return takeField(arr.slice(n > arr.length ? 0 : arr.length - n, arr.length), field);
};

var sum = exports.sum = function sum(data) {
    return data.reduce(function (acc, x) {
        return acc + x;
    });
};

var mean = exports.mean = function mean(data) {
    return data.reduce(function (a, b) {
        return a + b;
    }) / data.length;
};

var stddev = exports.stddev = function stddev(data) {
    var dataMean = mean(data);
    var sqDiff = data.map(function (n) {
        return Math.pow(n - dataMean, 2);
    });
    var avgSqDiff = mean(sqDiff);
    return Math.sqrt(avgSqDiff);
};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dateAsLocalISOString = __webpack_require__(64);

var _dateAsLocalISOString2 = _interopRequireDefault(_dateAsLocalISOString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (date) {
    return (0, _dateAsLocalISOString2.default)(date).slice(0, 10);
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (x) {
    var secsAway = x * 60 * 60 * 24;
    return Math.floor(Date.now() / 1000) + secsAway;
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = __webpack_require__(13)
  , IObject  = __webpack_require__(77)
  , toObject = __webpack_require__(20)
  , toLength = __webpack_require__(9)
  , asc      = __webpack_require__(339);
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

/***/ }),
/* 37 */
/***/ (function(module, exports) {

var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var META     = __webpack_require__(21)('meta')
  , isObject = __webpack_require__(4)
  , has      = __webpack_require__(7)
  , setDesc  = __webpack_require__(6).f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !__webpack_require__(5)(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = __webpack_require__(2)
  , dPs         = __webpack_require__(347)
  , enumBugKeys = __webpack_require__(75)
  , IE_PROTO    = __webpack_require__(83)('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(74)('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(112).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = __webpack_require__(122)
  , hiddenKeys = __webpack_require__(75).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = __webpack_require__(7)
  , toObject    = __webpack_require__(20)
  , IE_PROTO    = __webpack_require__(83)('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

/***/ }),
/* 42 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(32)
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(4);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (epoch) {
    return new Date(epoch * 1000);
};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (duration, unit) {
    switch (unit) {
        case 't':
        case 's':
            return duration;
        case 'm':
            return 60 * duration;
        case 'h':
            return 3600 * duration;
        case 'd':
            return 86400 * duration;
        default:
            throw new Error('Duration unit not valid: ' + unit + ', only allow [\'t\', \'s\', \'m\', \'h\', \'d\']');
    }
};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _arrayEqual = __webpack_require__(249);

Object.defineProperty(exports, 'arrayEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_arrayEqual).default;
  }
});

var _arrayMax = __webpack_require__(250);

Object.defineProperty(exports, 'arrayMax', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_arrayMax).default;
  }
});

var _arrayMin = __webpack_require__(251);

Object.defineProperty(exports, 'arrayMin', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_arrayMin).default;
  }
});

var _arrayToObject = __webpack_require__(94);

Object.defineProperty(exports, 'arrayToObject', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_arrayToObject).default;
  }
});

var _getLast = __webpack_require__(252);

Object.defineProperty(exports, 'getLast', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getLast).default;
  }
});

var _mergeSortedArrays = __webpack_require__(254);

Object.defineProperty(exports, 'mergeSortedArrays', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mergeSortedArrays).default;
  }
});

var _sequence = __webpack_require__(255);

Object.defineProperty(exports, 'sequence', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sequence).default;
  }
});

var _groupArrayToNestedArray = __webpack_require__(253);

Object.defineProperty(exports, 'groupArrayToNestedArray', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_groupArrayToNestedArray).default;
  }
});

var _barrier2FromContract = __webpack_require__(256);

Object.defineProperty(exports, 'barrier2FromContract', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_barrier2FromContract).default;
  }
});

var _barrierFromContract = __webpack_require__(257);

Object.defineProperty(exports, 'barrierFromContract', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_barrierFromContract).default;
  }
});

var _callPutBarrier = __webpack_require__(258);

Object.defineProperty(exports, 'callPutBarrier', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_callPutBarrier).default;
  }
});

var _commonRelativeBarrier = __webpack_require__(62);

Object.defineProperty(exports, 'commonRelativeBarrier', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_commonRelativeBarrier).default;
  }
});

var _extractBarrier = __webpack_require__(259);

Object.defineProperty(exports, 'extractBarrier', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractBarrier).default;
  }
});

var _getAbsoluteBarrierFromContract = __webpack_require__(63);

Object.defineProperty(exports, 'getAbsoluteBarrierFromContract', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getAbsoluteBarrierFromContract).default;
  }
});

var _relativeBarrier = __webpack_require__(95);

Object.defineProperty(exports, 'relativeBarrier', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_relativeBarrier).default;
  }
});

var _relativeBarrier2 = __webpack_require__(260);

Object.defineProperty(exports, 'relativeBarrier2', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_relativeBarrier2).default;
  }
});

var _dateAsLocalISOString = __webpack_require__(64);

Object.defineProperty(exports, 'dateAsLocalISOString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateAsLocalISOString).default;
  }
});

var _dateToDateString = __webpack_require__(34);

Object.defineProperty(exports, 'dateToDateString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateToDateString).default;
  }
});

var _dateToEpoch = __webpack_require__(261);

Object.defineProperty(exports, 'dateToEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateToEpoch).default;
  }
});

var _dateToGMTString = __webpack_require__(262);

Object.defineProperty(exports, 'dateToGMTString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateToGMTString).default;
  }
});

var _dateToTimeString = __webpack_require__(96);

Object.defineProperty(exports, 'dateToTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateToTimeString).default;
  }
});

var _dateToUTCTimeString = __webpack_require__(263);

Object.defineProperty(exports, 'dateToUTCTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateToUTCTimeString).default;
  }
});

var _epochToDate = __webpack_require__(45);

Object.defineProperty(exports, 'epochToDate', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToDate).default;
  }
});

var _epochToDateString = __webpack_require__(264);

Object.defineProperty(exports, 'epochToDateString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToDateString).default;
  }
});

var _epochToDateTimeString = __webpack_require__(265);

Object.defineProperty(exports, 'epochToDateTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToDateTimeString).default;
  }
});

var _epochToTimeString = __webpack_require__(266);

Object.defineProperty(exports, 'epochToTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToTimeString).default;
  }
});

var _epochToUTCDateString = __webpack_require__(267);

Object.defineProperty(exports, 'epochToUTCDateString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToUTCDateString).default;
  }
});

var _epochToUTCTimeString = __webpack_require__(268);

Object.defineProperty(exports, 'epochToUTCTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToUTCTimeString).default;
  }
});

var _getLastXMonthEpoch = __webpack_require__(269);

Object.defineProperty(exports, 'getLastXMonthEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getLastXMonthEpoch).default;
  }
});

var _isDateValid = __webpack_require__(270);

Object.defineProperty(exports, 'isDateValid', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isDateValid).default;
  }
});

var _last30DaysEpoch = __webpack_require__(272);

Object.defineProperty(exports, 'last30DaysEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_last30DaysEpoch).default;
  }
});

var _last7DaysEpoch = __webpack_require__(273);

Object.defineProperty(exports, 'last7DaysEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_last7DaysEpoch).default;
  }
});

var _nextXDay = __webpack_require__(274);

Object.defineProperty(exports, 'nextXDay', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_nextXDay).default;
  }
});

var _nowAsEpoch = __webpack_require__(65);

Object.defineProperty(exports, 'nowAsEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_nowAsEpoch).default;
  }
});

var _oneYearAfterStr = __webpack_require__(275);

Object.defineProperty(exports, 'oneYearAfterStr', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_oneYearAfterStr).default;
  }
});

var _secondsToTimeString = __webpack_require__(278);

Object.defineProperty(exports, 'secondsToTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_secondsToTimeString).default;
  }
});

var _splitSecsToUnits = __webpack_require__(97);

Object.defineProperty(exports, 'splitSecsToUnits', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_splitSecsToUnits).default;
  }
});

var _timeStringBigger = __webpack_require__(66);

Object.defineProperty(exports, 'timeStringBigger', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_timeStringBigger).default;
  }
});

var _timeStringIsBetween = __webpack_require__(280);

Object.defineProperty(exports, 'timeStringIsBetween', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_timeStringIsBetween).default;
  }
});

var _timeStringSmaller = __webpack_require__(98);

Object.defineProperty(exports, 'timeStringSmaller', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_timeStringSmaller).default;
  }
});

var _timeStringToSeconds = __webpack_require__(281);

Object.defineProperty(exports, 'timeStringToSeconds', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_timeStringToSeconds).default;
  }
});

var _todayEpoch = __webpack_require__(282);

Object.defineProperty(exports, 'todayEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_todayEpoch).default;
  }
});

var _todayLocaleString = __webpack_require__(283);

Object.defineProperty(exports, 'todayLocaleString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_todayLocaleString).default;
  }
});

var _todayUTCString = __webpack_require__(284);

Object.defineProperty(exports, 'todayUTCString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_todayUTCString).default;
  }
});

var _xDayEpoch = __webpack_require__(35);

Object.defineProperty(exports, 'xDayEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_xDayEpoch).default;
  }
});

var _xMonthsAfter = __webpack_require__(285);

Object.defineProperty(exports, 'xMonthsAfter', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_xMonthsAfter).default;
  }
});

var _yesterdayEpoch = __webpack_require__(67);

Object.defineProperty(exports, 'yesterdayEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_yesterdayEpoch).default;
  }
});

var _yesterdayString = __webpack_require__(286);

Object.defineProperty(exports, 'yesterdayString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_yesterdayString).default;
  }
});

var _yesterdayUTCString = __webpack_require__(287);

Object.defineProperty(exports, 'yesterdayUTCString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_yesterdayUTCString).default;
  }
});

var _returnValidDate = __webpack_require__(276);

Object.defineProperty(exports, 'returnValidDate', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_returnValidDate).default;
  }
});

var _returnValidTime = __webpack_require__(277);

Object.defineProperty(exports, 'returnValidTime', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_returnValidTime).default;
  }
});

var _isValidTime = __webpack_require__(271);

Object.defineProperty(exports, 'isValidTime', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isValidTime).default;
  }
});

var _timeLeftToNextRealityCheck = __webpack_require__(279);

Object.defineProperty(exports, 'timeLeftToNextRealityCheck', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_timeLeftToNextRealityCheck).default;
  }
});

var _durationSecHelper = __webpack_require__(99);

Object.defineProperty(exports, 'durationSecHelper', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_durationSecHelper).default;
  }
});

var _durationText = __webpack_require__(295);

Object.defineProperty(exports, 'durationText', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_durationText).default;
  }
});

var _durationToSecs = __webpack_require__(46);

Object.defineProperty(exports, 'durationToSecs', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_durationToSecs).default;
  }
});

var _durationUnits = __webpack_require__(100);

Object.defineProperty(exports, 'durationUnits', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_durationUnits).default;
  }
});

var _extractDuration = __webpack_require__(296);

Object.defineProperty(exports, 'extractDuration', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractDuration).default;
  }
});

var _extractDurationHelper = __webpack_require__(68);

Object.defineProperty(exports, 'extractDurationHelper', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractDurationHelper).default;
  }
});

var _extractForwardStartingDuration = __webpack_require__(297);

Object.defineProperty(exports, 'extractForwardStartingDuration', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractForwardStartingDuration).default;
  }
});

var _extractMinMaxInUnits = __webpack_require__(101);

Object.defineProperty(exports, 'extractMinMaxInUnits', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractMinMaxInUnits).default;
  }
});

var _isDurationLessThan2Mins = __webpack_require__(298);

Object.defineProperty(exports, 'isDurationLessThan2Mins', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isDurationLessThan2Mins).default;
  }
});

var _isDurationTick = __webpack_require__(102);

Object.defineProperty(exports, 'isDurationTick', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isDurationTick).default;
  }
});

var _isDurationWithinRange = __webpack_require__(299);

Object.defineProperty(exports, 'isDurationWithinRange', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isDurationWithinRange).default;
  }
});

var _calculateLastDigitStats = __webpack_require__(308);

Object.defineProperty(exports, 'calculateLastDigitStats', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_calculateLastDigitStats).default;
  }
});

var _digitsToPips = __webpack_require__(309);

Object.defineProperty(exports, 'digitsToPips', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_digitsToPips).default;
  }
});

var _getLastDigit = __webpack_require__(103);

Object.defineProperty(exports, 'getLastDigit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getLastDigit).default;
  }
});

var _noOfDecimals = __webpack_require__(310);

Object.defineProperty(exports, 'noOfDecimals', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_noOfDecimals).default;
  }
});

var _numberToSignedString = __webpack_require__(311);

Object.defineProperty(exports, 'numberToSignedString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_numberToSignedString).default;
  }
});

var _pipSizeToStepSize = __webpack_require__(312);

Object.defineProperty(exports, 'pipSizeToStepSize', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_pipSizeToStepSize).default;
  }
});

var _pipsToDigits = __webpack_require__(313);

Object.defineProperty(exports, 'pipsToDigits', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_pipsToDigits).default;
  }
});

var _toMoney = __webpack_require__(314);

Object.defineProperty(exports, 'toMoney', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_toMoney).default;
  }
});

var _filterDeep = __webpack_require__(315);

Object.defineProperty(exports, 'filterDeep', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_filterDeep).default;
  }
});

var _findDeep = __webpack_require__(316);

Object.defineProperty(exports, 'findDeep', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_findDeep).default;
  }
});

var _groupByKey = __webpack_require__(48);

Object.defineProperty(exports, 'groupByKey', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_groupByKey).default;
  }
});

var _immutableChildrenToJS = __webpack_require__(317);

Object.defineProperty(exports, 'immutableChildrenToJS', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_immutableChildrenToJS).default;
  }
});

var _areArraysEqual = __webpack_require__(318);

Object.defineProperty(exports, 'areArraysEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_areArraysEqual).default;
  }
});

var _areCandleArrayEqual = __webpack_require__(319);

Object.defineProperty(exports, 'areCandleArrayEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_areCandleArrayEqual).default;
  }
});

var _areTickArraysEqual = __webpack_require__(320);

Object.defineProperty(exports, 'areTickArraysEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_areTickArraysEqual).default;
  }
});

var _doArrayDifferJustOneEntry = __webpack_require__(69);

Object.defineProperty(exports, 'doArrayDifferJustOneEntry', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_doArrayDifferJustOneEntry).default;
  }
});

var _doCandleEqual = __webpack_require__(104);

Object.defineProperty(exports, 'doCandleEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_doCandleEqual).default;
  }
});

var _doCandlesDifferJustOneEntry = __webpack_require__(321);

Object.defineProperty(exports, 'doCandlesDifferJustOneEntry', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_doCandlesDifferJustOneEntry).default;
  }
});

var _doTicksDifferJustOneEntry = __webpack_require__(322);

Object.defineProperty(exports, 'doTicksDifferJustOneEntry', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_doTicksDifferJustOneEntry).default;
  }
});

var _doTicksEqual = __webpack_require__(105);

Object.defineProperty(exports, 'doTicksEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_doTicksEqual).default;
  }
});

var _getLastOHLCTick = __webpack_require__(323);

Object.defineProperty(exports, 'getLastOHLCTick', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getLastOHLCTick).default;
  }
});

var _getLastTickQuote = __webpack_require__(324);

Object.defineProperty(exports, 'getLastTickQuote', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getLastTickQuote).default;
  }
});

var _historyToTicks = __webpack_require__(325);

Object.defineProperty(exports, 'historyToTicks', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_historyToTicks).default;
  }
});

var _ohlcToData = __webpack_require__(326);

Object.defineProperty(exports, 'ohlcToData', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ohlcToData).default;
  }
});

var _ohlcToTicks = __webpack_require__(327);

Object.defineProperty(exports, 'ohlcToTicks', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ohlcToTicks).default;
  }
});

var _tickToData = __webpack_require__(328);

Object.defineProperty(exports, 'tickToData', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tickToData).default;
  }
});

var _askPriceFromProposal = __webpack_require__(329);

Object.defineProperty(exports, 'askPriceFromProposal', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_askPriceFromProposal).default;
  }
});

var _computeStartEndForContract = __webpack_require__(330);

Object.defineProperty(exports, 'computeStartEndForContract', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_computeStartEndForContract).default;
  }
});

var _contractCategoryToText = __webpack_require__(331);

Object.defineProperty(exports, 'contractCategoryToText', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_contractCategoryToText).default;
  }
});

var _contractCodeToText = __webpack_require__(332);

Object.defineProperty(exports, 'contractCodeToText', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_contractCodeToText).default;
  }
});

var _extractSpreadInfo = __webpack_require__(333);

Object.defineProperty(exports, 'extractSpreadInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractSpreadInfo).default;
  }
});

var _isIntraday = __webpack_require__(334);

Object.defineProperty(exports, 'isIntraday', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isIntraday).default;
  }
});

var _normalizedContractFor = __webpack_require__(335);

Object.defineProperty(exports, 'normalizedContractFor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_normalizedContractFor).default;
  }
});

var _tradeToFriendlyType = __webpack_require__(336);

Object.defineProperty(exports, 'tradeToFriendlyType', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tradeToFriendlyType).default;
  }
});

var _tradeTypeCodeToText = __webpack_require__(106);

Object.defineProperty(exports, 'tradeTypeCodeToText', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tradeTypeCodeToText).default;
  }
});

var _tradeTypeTextToCode = __webpack_require__(337);

Object.defineProperty(exports, 'tradeTypeTextToCode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tradeTypeTextToCode).default;
  }
});

var _tradeTypes = __webpack_require__(49);

Object.defineProperty(exports, 'tradeTypes', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tradeTypes).default;
  }
});

var _typeHasBarrier = __webpack_require__(107);

Object.defineProperty(exports, 'typeHasBarrier', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_typeHasBarrier).default;
  }
});

var _Analytics = __webpack_require__(300);

Object.defineProperty(exports, 'Analytics', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Analytics).default;
  }
});

var _brandColor = __webpack_require__(301);

Object.defineProperty(exports, 'brandColor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_brandColor).default;
  }
});

var _directionClassName = __webpack_require__(302);

Object.defineProperty(exports, 'directionClassName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_directionClassName).default;
  }
});

var _errorToString = __webpack_require__(303);

Object.defineProperty(exports, 'errorToString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_errorToString).default;
  }
});

var _getUniqueId = __webpack_require__(304);

Object.defineProperty(exports, 'getUniqueId', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getUniqueId).default;
  }
});

var _isMobile = __webpack_require__(305);

Object.defineProperty(exports, 'isMobile', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isMobile).default;
  }
});

var _isValidEmail = __webpack_require__(306);

Object.defineProperty(exports, 'isValidEmail', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isValidEmail).default;
  }
});

var _isValidPassword = __webpack_require__(307);

Object.defineProperty(exports, 'isValidPassword', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isValidPassword).default;
  }
});

var _addFullscreenEventListener = __webpack_require__(288);

Object.defineProperty(exports, 'addFullscreenEventListener', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_addFullscreenEventListener).default;
  }
});

var _exitFullscreen = __webpack_require__(289);

Object.defineProperty(exports, 'exitFullscreen', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_exitFullscreen).default;
  }
});

var _removeFullscreenEventListener = __webpack_require__(290);

Object.defineProperty(exports, 'removeFullscreenEventListener', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_removeFullscreenEventListener).default;
  }
});

var _requestFullscreen = __webpack_require__(291);

Object.defineProperty(exports, 'requestFullscreen', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_requestFullscreen).default;
  }
});

var _showInfo = __webpack_require__(293);

Object.defineProperty(exports, 'showInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_showInfo).default;
  }
});

var _showError = __webpack_require__(292);

Object.defineProperty(exports, 'showError', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_showError).default;
  }
});

var _windowResizeEvent = __webpack_require__(294);

Object.defineProperty(exports, 'windowResizeEvent', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_windowResizeEvent).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr, key) {
    var result = {};
    arr.forEach(function (ele) {
        var kv = ele[key];
        if (!result[kv]) {
            result[kv] = [];
        }
        result[kv].push(ele);
    });
    return result;
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = [{ value: 'CALL', text: 'Rise', img: 'img/trade-call.svg', ticks: true, barrier: false }, { value: 'PUT', text: 'Fall', img: 'img/trade-put.svg', ticks: true, barrier: false }, { value: 'HIGHER', text: 'Higher', img: 'img/trade-higher.svg', ticks: false, barrier: false }, { value: 'LOWER', text: 'Lower', img: 'img/trade-lower.svg', ticks: false, barrier: false }, { value: 'DIGITMATCH', text: 'Digit Match', img: 'img/trade-digitmatch.svg', ticks: true, barrier: true }, { value: 'DIGITDIFF', text: 'Digit Differs', img: 'img/trade-digitdiff.svg', tick: true, barrier: true }, { value: 'DIGITOVER', text: 'Digit Over', img: 'img/trade-digitover.svg', tick: true, barrier: true }, { value: 'DIGITUNDER', text: 'Digit Under', img: 'img/trade-digitunder.svg', tick: true, barrier: true }, { value: 'DIGITEVEN', text: 'Digit Even', img: 'img/trade-digiteven.svg', tick: true, barrier: false }, { value: 'DIGITODD', text: 'Digit Odd', img: 'img/trade-digitodd.svg', tick: true, barrier: false }, { value: 'ASIANU', text: 'Asian Up', img: 'img/trade-asianu.svg', ticks: true, barrier: false }, { value: 'ASIAND', text: 'Asian Down', img: 'img/trade-asiand.svg', ticks: true, barrier: false }, { value: 'EXPIRYRANGE', text: 'Ends Between', img: 'img/trade-expiryrange.svg', ticks: false, barrier: false }, { value: 'EXPIRYMISS', text: 'Ends Outside', img: 'img/trade-expirymiss.svg', ticks: false, barrier: false }, { value: 'RANGE', text: 'Stays Between', img: 'img/trade-range.svg', ticks: false, barrier: false }, { value: 'UPORDOWN', text: 'Goes Outside', img: 'img/trade-upordown.svg', ticks: false, barrier: false }, { value: 'ONETOUCH', text: 'Touches', img: 'img/trade-onetouch.svg', ticks: false, barrier: false }, { value: 'NOTOUCH', text: 'Does Not Touch', img: 'img/trade-notouch.svg', ticks: false, barrier: false }, { value: 'SPREADU', text: 'Spread Long', img: 'img/trade-spreadu.svg', ticks: false, barrier: false }, { value: 'SPREADD', text: 'Spread Short', img: 'img/trade-spreadu.svg', ticks: false, barrier: false }];

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global            = __webpack_require__(1)
  , $export           = __webpack_require__(0)
  , redefine          = __webpack_require__(18)
  , redefineAll       = __webpack_require__(30)
  , meta              = __webpack_require__(38)
  , forOf             = __webpack_require__(52)
  , anInstance        = __webpack_require__(25)
  , isObject          = __webpack_require__(4)
  , fails             = __webpack_require__(5)
  , $iterDetect       = __webpack_require__(54)
  , setToStringTag    = __webpack_require__(31)
  , inheritIfRequired = __webpack_require__(343);

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO = !IS_WEAK && fails(function(){
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C()
          , index     = 5;
        while(index--)$instance[ADDER](index, index);
        return !$instance.has(-0);
      });
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base, target, C);
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var hide     = __webpack_require__(10)
  , redefine = __webpack_require__(18)
  , fails    = __webpack_require__(5)
  , defined  = __webpack_require__(15)
  , wks      = __webpack_require__(3);

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , fns      = exec(defined, SYMBOL, ''[KEY])
    , strfn    = fns[0]
    , rxfn     = fns[1];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return rxfn.call(string, this); }
    );
  }
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var ctx         = __webpack_require__(13)
  , call        = __webpack_require__(117)
  , isArrayIter = __webpack_require__(78)
  , anObject    = __webpack_require__(2)
  , toLength    = __webpack_require__(9)
  , getIterFn   = __webpack_require__(87)
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;

/***/ }),
/* 53 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR     = __webpack_require__(3)('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};

/***/ }),
/* 55 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

/**
 *  Copyright (c) 2014-2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */

(function (global, factory) {
   true ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.Immutable = factory());
}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;

  function createClass(ctor, superClass) {
    if (superClass) {
      ctor.prototype = Object.create(superClass.prototype);
    }
    ctor.prototype.constructor = ctor;
  }

  function Iterable(value) {
      return isIterable(value) ? value : Seq(value);
    }


  createClass(KeyedIterable, Iterable);
    function KeyedIterable(value) {
      return isKeyed(value) ? value : KeyedSeq(value);
    }


  createClass(IndexedIterable, Iterable);
    function IndexedIterable(value) {
      return isIndexed(value) ? value : IndexedSeq(value);
    }


  createClass(SetIterable, Iterable);
    function SetIterable(value) {
      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
    }



  function isIterable(maybeIterable) {
    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
  }

  function isKeyed(maybeKeyed) {
    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
  }

  function isIndexed(maybeIndexed) {
    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
  }

  function isAssociative(maybeAssociative) {
    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
  }

  function isOrdered(maybeOrdered) {
    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
  }

  Iterable.isIterable = isIterable;
  Iterable.isKeyed = isKeyed;
  Iterable.isIndexed = isIndexed;
  Iterable.isAssociative = isAssociative;
  Iterable.isOrdered = isOrdered;

  Iterable.Keyed = KeyedIterable;
  Iterable.Indexed = IndexedIterable;
  Iterable.Set = SetIterable;


  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  // Used for setting prototype methods that IE8 chokes on.
  var DELETE = 'delete';

  // Constants describing the size of trie nodes.
  var SHIFT = 5; // Resulted in best performance after ______?
  var SIZE = 1 << SHIFT;
  var MASK = SIZE - 1;

  // A consistent shared value representing "not set" which equals nothing other
  // than itself, and nothing that could be provided externally.
  var NOT_SET = {};

  // Boolean references, Rough equivalent of `bool &`.
  var CHANGE_LENGTH = { value: false };
  var DID_ALTER = { value: false };

  function MakeRef(ref) {
    ref.value = false;
    return ref;
  }

  function SetRef(ref) {
    ref && (ref.value = true);
  }

  // A function which returns a value representing an "owner" for transient writes
  // to tries. The return value will only ever equal itself, and will not equal
  // the return of any subsequent call of this function.
  function OwnerID() {}

  // http://jsperf.com/copy-array-inline
  function arrCopy(arr, offset) {
    offset = offset || 0;
    var len = Math.max(0, arr.length - offset);
    var newArr = new Array(len);
    for (var ii = 0; ii < len; ii++) {
      newArr[ii] = arr[ii + offset];
    }
    return newArr;
  }

  function ensureSize(iter) {
    if (iter.size === undefined) {
      iter.size = iter.__iterate(returnTrue);
    }
    return iter.size;
  }

  function wrapIndex(iter, index) {
    // This implements "is array index" which the ECMAString spec defines as:
    //
    //     A String property name P is an array index if and only if
    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
    //     to 2^32−1.
    //
    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
    if (typeof index !== 'number') {
      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
      if ('' + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize(iter) + index : index;
  }

  function returnTrue() {
    return true;
  }

  function wholeSlice(begin, end, size) {
    return (begin === 0 || (size !== undefined && begin <= -size)) &&
      (end === undefined || (size !== undefined && end >= size));
  }

  function resolveBegin(begin, size) {
    return resolveIndex(begin, size, 0);
  }

  function resolveEnd(end, size) {
    return resolveIndex(end, size, size);
  }

  function resolveIndex(index, size, defaultIndex) {
    return index === undefined ?
      defaultIndex :
      index < 0 ?
        Math.max(0, size + index) :
        size === undefined ?
          index :
          Math.min(size, index);
  }

  /* global Symbol */

  var ITERATE_KEYS = 0;
  var ITERATE_VALUES = 1;
  var ITERATE_ENTRIES = 2;

  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';

  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;


  function Iterator(next) {
      this.next = next;
    }

    Iterator.prototype.toString = function() {
      return '[Iterator]';
    };


  Iterator.KEYS = ITERATE_KEYS;
  Iterator.VALUES = ITERATE_VALUES;
  Iterator.ENTRIES = ITERATE_ENTRIES;

  Iterator.prototype.inspect =
  Iterator.prototype.toSource = function () { return this.toString(); }
  Iterator.prototype[ITERATOR_SYMBOL] = function () {
    return this;
  };


  function iteratorValue(type, k, v, iteratorResult) {
    var value = type === 0 ? k : type === 1 ? v : [k, v];
    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
      value: value, done: false
    });
    return iteratorResult;
  }

  function iteratorDone() {
    return { value: undefined, done: true };
  }

  function hasIterator(maybeIterable) {
    return !!getIteratorFn(maybeIterable);
  }

  function isIterator(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === 'function';
  }

  function getIterator(iterable) {
    var iteratorFn = getIteratorFn(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }

  function getIteratorFn(iterable) {
    var iteratorFn = iterable && (
      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
      iterable[FAUX_ITERATOR_SYMBOL]
    );
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  function isArrayLike(value) {
    return value && typeof value.length === 'number';
  }

  createClass(Seq, Iterable);
    function Seq(value) {
      return value === null || value === undefined ? emptySequence() :
        isIterable(value) ? value.toSeq() : seqFromValue(value);
    }

    Seq.of = function(/*...values*/) {
      return Seq(arguments);
    };

    Seq.prototype.toSeq = function() {
      return this;
    };

    Seq.prototype.toString = function() {
      return this.__toString('Seq {', '}');
    };

    Seq.prototype.cacheResult = function() {
      if (!this._cache && this.__iterateUncached) {
        this._cache = this.entrySeq().toArray();
        this.size = this._cache.length;
      }
      return this;
    };

    // abstract __iterateUncached(fn, reverse)

    Seq.prototype.__iterate = function(fn, reverse) {
      return seqIterate(this, fn, reverse, true);
    };

    // abstract __iteratorUncached(type, reverse)

    Seq.prototype.__iterator = function(type, reverse) {
      return seqIterator(this, type, reverse, true);
    };



  createClass(KeyedSeq, Seq);
    function KeyedSeq(value) {
      return value === null || value === undefined ?
        emptySequence().toKeyedSeq() :
        isIterable(value) ?
          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
          keyedSeqFromValue(value);
    }

    KeyedSeq.prototype.toKeyedSeq = function() {
      return this;
    };



  createClass(IndexedSeq, Seq);
    function IndexedSeq(value) {
      return value === null || value === undefined ? emptySequence() :
        !isIterable(value) ? indexedSeqFromValue(value) :
        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
    }

    IndexedSeq.of = function(/*...values*/) {
      return IndexedSeq(arguments);
    };

    IndexedSeq.prototype.toIndexedSeq = function() {
      return this;
    };

    IndexedSeq.prototype.toString = function() {
      return this.__toString('Seq [', ']');
    };

    IndexedSeq.prototype.__iterate = function(fn, reverse) {
      return seqIterate(this, fn, reverse, false);
    };

    IndexedSeq.prototype.__iterator = function(type, reverse) {
      return seqIterator(this, type, reverse, false);
    };



  createClass(SetSeq, Seq);
    function SetSeq(value) {
      return (
        value === null || value === undefined ? emptySequence() :
        !isIterable(value) ? indexedSeqFromValue(value) :
        isKeyed(value) ? value.entrySeq() : value
      ).toSetSeq();
    }

    SetSeq.of = function(/*...values*/) {
      return SetSeq(arguments);
    };

    SetSeq.prototype.toSetSeq = function() {
      return this;
    };



  Seq.isSeq = isSeq;
  Seq.Keyed = KeyedSeq;
  Seq.Set = SetSeq;
  Seq.Indexed = IndexedSeq;

  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

  Seq.prototype[IS_SEQ_SENTINEL] = true;



  createClass(ArraySeq, IndexedSeq);
    function ArraySeq(array) {
      this._array = array;
      this.size = array.length;
    }

    ArraySeq.prototype.get = function(index, notSetValue) {
      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
    };

    ArraySeq.prototype.__iterate = function(fn, reverse) {
      var array = this._array;
      var maxIndex = array.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    ArraySeq.prototype.__iterator = function(type, reverse) {
      var array = this._array;
      var maxIndex = array.length - 1;
      var ii = 0;
      return new Iterator(function() 
        {return ii > maxIndex ?
          iteratorDone() :
          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
      );
    };



  createClass(ObjectSeq, KeyedSeq);
    function ObjectSeq(object) {
      var keys = Object.keys(object);
      this._object = object;
      this._keys = keys;
      this.size = keys.length;
    }

    ObjectSeq.prototype.get = function(key, notSetValue) {
      if (notSetValue !== undefined && !this.has(key)) {
        return notSetValue;
      }
      return this._object[key];
    };

    ObjectSeq.prototype.has = function(key) {
      return this._object.hasOwnProperty(key);
    };

    ObjectSeq.prototype.__iterate = function(fn, reverse) {
      var object = this._object;
      var keys = this._keys;
      var maxIndex = keys.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var key = keys[reverse ? maxIndex - ii : ii];
        if (fn(object[key], key, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    ObjectSeq.prototype.__iterator = function(type, reverse) {
      var object = this._object;
      var keys = this._keys;
      var maxIndex = keys.length - 1;
      var ii = 0;
      return new Iterator(function()  {
        var key = keys[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ?
          iteratorDone() :
          iteratorValue(type, key, object[key]);
      });
    };

  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;


  createClass(IterableSeq, IndexedSeq);
    function IterableSeq(iterable) {
      this._iterable = iterable;
      this.size = iterable.length || iterable.size;
    }

    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterable = this._iterable;
      var iterator = getIterator(iterable);
      var iterations = 0;
      if (isIterator(iterator)) {
        var step;
        while (!(step = iterator.next()).done) {
          if (fn(step.value, iterations++, this) === false) {
            break;
          }
        }
      }
      return iterations;
    };

    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterable = this._iterable;
      var iterator = getIterator(iterable);
      if (!isIterator(iterator)) {
        return new Iterator(iteratorDone);
      }
      var iterations = 0;
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step : iteratorValue(type, iterations++, step.value);
      });
    };



  createClass(IteratorSeq, IndexedSeq);
    function IteratorSeq(iterator) {
      this._iterator = iterator;
      this._iteratorCache = [];
    }

    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterator = this._iterator;
      var cache = this._iteratorCache;
      var iterations = 0;
      while (iterations < cache.length) {
        if (fn(cache[iterations], iterations++, this) === false) {
          return iterations;
        }
      }
      var step;
      while (!(step = iterator.next()).done) {
        var val = step.value;
        cache[iterations] = val;
        if (fn(val, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };

    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = this._iterator;
      var cache = this._iteratorCache;
      var iterations = 0;
      return new Iterator(function()  {
        if (iterations >= cache.length) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          cache[iterations] = step.value;
        }
        return iteratorValue(type, iterations, cache[iterations++]);
      });
    };




  // # pragma Helper functions

  function isSeq(maybeSeq) {
    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
  }

  var EMPTY_SEQ;

  function emptySequence() {
    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
  }

  function keyedSeqFromValue(value) {
    var seq =
      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
      typeof value === 'object' ? new ObjectSeq(value) :
      undefined;
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of [k, v] entries, '+
        'or keyed object: ' + value
      );
    }
    return seq;
  }

  function indexedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of values: ' + value
      );
    }
    return seq;
  }

  function seqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value) ||
      (typeof value === 'object' && new ObjectSeq(value));
    if (!seq) {
      throw new TypeError(
        'Expected Array or iterable object of values, or keyed object: ' + value
      );
    }
    return seq;
  }

  function maybeIndexedSeqFromValue(value) {
    return (
      isArrayLike(value) ? new ArraySeq(value) :
      isIterator(value) ? new IteratorSeq(value) :
      hasIterator(value) ? new IterableSeq(value) :
      undefined
    );
  }

  function seqIterate(seq, fn, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var entry = cache[reverse ? maxIndex - ii : ii];
        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
          return ii + 1;
        }
      }
      return ii;
    }
    return seq.__iterateUncached(fn, reverse);
  }

  function seqIterator(seq, type, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      var ii = 0;
      return new Iterator(function()  {
        var entry = cache[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ?
          iteratorDone() :
          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
      });
    }
    return seq.__iteratorUncached(type, reverse);
  }

  function fromJS(json, converter) {
    return converter ?
      fromJSWith(converter, json, '', {'': json}) :
      fromJSDefault(json);
  }

  function fromJSWith(converter, json, key, parentJSON) {
    if (Array.isArray(json)) {
      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
    }
    if (isPlainObj(json)) {
      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
    }
    return json;
  }

  function fromJSDefault(json) {
    if (Array.isArray(json)) {
      return IndexedSeq(json).map(fromJSDefault).toList();
    }
    if (isPlainObj(json)) {
      return KeyedSeq(json).map(fromJSDefault).toMap();
    }
    return json;
  }

  function isPlainObj(value) {
    return value && (value.constructor === Object || value.constructor === undefined);
  }

  /**
   * An extension of the "same-value" algorithm as [described for use by ES6 Map
   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
   *
   * NaN is considered the same as NaN, however -0 and 0 are considered the same
   * value, which is different from the algorithm described by
   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
   *
   * This is extended further to allow Objects to describe the values they
   * represent, by way of `valueOf` or `equals` (and `hashCode`).
   *
   * Note: because of this extension, the key equality of Immutable.Map and the
   * value equality of Immutable.Set will differ from ES6 Map and Set.
   *
   * ### Defining custom values
   *
   * The easiest way to describe the value an object represents is by implementing
   * `valueOf`. For example, `Date` represents a value by returning a unix
   * timestamp for `valueOf`:
   *
   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
   *     var date2 = new Date(1234567890000);
   *     date1.valueOf(); // 1234567890000
   *     assert( date1 !== date2 );
   *     assert( Immutable.is( date1, date2 ) );
   *
   * Note: overriding `valueOf` may have other implications if you use this object
   * where JavaScript expects a primitive, such as implicit string coercion.
   *
   * For more complex types, especially collections, implementing `valueOf` may
   * not be performant. An alternative is to implement `equals` and `hashCode`.
   *
   * `equals` takes another object, presumably of similar type, and returns true
   * if the it is equal. Equality is symmetrical, so the same result should be
   * returned if this and the argument are flipped.
   *
   *     assert( a.equals(b) === b.equals(a) );
   *
   * `hashCode` returns a 32bit integer number representing the object which will
   * be used to determine how to store the value object in a Map or Set. You must
   * provide both or neither methods, one must not exist without the other.
   *
   * Also, an important relationship between these methods must be upheld: if two
   * values are equal, they *must* return the same hashCode. If the values are not
   * equal, they might have the same hashCode; this is called a hash collision,
   * and while undesirable for performance reasons, it is acceptable.
   *
   *     if (a.equals(b)) {
   *       assert( a.hashCode() === b.hashCode() );
   *     }
   *
   * All Immutable collections implement `equals` and `hashCode`.
   *
   */
  function is(valueA, valueB) {
    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === 'function' &&
        typeof valueB.valueOf === 'function') {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    if (typeof valueA.equals === 'function' &&
        typeof valueB.equals === 'function' &&
        valueA.equals(valueB)) {
      return true;
    }
    return false;
  }

  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }

    if (
      !isIterable(b) ||
      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
      isKeyed(a) !== isKeyed(b) ||
      isIndexed(a) !== isIndexed(b) ||
      isOrdered(a) !== isOrdered(b)
    ) {
      return false;
    }

    if (a.size === 0 && b.size === 0) {
      return true;
    }

    var notAssociative = !isAssociative(a);

    if (isOrdered(a)) {
      var entries = a.entries();
      return b.every(function(v, k)  {
        var entry = entries.next().value;
        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
      }) && entries.next().done;
    }

    var flipped = false;

    if (a.size === undefined) {
      if (b.size === undefined) {
        if (typeof a.cacheResult === 'function') {
          a.cacheResult();
        }
      } else {
        flipped = true;
        var _ = a;
        a = b;
        b = _;
      }
    }

    var allEqual = true;
    var bSize = b.__iterate(function(v, k)  {
      if (notAssociative ? !a.has(v) :
          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
        allEqual = false;
        return false;
      }
    });

    return allEqual && a.size === bSize;
  }

  createClass(Repeat, IndexedSeq);

    function Repeat(value, times) {
      if (!(this instanceof Repeat)) {
        return new Repeat(value, times);
      }
      this._value = value;
      this.size = times === undefined ? Infinity : Math.max(0, times);
      if (this.size === 0) {
        if (EMPTY_REPEAT) {
          return EMPTY_REPEAT;
        }
        EMPTY_REPEAT = this;
      }
    }

    Repeat.prototype.toString = function() {
      if (this.size === 0) {
        return 'Repeat []';
      }
      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
    };

    Repeat.prototype.get = function(index, notSetValue) {
      return this.has(index) ? this._value : notSetValue;
    };

    Repeat.prototype.includes = function(searchValue) {
      return is(this._value, searchValue);
    };

    Repeat.prototype.slice = function(begin, end) {
      var size = this.size;
      return wholeSlice(begin, end, size) ? this :
        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
    };

    Repeat.prototype.reverse = function() {
      return this;
    };

    Repeat.prototype.indexOf = function(searchValue) {
      if (is(this._value, searchValue)) {
        return 0;
      }
      return -1;
    };

    Repeat.prototype.lastIndexOf = function(searchValue) {
      if (is(this._value, searchValue)) {
        return this.size;
      }
      return -1;
    };

    Repeat.prototype.__iterate = function(fn, reverse) {
      for (var ii = 0; ii < this.size; ii++) {
        if (fn(this._value, ii, this) === false) {
          return ii + 1;
        }
      }
      return ii;
    };

    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
      var ii = 0;
      return new Iterator(function() 
        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
      );
    };

    Repeat.prototype.equals = function(other) {
      return other instanceof Repeat ?
        is(this._value, other._value) :
        deepEqual(other);
    };


  var EMPTY_REPEAT;

  function invariant(condition, error) {
    if (!condition) throw new Error(error);
  }

  createClass(Range, IndexedSeq);

    function Range(start, end, step) {
      if (!(this instanceof Range)) {
        return new Range(start, end, step);
      }
      invariant(step !== 0, 'Cannot step a Range by 0');
      start = start || 0;
      if (end === undefined) {
        end = Infinity;
      }
      step = step === undefined ? 1 : Math.abs(step);
      if (end < start) {
        step = -step;
      }
      this._start = start;
      this._end = end;
      this._step = step;
      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
      if (this.size === 0) {
        if (EMPTY_RANGE) {
          return EMPTY_RANGE;
        }
        EMPTY_RANGE = this;
      }
    }

    Range.prototype.toString = function() {
      if (this.size === 0) {
        return 'Range []';
      }
      return 'Range [ ' +
        this._start + '...' + this._end +
        (this._step !== 1 ? ' by ' + this._step : '') +
      ' ]';
    };

    Range.prototype.get = function(index, notSetValue) {
      return this.has(index) ?
        this._start + wrapIndex(this, index) * this._step :
        notSetValue;
    };

    Range.prototype.includes = function(searchValue) {
      var possibleIndex = (searchValue - this._start) / this._step;
      return possibleIndex >= 0 &&
        possibleIndex < this.size &&
        possibleIndex === Math.floor(possibleIndex);
    };

    Range.prototype.slice = function(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      begin = resolveBegin(begin, this.size);
      end = resolveEnd(end, this.size);
      if (end <= begin) {
        return new Range(0, 0);
      }
      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
    };

    Range.prototype.indexOf = function(searchValue) {
      var offsetValue = searchValue - this._start;
      if (offsetValue % this._step === 0) {
        var index = offsetValue / this._step;
        if (index >= 0 && index < this.size) {
          return index
        }
      }
      return -1;
    };

    Range.prototype.lastIndexOf = function(searchValue) {
      return this.indexOf(searchValue);
    };

    Range.prototype.__iterate = function(fn, reverse) {
      var maxIndex = this.size - 1;
      var step = this._step;
      var value = reverse ? this._start + maxIndex * step : this._start;
      for (var ii = 0; ii <= maxIndex; ii++) {
        if (fn(value, ii, this) === false) {
          return ii + 1;
        }
        value += reverse ? -step : step;
      }
      return ii;
    };

    Range.prototype.__iterator = function(type, reverse) {
      var maxIndex = this.size - 1;
      var step = this._step;
      var value = reverse ? this._start + maxIndex * step : this._start;
      var ii = 0;
      return new Iterator(function()  {
        var v = value;
        value += reverse ? -step : step;
        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
      });
    };

    Range.prototype.equals = function(other) {
      return other instanceof Range ?
        this._start === other._start &&
        this._end === other._end &&
        this._step === other._step :
        deepEqual(this, other);
    };


  var EMPTY_RANGE;

  createClass(Collection, Iterable);
    function Collection() {
      throw TypeError('Abstract');
    }


  createClass(KeyedCollection, Collection);function KeyedCollection() {}

  createClass(IndexedCollection, Collection);function IndexedCollection() {}

  createClass(SetCollection, Collection);function SetCollection() {}


  Collection.Keyed = KeyedCollection;
  Collection.Indexed = IndexedCollection;
  Collection.Set = SetCollection;

  var imul =
    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
    Math.imul :
    function imul(a, b) {
      a = a | 0; // int
      b = b | 0; // int
      var c = a & 0xffff;
      var d = b & 0xffff;
      // Shift by 0 fixes the sign on the high part.
      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
    };

  // v8 has an optimization for storing 31-bit signed numbers.
  // Values which have either 00 or 11 as the high order bits qualify.
  // This function drops the highest order bit in a signed number, maintaining
  // the sign bit.
  function smi(i32) {
    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
  }

  function hash(o) {
    if (o === false || o === null || o === undefined) {
      return 0;
    }
    if (typeof o.valueOf === 'function') {
      o = o.valueOf();
      if (o === false || o === null || o === undefined) {
        return 0;
      }
    }
    if (o === true) {
      return 1;
    }
    var type = typeof o;
    if (type === 'number') {
      if (o !== o || o === Infinity) {
        return 0;
      }
      var h = o | 0;
      if (h !== o) {
        h ^= o * 0xFFFFFFFF;
      }
      while (o > 0xFFFFFFFF) {
        o /= 0xFFFFFFFF;
        h ^= o;
      }
      return smi(h);
    }
    if (type === 'string') {
      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
    }
    if (typeof o.hashCode === 'function') {
      return o.hashCode();
    }
    if (type === 'object') {
      return hashJSObj(o);
    }
    if (typeof o.toString === 'function') {
      return hashString(o.toString());
    }
    throw new Error('Value type ' + type + ' cannot be hashed.');
  }

  function cachedHashString(string) {
    var hash = stringHashCache[string];
    if (hash === undefined) {
      hash = hashString(string);
      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
        STRING_HASH_CACHE_SIZE = 0;
        stringHashCache = {};
      }
      STRING_HASH_CACHE_SIZE++;
      stringHashCache[string] = hash;
    }
    return hash;
  }

  // http://jsperf.com/hashing-strings
  function hashString(string) {
    // This is the hash from JVM
    // The hash code for a string is computed as
    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
    // where s[i] is the ith character of the string and n is the length of
    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
    // (exclusive) by dropping high bits.
    var hash = 0;
    for (var ii = 0; ii < string.length; ii++) {
      hash = 31 * hash + string.charCodeAt(ii) | 0;
    }
    return smi(hash);
  }

  function hashJSObj(obj) {
    var hash;
    if (usingWeakMap) {
      hash = weakMap.get(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = obj[UID_HASH_KEY];
    if (hash !== undefined) {
      return hash;
    }

    if (!canDefineProperty) {
      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
      if (hash !== undefined) {
        return hash;
      }

      hash = getIENodeHash(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = ++objHashUID;
    if (objHashUID & 0x40000000) {
      objHashUID = 0;
    }

    if (usingWeakMap) {
      weakMap.set(obj, hash);
    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
      throw new Error('Non-extensible objects are not allowed as keys.');
    } else if (canDefineProperty) {
      Object.defineProperty(obj, UID_HASH_KEY, {
        'enumerable': false,
        'configurable': false,
        'writable': false,
        'value': hash
      });
    } else if (obj.propertyIsEnumerable !== undefined &&
               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      // Since we can't define a non-enumerable property on the object
      // we'll hijack one of the less-used non-enumerable properties to
      // save our hash on it. Since this is a function it will not show up in
      // `JSON.stringify` which is what we want.
      obj.propertyIsEnumerable = function() {
        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
      };
      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
    } else if (obj.nodeType !== undefined) {
      // At this point we couldn't get the IE `uniqueID` to use as a hash
      // and we couldn't use a non-enumerable property to exploit the
      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
      // itself.
      obj[UID_HASH_KEY] = hash;
    } else {
      throw new Error('Unable to set a non-enumerable property on object.');
    }

    return hash;
  }

  // Get references to ES5 object methods.
  var isExtensible = Object.isExtensible;

  // True if Object.defineProperty works as expected. IE8 fails this test.
  var canDefineProperty = (function() {
    try {
      Object.defineProperty({}, '@', {});
      return true;
    } catch (e) {
      return false;
    }
  }());

  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
  // and avoid memory leaks from the IE cloneNode bug.
  function getIENodeHash(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1: // Element
          return node.uniqueID;
        case 9: // Document
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }

  // If possible, use a WeakMap.
  var usingWeakMap = typeof WeakMap === 'function';
  var weakMap;
  if (usingWeakMap) {
    weakMap = new WeakMap();
  }

  var objHashUID = 0;

  var UID_HASH_KEY = '__immutablehash__';
  if (typeof Symbol === 'function') {
    UID_HASH_KEY = Symbol(UID_HASH_KEY);
  }

  var STRING_HASH_CACHE_MIN_STRLEN = 16;
  var STRING_HASH_CACHE_MAX_SIZE = 255;
  var STRING_HASH_CACHE_SIZE = 0;
  var stringHashCache = {};

  function assertNotInfinite(size) {
    invariant(
      size !== Infinity,
      'Cannot perform this action with an infinite size.'
    );
  }

  createClass(Map, KeyedCollection);

    // @pragma Construction

    function Map(value) {
      return value === null || value === undefined ? emptyMap() :
        isMap(value) && !isOrdered(value) ? value :
        emptyMap().withMutations(function(map ) {
          var iter = KeyedIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v, k)  {return map.set(k, v)});
        });
    }

    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);
      return emptyMap().withMutations(function(map ) {
        for (var i = 0; i < keyValues.length; i += 2) {
          if (i + 1 >= keyValues.length) {
            throw new Error('Missing value for key: ' + keyValues[i]);
          }
          map.set(keyValues[i], keyValues[i + 1]);
        }
      });
    };

    Map.prototype.toString = function() {
      return this.__toString('Map {', '}');
    };

    // @pragma Access

    Map.prototype.get = function(k, notSetValue) {
      return this._root ?
        this._root.get(0, undefined, k, notSetValue) :
        notSetValue;
    };

    // @pragma Modification

    Map.prototype.set = function(k, v) {
      return updateMap(this, k, v);
    };

    Map.prototype.setIn = function(keyPath, v) {
      return this.updateIn(keyPath, NOT_SET, function()  {return v});
    };

    Map.prototype.remove = function(k) {
      return updateMap(this, k, NOT_SET);
    };

    Map.prototype.deleteIn = function(keyPath) {
      return this.updateIn(keyPath, function()  {return NOT_SET});
    };

    Map.prototype.update = function(k, notSetValue, updater) {
      return arguments.length === 1 ?
        k(this) :
        this.updateIn([k], notSetValue, updater);
    };

    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
      if (!updater) {
        updater = notSetValue;
        notSetValue = undefined;
      }
      var updatedValue = updateInDeepMap(
        this,
        forceIterator(keyPath),
        notSetValue,
        updater
      );
      return updatedValue === NOT_SET ? undefined : updatedValue;
    };

    Map.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._root = null;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyMap();
    };

    // @pragma Composition

    Map.prototype.merge = function(/*...iters*/) {
      return mergeIntoMapWith(this, undefined, arguments);
    };

    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoMapWith(this, merger, iters);
    };

    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
      return this.updateIn(
        keyPath,
        emptyMap(),
        function(m ) {return typeof m.merge === 'function' ?
          m.merge.apply(m, iters) :
          iters[iters.length - 1]}
      );
    };

    Map.prototype.mergeDeep = function(/*...iters*/) {
      return mergeIntoMapWith(this, deepMerger, arguments);
    };

    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoMapWith(this, deepMergerWith(merger), iters);
    };

    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
      return this.updateIn(
        keyPath,
        emptyMap(),
        function(m ) {return typeof m.mergeDeep === 'function' ?
          m.mergeDeep.apply(m, iters) :
          iters[iters.length - 1]}
      );
    };

    Map.prototype.sort = function(comparator) {
      // Late binding
      return OrderedMap(sortFactory(this, comparator));
    };

    Map.prototype.sortBy = function(mapper, comparator) {
      // Late binding
      return OrderedMap(sortFactory(this, comparator, mapper));
    };

    // @pragma Mutability

    Map.prototype.withMutations = function(fn) {
      var mutable = this.asMutable();
      fn(mutable);
      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
    };

    Map.prototype.asMutable = function() {
      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
    };

    Map.prototype.asImmutable = function() {
      return this.__ensureOwner();
    };

    Map.prototype.wasAltered = function() {
      return this.__altered;
    };

    Map.prototype.__iterator = function(type, reverse) {
      return new MapIterator(this, type, reverse);
    };

    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      this._root && this._root.iterate(function(entry ) {
        iterations++;
        return fn(entry[1], entry[0], this$0);
      }, reverse);
      return iterations;
    };

    Map.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeMap(this.size, this._root, ownerID, this.__hash);
    };


  function isMap(maybeMap) {
    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
  }

  Map.isMap = isMap;

  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

  var MapPrototype = Map.prototype;
  MapPrototype[IS_MAP_SENTINEL] = true;
  MapPrototype[DELETE] = MapPrototype.remove;
  MapPrototype.removeIn = MapPrototype.deleteIn;


  // #pragma Trie Nodes



    function ArrayMapNode(ownerID, entries) {
      this.ownerID = ownerID;
      this.entries = entries;
    }

    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      var entries = this.entries;
      for (var ii = 0, len = entries.length; ii < len; ii++) {
        if (is(key, entries[ii][0])) {
          return entries[ii][1];
        }
      }
      return notSetValue;
    };

    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      var removed = value === NOT_SET;

      var entries = this.entries;
      var idx = 0;
      for (var len = entries.length; idx < len; idx++) {
        if (is(key, entries[idx][0])) {
          break;
        }
      }
      var exists = idx < len;

      if (exists ? entries[idx][1] === value : removed) {
        return this;
      }

      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);

      if (removed && entries.length === 1) {
        return; // undefined
      }

      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
        return createNodes(ownerID, entries, key, value);
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries : arrCopy(entries);

      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
        } else {
          newEntries[idx] = [key, value];
        }
      } else {
        newEntries.push([key, value]);
      }

      if (isEditable) {
        this.entries = newEntries;
        return this;
      }

      return new ArrayMapNode(ownerID, newEntries);
    };




    function BitmapIndexedNode(ownerID, bitmap, nodes) {
      this.ownerID = ownerID;
      this.bitmap = bitmap;
      this.nodes = nodes;
    }

    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
      var bitmap = this.bitmap;
      return (bitmap & bit) === 0 ? notSetValue :
        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
    };

    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var bit = 1 << keyHashFrag;
      var bitmap = this.bitmap;
      var exists = (bitmap & bit) !== 0;

      if (!exists && value === NOT_SET) {
        return this;
      }

      var idx = popCount(bitmap & (bit - 1));
      var nodes = this.nodes;
      var node = exists ? nodes[idx] : undefined;
      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

      if (newNode === node) {
        return this;
      }

      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
      }

      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
        return nodes[idx ^ 1];
      }

      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
        return newNode;
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
      var newNodes = exists ? newNode ?
        setIn(nodes, idx, newNode, isEditable) :
        spliceOut(nodes, idx, isEditable) :
        spliceIn(nodes, idx, newNode, isEditable);

      if (isEditable) {
        this.bitmap = newBitmap;
        this.nodes = newNodes;
        return this;
      }

      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
    };




    function HashArrayMapNode(ownerID, count, nodes) {
      this.ownerID = ownerID;
      this.count = count;
      this.nodes = nodes;
    }

    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var node = this.nodes[idx];
      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
    };

    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }
      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
      var removed = value === NOT_SET;
      var nodes = this.nodes;
      var node = nodes[idx];

      if (removed && !node) {
        return this;
      }

      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
      if (newNode === node) {
        return this;
      }

      var newCount = this.count;
      if (!node) {
        newCount++;
      } else if (!newNode) {
        newCount--;
        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
          return packNodes(ownerID, nodes, newCount, idx);
        }
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newNodes = setIn(nodes, idx, newNode, isEditable);

      if (isEditable) {
        this.count = newCount;
        this.nodes = newNodes;
        return this;
      }

      return new HashArrayMapNode(ownerID, newCount, newNodes);
    };




    function HashCollisionNode(ownerID, keyHash, entries) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entries = entries;
    }

    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      var entries = this.entries;
      for (var ii = 0, len = entries.length; ii < len; ii++) {
        if (is(key, entries[ii][0])) {
          return entries[ii][1];
        }
      }
      return notSetValue;
    };

    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      if (keyHash === undefined) {
        keyHash = hash(key);
      }

      var removed = value === NOT_SET;

      if (keyHash !== this.keyHash) {
        if (removed) {
          return this;
        }
        SetRef(didAlter);
        SetRef(didChangeSize);
        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
      }

      var entries = this.entries;
      var idx = 0;
      for (var len = entries.length; idx < len; idx++) {
        if (is(key, entries[idx][0])) {
          break;
        }
      }
      var exists = idx < len;

      if (exists ? entries[idx][1] === value : removed) {
        return this;
      }

      SetRef(didAlter);
      (removed || !exists) && SetRef(didChangeSize);

      if (removed && len === 2) {
        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
      }

      var isEditable = ownerID && ownerID === this.ownerID;
      var newEntries = isEditable ? entries : arrCopy(entries);

      if (exists) {
        if (removed) {
          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
        } else {
          newEntries[idx] = [key, value];
        }
      } else {
        newEntries.push([key, value]);
      }

      if (isEditable) {
        this.entries = newEntries;
        return this;
      }

      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
    };




    function ValueNode(ownerID, keyHash, entry) {
      this.ownerID = ownerID;
      this.keyHash = keyHash;
      this.entry = entry;
    }

    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
    };

    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
      var removed = value === NOT_SET;
      var keyMatch = is(key, this.entry[0]);
      if (keyMatch ? value === this.entry[1] : removed) {
        return this;
      }

      SetRef(didAlter);

      if (removed) {
        SetRef(didChangeSize);
        return; // undefined
      }

      if (keyMatch) {
        if (ownerID && ownerID === this.ownerID) {
          this.entry[1] = value;
          return this;
        }
        return new ValueNode(ownerID, this.keyHash, [key, value]);
      }

      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
    };



  // #pragma Iterators

  ArrayMapNode.prototype.iterate =
  HashCollisionNode.prototype.iterate = function (fn, reverse) {
    var entries = this.entries;
    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
        return false;
      }
    }
  }

  BitmapIndexedNode.prototype.iterate =
  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
    var nodes = this.nodes;
    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
      var node = nodes[reverse ? maxIndex - ii : ii];
      if (node && node.iterate(fn, reverse) === false) {
        return false;
      }
    }
  }

  ValueNode.prototype.iterate = function (fn, reverse) {
    return fn(this.entry);
  }

  createClass(MapIterator, Iterator);

    function MapIterator(map, type, reverse) {
      this._type = type;
      this._reverse = reverse;
      this._stack = map._root && mapIteratorFrame(map._root);
    }

    MapIterator.prototype.next = function() {
      var type = this._type;
      var stack = this._stack;
      while (stack) {
        var node = stack.node;
        var index = stack.index++;
        var maxIndex;
        if (node.entry) {
          if (index === 0) {
            return mapIteratorValue(type, node.entry);
          }
        } else if (node.entries) {
          maxIndex = node.entries.length - 1;
          if (index <= maxIndex) {
            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
          }
        } else {
          maxIndex = node.nodes.length - 1;
          if (index <= maxIndex) {
            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
            if (subNode) {
              if (subNode.entry) {
                return mapIteratorValue(type, subNode.entry);
              }
              stack = this._stack = mapIteratorFrame(subNode, stack);
            }
            continue;
          }
        }
        stack = this._stack = this._stack.__prev;
      }
      return iteratorDone();
    };


  function mapIteratorValue(type, entry) {
    return iteratorValue(type, entry[0], entry[1]);
  }

  function mapIteratorFrame(node, prev) {
    return {
      node: node,
      index: 0,
      __prev: prev
    };
  }

  function makeMap(size, root, ownerID, hash) {
    var map = Object.create(MapPrototype);
    map.size = size;
    map._root = root;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_MAP;
  function emptyMap() {
    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
  }

  function updateMap(map, k, v) {
    var newRoot;
    var newSize;
    if (!map._root) {
      if (v === NOT_SET) {
        return map;
      }
      newSize = 1;
      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
    } else {
      var didChangeSize = MakeRef(CHANGE_LENGTH);
      var didAlter = MakeRef(DID_ALTER);
      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
      if (!didAlter.value) {
        return map;
      }
      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
    }
    if (map.__ownerID) {
      map.size = newSize;
      map._root = newRoot;
      map.__hash = undefined;
      map.__altered = true;
      return map;
    }
    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
  }

  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET) {
        return node;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return new ValueNode(ownerID, keyHash, [key, value]);
    }
    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
  }

  function isLeafNode(node) {
    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
  }

  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
    }

    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

    var newNode;
    var nodes = idx1 === idx2 ?
      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);

    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
  }

  function createNodes(ownerID, entries, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID();
    }
    var node = new ValueNode(ownerID, hash(key), [key, value]);
    for (var ii = 0; ii < entries.length; ii++) {
      var entry = entries[ii];
      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
    }
    return node;
  }

  function packNodes(ownerID, nodes, count, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count);
    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
      var node = nodes[ii];
      if (node !== undefined && ii !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
  }

  function expandNodes(ownerID, nodes, bitmap, including, node) {
    var count = 0;
    var expandedNodes = new Array(SIZE);
    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
  }

  function mergeIntoMapWith(map, merger, iterables) {
    var iters = [];
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = KeyedIterable(value);
      if (!isIterable(value)) {
        iter = iter.map(function(v ) {return fromJS(v)});
      }
      iters.push(iter);
    }
    return mergeIntoCollectionWith(map, merger, iters);
  }

  function deepMerger(existing, value, key) {
    return existing && existing.mergeDeep && isIterable(value) ?
      existing.mergeDeep(value) :
      is(existing, value) ? existing : value;
  }

  function deepMergerWith(merger) {
    return function(existing, value, key)  {
      if (existing && existing.mergeDeepWith && isIterable(value)) {
        return existing.mergeDeepWith(merger, value);
      }
      var nextValue = merger(existing, value, key);
      return is(existing, nextValue) ? existing : nextValue;
    };
  }

  function mergeIntoCollectionWith(collection, merger, iters) {
    iters = iters.filter(function(x ) {return x.size !== 0});
    if (iters.length === 0) {
      return collection;
    }
    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function(collection ) {
      var mergeIntoMap = merger ?
        function(value, key)  {
          collection.update(key, NOT_SET, function(existing )
            {return existing === NOT_SET ? value : merger(existing, value, key)}
          );
        } :
        function(value, key)  {
          collection.set(key, value);
        }
      for (var ii = 0; ii < iters.length; ii++) {
        iters[ii].forEach(mergeIntoMap);
      }
    });
  }

  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
    var isNotSet = existing === NOT_SET;
    var step = keyPathIter.next();
    if (step.done) {
      var existingValue = isNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    invariant(
      isNotSet || (existing && existing.set),
      'invalid keyPath'
    );
    var key = step.value;
    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
    var nextUpdated = updateInDeepMap(
      nextExisting,
      keyPathIter,
      notSetValue,
      updater
    );
    return nextUpdated === nextExisting ? existing :
      nextUpdated === NOT_SET ? existing.remove(key) :
      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
  }

  function popCount(x) {
    x = x - ((x >> 1) & 0x55555555);
    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
    x = (x + (x >> 4)) & 0x0f0f0f0f;
    x = x + (x >> 8);
    x = x + (x >> 16);
    return x & 0x7f;
  }

  function setIn(array, idx, val, canEdit) {
    var newArray = canEdit ? array : arrCopy(array);
    newArray[idx] = val;
    return newArray;
  }

  function spliceIn(array, idx, val, canEdit) {
    var newLen = array.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array[idx] = val;
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        newArray[ii] = val;
        after = -1;
      } else {
        newArray[ii] = array[ii + after];
      }
    }
    return newArray;
  }

  function spliceOut(array, idx, canEdit) {
    var newLen = array.length - 1;
    if (canEdit && idx === newLen) {
      array.pop();
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        after = 1;
      }
      newArray[ii] = array[ii + after];
    }
    return newArray;
  }

  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

  createClass(List, IndexedCollection);

    // @pragma Construction

    function List(value) {
      var empty = emptyList();
      if (value === null || value === undefined) {
        return empty;
      }
      if (isList(value)) {
        return value;
      }
      var iter = IndexedIterable(value);
      var size = iter.size;
      if (size === 0) {
        return empty;
      }
      assertNotInfinite(size);
      if (size > 0 && size < SIZE) {
        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
      }
      return empty.withMutations(function(list ) {
        list.setSize(size);
        iter.forEach(function(v, i)  {return list.set(i, v)});
      });
    }

    List.of = function(/*...values*/) {
      return this(arguments);
    };

    List.prototype.toString = function() {
      return this.__toString('List [', ']');
    };

    // @pragma Access

    List.prototype.get = function(index, notSetValue) {
      index = wrapIndex(this, index);
      if (index >= 0 && index < this.size) {
        index += this._origin;
        var node = listNodeFor(this, index);
        return node && node.array[index & MASK];
      }
      return notSetValue;
    };

    // @pragma Modification

    List.prototype.set = function(index, value) {
      return updateList(this, index, value);
    };

    List.prototype.remove = function(index) {
      return !this.has(index) ? this :
        index === 0 ? this.shift() :
        index === this.size - 1 ? this.pop() :
        this.splice(index, 1);
    };

    List.prototype.insert = function(index, value) {
      return this.splice(index, 0, value);
    };

    List.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = this._origin = this._capacity = 0;
        this._level = SHIFT;
        this._root = this._tail = null;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyList();
    };

    List.prototype.push = function(/*...values*/) {
      var values = arguments;
      var oldSize = this.size;
      return this.withMutations(function(list ) {
        setListBounds(list, 0, oldSize + values.length);
        for (var ii = 0; ii < values.length; ii++) {
          list.set(oldSize + ii, values[ii]);
        }
      });
    };

    List.prototype.pop = function() {
      return setListBounds(this, 0, -1);
    };

    List.prototype.unshift = function(/*...values*/) {
      var values = arguments;
      return this.withMutations(function(list ) {
        setListBounds(list, -values.length);
        for (var ii = 0; ii < values.length; ii++) {
          list.set(ii, values[ii]);
        }
      });
    };

    List.prototype.shift = function() {
      return setListBounds(this, 1);
    };

    // @pragma Composition

    List.prototype.merge = function(/*...iters*/) {
      return mergeIntoListWith(this, undefined, arguments);
    };

    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoListWith(this, merger, iters);
    };

    List.prototype.mergeDeep = function(/*...iters*/) {
      return mergeIntoListWith(this, deepMerger, arguments);
    };

    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return mergeIntoListWith(this, deepMergerWith(merger), iters);
    };

    List.prototype.setSize = function(size) {
      return setListBounds(this, 0, size);
    };

    // @pragma Iteration

    List.prototype.slice = function(begin, end) {
      var size = this.size;
      if (wholeSlice(begin, end, size)) {
        return this;
      }
      return setListBounds(
        this,
        resolveBegin(begin, size),
        resolveEnd(end, size)
      );
    };

    List.prototype.__iterator = function(type, reverse) {
      var index = 0;
      var values = iterateList(this, reverse);
      return new Iterator(function()  {
        var value = values();
        return value === DONE ?
          iteratorDone() :
          iteratorValue(type, index++, value);
      });
    };

    List.prototype.__iterate = function(fn, reverse) {
      var index = 0;
      var values = iterateList(this, reverse);
      var value;
      while ((value = values()) !== DONE) {
        if (fn(value, index++, this) === false) {
          break;
        }
      }
      return index;
    };

    List.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        return this;
      }
      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
    };


  function isList(maybeList) {
    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
  }

  List.isList = isList;

  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

  var ListPrototype = List.prototype;
  ListPrototype[IS_LIST_SENTINEL] = true;
  ListPrototype[DELETE] = ListPrototype.remove;
  ListPrototype.setIn = MapPrototype.setIn;
  ListPrototype.deleteIn =
  ListPrototype.removeIn = MapPrototype.removeIn;
  ListPrototype.update = MapPrototype.update;
  ListPrototype.updateIn = MapPrototype.updateIn;
  ListPrototype.mergeIn = MapPrototype.mergeIn;
  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  ListPrototype.withMutations = MapPrototype.withMutations;
  ListPrototype.asMutable = MapPrototype.asMutable;
  ListPrototype.asImmutable = MapPrototype.asImmutable;
  ListPrototype.wasAltered = MapPrototype.wasAltered;



    function VNode(array, ownerID) {
      this.array = array;
      this.ownerID = ownerID;
    }

    // TODO: seems like these methods are very similar

    VNode.prototype.removeBefore = function(ownerID, level, index) {
      if (index === level ? 1 << level : 0 || this.array.length === 0) {
        return this;
      }
      var originIndex = (index >>> level) & MASK;
      if (originIndex >= this.array.length) {
        return new VNode([], ownerID);
      }
      var removingFirst = originIndex === 0;
      var newChild;
      if (level > 0) {
        var oldChild = this.array[originIndex];
        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
        if (newChild === oldChild && removingFirst) {
          return this;
        }
      }
      if (removingFirst && !newChild) {
        return this;
      }
      var editable = editableVNode(this, ownerID);
      if (!removingFirst) {
        for (var ii = 0; ii < originIndex; ii++) {
          editable.array[ii] = undefined;
        }
      }
      if (newChild) {
        editable.array[originIndex] = newChild;
      }
      return editable;
    };

    VNode.prototype.removeAfter = function(ownerID, level, index) {
      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
        return this;
      }
      var sizeIndex = ((index - 1) >>> level) & MASK;
      if (sizeIndex >= this.array.length) {
        return this;
      }

      var newChild;
      if (level > 0) {
        var oldChild = this.array[sizeIndex];
        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
          return this;
        }
      }

      var editable = editableVNode(this, ownerID);
      editable.array.splice(sizeIndex + 1);
      if (newChild) {
        editable.array[sizeIndex] = newChild;
      }
      return editable;
    };



  var DONE = {};

  function iterateList(list, reverse) {
    var left = list._origin;
    var right = list._capacity;
    var tailPos = getTailOffset(right);
    var tail = list._tail;

    return iterateNodeOrLeaf(list._root, list._level, 0);

    function iterateNodeOrLeaf(node, level, offset) {
      return level === 0 ?
        iterateLeaf(node, offset) :
        iterateNode(node, level, offset);
    }

    function iterateLeaf(node, offset) {
      var array = offset === tailPos ? tail && tail.array : node && node.array;
      var from = offset > left ? 0 : left - offset;
      var to = right - offset;
      if (to > SIZE) {
        to = SIZE;
      }
      return function()  {
        if (from === to) {
          return DONE;
        }
        var idx = reverse ? --to : from++;
        return array && array[idx];
      };
    }

    function iterateNode(node, level, offset) {
      var values;
      var array = node && node.array;
      var from = offset > left ? 0 : (left - offset) >> level;
      var to = ((right - offset) >> level) + 1;
      if (to > SIZE) {
        to = SIZE;
      }
      return function()  {
        do {
          if (values) {
            var value = values();
            if (value !== DONE) {
              return value;
            }
            values = null;
          }
          if (from === to) {
            return DONE;
          }
          var idx = reverse ? --to : from++;
          values = iterateNodeOrLeaf(
            array && array[idx], level - SHIFT, offset + (idx << level)
          );
        } while (true);
      };
    }
  }

  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
    var list = Object.create(ListPrototype);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash;
    list.__altered = false;
    return list;
  }

  var EMPTY_LIST;
  function emptyList() {
    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
  }

  function updateList(list, index, value) {
    index = wrapIndex(list, index);

    if (index !== index) {
      return list;
    }

    if (index >= list.size || index < 0) {
      return list.withMutations(function(list ) {
        index < 0 ?
          setListBounds(list, index).set(0, value) :
          setListBounds(list, 0, index + 1).set(index, value)
      });
    }

    index += list._origin;

    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef(DID_ALTER);
    if (index >= getTailOffset(list._capacity)) {
      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
    }

    if (!didAlter.value) {
      return list;
    }

    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
  }

  function updateVNode(node, ownerID, level, index, value, didAlter) {
    var idx = (index >>> level) & MASK;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === undefined) {
      return node;
    }

    var newNode;

    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }

    if (nodeHas && node.array[idx] === value) {
      return node;
    }

    SetRef(didAlter);

    newNode = editableVNode(node, ownerID);
    if (value === undefined && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }

  function editableVNode(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode(node ? node.array.slice() : [], ownerID);
  }

  function listNodeFor(list, rawIndex) {
    if (rawIndex >= getTailOffset(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << (list._level + SHIFT)) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[(rawIndex >>> level) & MASK];
        level -= SHIFT;
      }
      return node;
    }
  }

  function setListBounds(list, begin, end) {
    // Sanitize begin & end using this shorthand for ToInt32(argument)
    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }
    var owner = list.__ownerID || new OwnerID();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }

    // If it's going to end after it starts, it's empty.
    if (newOrigin >= newCapacity) {
      return list.clear();
    }

    var newLevel = list._level;
    var newRoot = list._root;

    // New origin might need creating a higher root.
    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
      newLevel += SHIFT;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }

    var oldTailOffset = getTailOffset(oldCapacity);
    var newTailOffset = getTailOffset(newCapacity);

    // New size might need creating a higher root.
    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
      newLevel += SHIFT;
    }

    // Locate or create the new tail.
    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ?
      listNodeFor(list, newCapacity - 1) :
      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

    // Merge Tail into tree.
    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
        var idx = (oldTailOffset >>> level) & MASK;
        node = node.array[idx] = editableVNode(node.array[idx], owner);
      }
      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
    }

    // If the size has been reduced, there's a chance the tail needs to be trimmed.
    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }

    // If the new origin is within the tail, then we do not need a root.
    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

    // Otherwise, if the root has been trimmed, garbage collect.
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;

      // Identify the new top root node of the subtree of the old root.
      while (newRoot) {
        var beginIndex = (newOrigin >>> newLevel) & MASK;
        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT;
        newRoot = newRoot.array[beginIndex];
      }

      // Trim the new sides of the new root.
      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }

    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }

  function mergeIntoListWith(list, merger, iterables) {
    var iters = [];
    var maxSize = 0;
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = IndexedIterable(value);
      if (iter.size > maxSize) {
        maxSize = iter.size;
      }
      if (!isIterable(value)) {
        iter = iter.map(function(v ) {return fromJS(v)});
      }
      iters.push(iter);
    }
    if (maxSize > list.size) {
      list = list.setSize(maxSize);
    }
    return mergeIntoCollectionWith(list, merger, iters);
  }

  function getTailOffset(size) {
    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
  }

  createClass(OrderedMap, Map);

    // @pragma Construction

    function OrderedMap(value) {
      return value === null || value === undefined ? emptyOrderedMap() :
        isOrderedMap(value) ? value :
        emptyOrderedMap().withMutations(function(map ) {
          var iter = KeyedIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v, k)  {return map.set(k, v)});
        });
    }

    OrderedMap.of = function(/*...values*/) {
      return this(arguments);
    };

    OrderedMap.prototype.toString = function() {
      return this.__toString('OrderedMap {', '}');
    };

    // @pragma Access

    OrderedMap.prototype.get = function(k, notSetValue) {
      var index = this._map.get(k);
      return index !== undefined ? this._list.get(index)[1] : notSetValue;
    };

    // @pragma Modification

    OrderedMap.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._map.clear();
        this._list.clear();
        return this;
      }
      return emptyOrderedMap();
    };

    OrderedMap.prototype.set = function(k, v) {
      return updateOrderedMap(this, k, v);
    };

    OrderedMap.prototype.remove = function(k) {
      return updateOrderedMap(this, k, NOT_SET);
    };

    OrderedMap.prototype.wasAltered = function() {
      return this._map.wasAltered() || this._list.wasAltered();
    };

    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._list.__iterate(
        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
        reverse
      );
    };

    OrderedMap.prototype.__iterator = function(type, reverse) {
      return this._list.fromEntrySeq().__iterator(type, reverse);
    };

    OrderedMap.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      var newList = this._list.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        this._list = newList;
        return this;
      }
      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
    };


  function isOrderedMap(maybeOrderedMap) {
    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
  }

  OrderedMap.isOrderedMap = isOrderedMap;

  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;



  function makeOrderedMap(map, list, ownerID, hash) {
    var omap = Object.create(OrderedMap.prototype);
    omap.size = map ? map.size : 0;
    omap._map = map;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash;
    return omap;
  }

  var EMPTY_ORDERED_MAP;
  function emptyOrderedMap() {
    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
  }

  function updateOrderedMap(omap, k, v) {
    var map = omap._map;
    var list = omap._list;
    var i = map.get(k);
    var has = i !== undefined;
    var newMap;
    var newList;
    if (v === NOT_SET) { // removed
      if (!has) {
        return omap;
      }
      if (list.size >= SIZE && list.size >= map.size * 2) {
        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map.remove(k);
        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
      }
    } else {
      if (has) {
        if (v === list.get(i)[1]) {
          return omap;
        }
        newMap = map;
        newList = list.set(i, [k, v]);
      } else {
        newMap = map.set(k, list.size);
        newList = list.set(list.size, [k, v]);
      }
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = undefined;
      return omap;
    }
    return makeOrderedMap(newMap, newList);
  }

  createClass(ToKeyedSequence, KeyedSeq);
    function ToKeyedSequence(indexed, useKeys) {
      this._iter = indexed;
      this._useKeys = useKeys;
      this.size = indexed.size;
    }

    ToKeyedSequence.prototype.get = function(key, notSetValue) {
      return this._iter.get(key, notSetValue);
    };

    ToKeyedSequence.prototype.has = function(key) {
      return this._iter.has(key);
    };

    ToKeyedSequence.prototype.valueSeq = function() {
      return this._iter.valueSeq();
    };

    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
      var reversedSequence = reverseFactory(this, true);
      if (!this._useKeys) {
        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
      }
      return reversedSequence;
    };

    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
      var mappedSequence = mapFactory(this, mapper, context);
      if (!this._useKeys) {
        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
      }
      return mappedSequence;
    };

    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var ii;
      return this._iter.__iterate(
        this._useKeys ?
          function(v, k)  {return fn(v, k, this$0)} :
          ((ii = reverse ? resolveSize(this) : 0),
            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
        reverse
      );
    };

    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
      if (this._useKeys) {
        return this._iter.__iterator(type, reverse);
      }
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      var ii = reverse ? resolveSize(this) : 0;
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
      });
    };

  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;


  createClass(ToIndexedSequence, IndexedSeq);
    function ToIndexedSequence(iter) {
      this._iter = iter;
      this.size = iter.size;
    }

    ToIndexedSequence.prototype.includes = function(value) {
      return this._iter.includes(value);
    };

    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
    };

    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, iterations++, step.value, step)
      });
    };



  createClass(ToSetSequence, SetSeq);
    function ToSetSequence(iter) {
      this._iter = iter;
      this.size = iter.size;
    }

    ToSetSequence.prototype.has = function(key) {
      return this._iter.includes(key);
    };

    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
    };

    ToSetSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      return new Iterator(function()  {
        var step = iterator.next();
        return step.done ? step :
          iteratorValue(type, step.value, step.value, step);
      });
    };



  createClass(FromEntriesSequence, KeyedSeq);
    function FromEntriesSequence(entries) {
      this._iter = entries;
      this.size = entries.size;
    }

    FromEntriesSequence.prototype.entrySeq = function() {
      return this._iter.toSeq();
    };

    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._iter.__iterate(function(entry ) {
        // Check if entry exists first so array access doesn't throw for holes
        // in the parent iteration.
        if (entry) {
          validateEntry(entry);
          var indexedIterable = isIterable(entry);
          return fn(
            indexedIterable ? entry.get(1) : entry[1],
            indexedIterable ? entry.get(0) : entry[0],
            this$0
          );
        }
      }, reverse);
    };

    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
      return new Iterator(function()  {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          // Check if entry exists first so array access doesn't throw for holes
          // in the parent iteration.
          if (entry) {
            validateEntry(entry);
            var indexedIterable = isIterable(entry);
            return iteratorValue(
              type,
              indexedIterable ? entry.get(0) : entry[0],
              indexedIterable ? entry.get(1) : entry[1],
              step
            );
          }
        }
      });
    };


  ToIndexedSequence.prototype.cacheResult =
  ToKeyedSequence.prototype.cacheResult =
  ToSetSequence.prototype.cacheResult =
  FromEntriesSequence.prototype.cacheResult =
    cacheResultThrough;


  function flipFactory(iterable) {
    var flipSequence = makeSequence(iterable);
    flipSequence._iter = iterable;
    flipSequence.size = iterable.size;
    flipSequence.flip = function()  {return iterable};
    flipSequence.reverse = function () {
      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
      reversedSequence.flip = function()  {return iterable.reverse()};
      return reversedSequence;
    };
    flipSequence.has = function(key ) {return iterable.includes(key)};
    flipSequence.includes = function(key ) {return iterable.has(key)};
    flipSequence.cacheResult = cacheResultThrough;
    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
    }
    flipSequence.__iteratorUncached = function(type, reverse) {
      if (type === ITERATE_ENTRIES) {
        var iterator = iterable.__iterator(type, reverse);
        return new Iterator(function()  {
          var step = iterator.next();
          if (!step.done) {
            var k = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k;
          }
          return step;
        });
      }
      return iterable.__iterator(
        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
        reverse
      );
    }
    return flipSequence;
  }


  function mapFactory(iterable, mapper, context) {
    var mappedSequence = makeSequence(iterable);
    mappedSequence.size = iterable.size;
    mappedSequence.has = function(key ) {return iterable.has(key)};
    mappedSequence.get = function(key, notSetValue)  {
      var v = iterable.get(key, NOT_SET);
      return v === NOT_SET ?
        notSetValue :
        mapper.call(context, v, key, iterable);
    };
    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(
        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
        reverse
      );
    }
    mappedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      return new Iterator(function()  {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue(
          type,
          key,
          mapper.call(context, entry[1], key, iterable),
          step
        );
      });
    }
    return mappedSequence;
  }


  function reverseFactory(iterable, useKeys) {
    var reversedSequence = makeSequence(iterable);
    reversedSequence._iter = iterable;
    reversedSequence.size = iterable.size;
    reversedSequence.reverse = function()  {return iterable};
    if (iterable.flip) {
      reversedSequence.flip = function () {
        var flipSequence = flipFactory(iterable);
        flipSequence.reverse = function()  {return iterable.flip()};
        return flipSequence;
      };
    }
    reversedSequence.get = function(key, notSetValue) 
      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
    reversedSequence.has = function(key )
      {return iterable.has(useKeys ? key : -1 - key)};
    reversedSequence.includes = function(value ) {return iterable.includes(value)};
    reversedSequence.cacheResult = cacheResultThrough;
    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
    };
    reversedSequence.__iterator =
      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
    return reversedSequence;
  }


  function filterFactory(iterable, predicate, context, useKeys) {
    var filterSequence = makeSequence(iterable);
    if (useKeys) {
      filterSequence.has = function(key ) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
      };
      filterSequence.get = function(key, notSetValue)  {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
          v : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function(v, k, c)  {
        if (predicate.call(context, v, k, c)) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      }, reverse);
      return iterations;
    };
    filterSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterations = 0;
      return new Iterator(function()  {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, iterable)) {
            return iteratorValue(type, useKeys ? key : iterations++, value, step);
          }
        }
      });
    }
    return filterSequence;
  }


  function countByFactory(iterable, grouper, context) {
    var groups = Map().asMutable();
    iterable.__iterate(function(v, k)  {
      groups.update(
        grouper.call(context, v, k, iterable),
        0,
        function(a ) {return a + 1}
      );
    });
    return groups.asImmutable();
  }


  function groupByFactory(iterable, grouper, context) {
    var isKeyedIter = isKeyed(iterable);
    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
    iterable.__iterate(function(v, k)  {
      groups.update(
        grouper.call(context, v, k, iterable),
        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
      );
    });
    var coerce = iterableClass(iterable);
    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
  }


  function sliceFactory(iterable, begin, end, useKeys) {
    var originalSize = iterable.size;

    // Sanitize begin & end using this shorthand for ToInt32(argument)
    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      if (end === Infinity) {
        end = originalSize;
      } else {
        end = end | 0;
      }
    }

    if (wholeSlice(begin, end, originalSize)) {
      return iterable;
    }

    var resolvedBegin = resolveBegin(begin, originalSize);
    var resolvedEnd = resolveEnd(end, originalSize);

    // begin or end will be NaN if they were provided as negative numbers and
    // this iterable's size is unknown. In that case, cache first so there is
    // a known size and these do not resolve to NaN.
    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
    }

    // Note: resolvedEnd is undefined when the original sequence's length is
    // unknown and this slice did not supply an end and should contain all
    // elements after resolvedBegin.
    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }

    var sliceSeq = makeSequence(iterable);

    // If iterable.size is undefined, the size of the realized sliceSeq is
    // unknown at this point unless the number of items to slice is 0
    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
      sliceSeq.get = function (index, notSetValue) {
        index = wrapIndex(this, index);
        return index >= 0 && index < sliceSize ?
          iterable.get(index + resolvedBegin, notSetValue) :
          notSetValue;
      }
    }

    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function(v, k)  {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
                 iterations !== sliceSize;
        }
      });
      return iterations;
    };

    sliceSeq.__iteratorUncached = function(type, reverse) {
      if (sliceSize !== 0 && reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      // Don't bother instantiating parent iterator if taking 0.
      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
      var skipped = 0;
      var iterations = 0;
      return new Iterator(function()  {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (useKeys || type === ITERATE_VALUES) {
          return step;
        } else if (type === ITERATE_KEYS) {
          return iteratorValue(type, iterations - 1, undefined, step);
        } else {
          return iteratorValue(type, iterations - 1, step.value[1], step);
        }
      });
    }

    return sliceSeq;
  }


  function takeWhileFactory(iterable, predicate, context) {
    var takeSequence = makeSequence(iterable);
    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterations = 0;
      iterable.__iterate(function(v, k, c) 
        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
      );
      return iterations;
    };
    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterating = true;
      return new Iterator(function()  {
        if (!iterating) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k = entry[0];
        var v = entry[1];
        if (!predicate.call(context, v, k, this$0)) {
          iterating = false;
          return iteratorDone();
        }
        return type === ITERATE_ENTRIES ? step :
          iteratorValue(type, k, v, step);
      });
    };
    return takeSequence;
  }


  function skipWhileFactory(iterable, predicate, context, useKeys) {
    var skipSequence = makeSequence(iterable);
    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function(v, k, c)  {
        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var skipping = true;
      var iterations = 0;
      return new Iterator(function()  {
        var step, k, v;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type === ITERATE_VALUES) {
              return step;
            } else if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations++, undefined, step);
            } else {
              return iteratorValue(type, iterations++, step.value[1], step);
            }
          }
          var entry = step.value;
          k = entry[0];
          v = entry[1];
          skipping && (skipping = predicate.call(context, v, k, this$0));
        } while (skipping);
        return type === ITERATE_ENTRIES ? step :
          iteratorValue(type, k, v, step);
      });
    };
    return skipSequence;
  }


  function concatFactory(iterable, values) {
    var isKeyedIterable = isKeyed(iterable);
    var iters = [iterable].concat(values).map(function(v ) {
      if (!isIterable(v)) {
        v = isKeyedIterable ?
          keyedSeqFromValue(v) :
          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
      } else if (isKeyedIterable) {
        v = KeyedIterable(v);
      }
      return v;
    }).filter(function(v ) {return v.size !== 0});

    if (iters.length === 0) {
      return iterable;
    }

    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === iterable ||
          isKeyedIterable && isKeyed(singleton) ||
          isIndexed(iterable) && isIndexed(singleton)) {
        return singleton;
      }
    }

    var concatSeq = new ArraySeq(iters);
    if (isKeyedIterable) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed(iterable)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(
      function(sum, seq)  {
        if (sum !== undefined) {
          var size = seq.size;
          if (size !== undefined) {
            return sum + size;
          }
        }
      },
      0
    );
    return concatSeq;
  }


  function flattenFactory(iterable, depth, useKeys) {
    var flatSequence = makeSequence(iterable);
    flatSequence.__iterateUncached = function(fn, reverse) {
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {var this$0 = this;
        iter.__iterate(function(v, k)  {
          if ((!depth || currentDepth < depth) && isIterable(v)) {
            flatDeep(v, currentDepth + 1);
          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
            stopped = true;
          }
          return !stopped;
        }, reverse);
      }
      flatDeep(iterable, 0);
      return iterations;
    }
    flatSequence.__iteratorUncached = function(type, reverse) {
      var iterator = iterable.__iterator(type, reverse);
      var stack = [];
      var iterations = 0;
      return new Iterator(function()  {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v = step.value;
          if (type === ITERATE_ENTRIES) {
            v = v[1];
          }
          if ((!depth || stack.length < depth) && isIterable(v)) {
            stack.push(iterator);
            iterator = v.__iterator(type, reverse);
          } else {
            return useKeys ? step : iteratorValue(type, iterations++, v, step);
          }
        }
        return iteratorDone();
      });
    }
    return flatSequence;
  }


  function flatMapFactory(iterable, mapper, context) {
    var coerce = iterableClass(iterable);
    return iterable.toSeq().map(
      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
    ).flatten(true);
  }


  function interposeFactory(iterable, separator) {
    var interposedSequence = makeSequence(iterable);
    interposedSequence.size = iterable.size && iterable.size * 2 -1;
    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function(v, k) 
        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
        fn(v, iterations++, this$0) !== false},
        reverse
      );
      return iterations;
    };
    interposedSequence.__iteratorUncached = function(type, reverse) {
      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      var step;
      return new Iterator(function()  {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ?
          iteratorValue(type, iterations++, separator) :
          iteratorValue(type, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }


  function sortFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    var isKeyedIterable = isKeyed(iterable);
    var index = 0;
    var entries = iterable.toSeq().map(
      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
    ).toArray();
    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
      isKeyedIterable ?
      function(v, i)  { entries[i].length = 2; } :
      function(v, i)  { entries[i] = v[1]; }
    );
    return isKeyedIterable ? KeyedSeq(entries) :
      isIndexed(iterable) ? IndexedSeq(entries) :
      SetSeq(entries);
  }


  function maxFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    if (mapper) {
      var entry = iterable.toSeq()
        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
      return entry && entry[0];
    } else {
      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
    }
  }

  function maxCompare(comparator, a, b) {
    var comp = comparator(b, a);
    // b is considered the new max if the comparator declares them equal, but
    // they are not equal and b is in fact a nullish value.
    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
  }


  function zipWithFactory(keyIter, zipper, iters) {
    var zipSequence = makeSequence(keyIter);
    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
    // Note: this a generic base implementation of __iterate in terms of
    // __iterator which may be more generically useful in the future.
    zipSequence.__iterate = function(fn, reverse) {
      /* generic:
      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        iterations++;
        if (fn(step.value[1], step.value[0], this) === false) {
          break;
        }
      }
      return iterations;
      */
      // indexed:
      var iterator = this.__iterator(ITERATE_VALUES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function(type, reverse) {
      var iterators = iters.map(function(i )
        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
      );
      var iterations = 0;
      var isDone = false;
      return new Iterator(function()  {
        var steps;
        if (!isDone) {
          steps = iterators.map(function(i ) {return i.next()});
          isDone = steps.some(function(s ) {return s.done});
        }
        if (isDone) {
          return iteratorDone();
        }
        return iteratorValue(
          type,
          iterations++,
          zipper.apply(null, steps.map(function(s ) {return s.value}))
        );
      });
    };
    return zipSequence
  }


  // #pragma Helper Functions

  function reify(iter, seq) {
    return isSeq(iter) ? seq : iter.constructor(seq);
  }

  function validateEntry(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError('Expected [K, V] tuple: ' + entry);
    }
  }

  function resolveSize(iter) {
    assertNotInfinite(iter.size);
    return ensureSize(iter);
  }

  function iterableClass(iterable) {
    return isKeyed(iterable) ? KeyedIterable :
      isIndexed(iterable) ? IndexedIterable :
      SetIterable;
  }

  function makeSequence(iterable) {
    return Object.create(
      (
        isKeyed(iterable) ? KeyedSeq :
        isIndexed(iterable) ? IndexedSeq :
        SetSeq
      ).prototype
    );
  }

  function cacheResultThrough() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    } else {
      return Seq.prototype.cacheResult.call(this);
    }
  }

  function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  function forceIterator(keyPath) {
    var iter = getIterator(keyPath);
    if (!iter) {
      // Array might not be iterable in this environment, so we need a fallback
      // to our wrapped type.
      if (!isArrayLike(keyPath)) {
        throw new TypeError('Expected iterable or array-like: ' + keyPath);
      }
      iter = getIterator(Iterable(keyPath));
    }
    return iter;
  }

  createClass(Record, KeyedCollection);

    function Record(defaultValues, name) {
      var hasInitialized;

      var RecordType = function Record(values) {
        if (values instanceof RecordType) {
          return values;
        }
        if (!(this instanceof RecordType)) {
          return new RecordType(values);
        }
        if (!hasInitialized) {
          hasInitialized = true;
          var keys = Object.keys(defaultValues);
          setProps(RecordTypePrototype, keys);
          RecordTypePrototype.size = keys.length;
          RecordTypePrototype._name = name;
          RecordTypePrototype._keys = keys;
          RecordTypePrototype._defaultValues = defaultValues;
        }
        this._map = Map(values);
      };

      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
      RecordTypePrototype.constructor = RecordType;

      return RecordType;
    }

    Record.prototype.toString = function() {
      return this.__toString(recordName(this) + ' {', '}');
    };

    // @pragma Access

    Record.prototype.has = function(k) {
      return this._defaultValues.hasOwnProperty(k);
    };

    Record.prototype.get = function(k, notSetValue) {
      if (!this.has(k)) {
        return notSetValue;
      }
      var defaultVal = this._defaultValues[k];
      return this._map ? this._map.get(k, defaultVal) : defaultVal;
    };

    // @pragma Modification

    Record.prototype.clear = function() {
      if (this.__ownerID) {
        this._map && this._map.clear();
        return this;
      }
      var RecordType = this.constructor;
      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
    };

    Record.prototype.set = function(k, v) {
      if (!this.has(k)) {
        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
      }
      if (this._map && !this._map.has(k)) {
        var defaultVal = this._defaultValues[k];
        if (v === defaultVal) {
          return this;
        }
      }
      var newMap = this._map && this._map.set(k, v);
      if (this.__ownerID || newMap === this._map) {
        return this;
      }
      return makeRecord(this, newMap);
    };

    Record.prototype.remove = function(k) {
      if (!this.has(k)) {
        return this;
      }
      var newMap = this._map && this._map.remove(k);
      if (this.__ownerID || newMap === this._map) {
        return this;
      }
      return makeRecord(this, newMap);
    };

    Record.prototype.wasAltered = function() {
      return this._map.wasAltered();
    };

    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
    };

    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
    };

    Record.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map && this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return makeRecord(this, newMap, ownerID);
    };


  var RecordPrototype = Record.prototype;
  RecordPrototype[DELETE] = RecordPrototype.remove;
  RecordPrototype.deleteIn =
  RecordPrototype.removeIn = MapPrototype.removeIn;
  RecordPrototype.merge = MapPrototype.merge;
  RecordPrototype.mergeWith = MapPrototype.mergeWith;
  RecordPrototype.mergeIn = MapPrototype.mergeIn;
  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  RecordPrototype.setIn = MapPrototype.setIn;
  RecordPrototype.update = MapPrototype.update;
  RecordPrototype.updateIn = MapPrototype.updateIn;
  RecordPrototype.withMutations = MapPrototype.withMutations;
  RecordPrototype.asMutable = MapPrototype.asMutable;
  RecordPrototype.asImmutable = MapPrototype.asImmutable;


  function makeRecord(likeRecord, map, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._map = map;
    record.__ownerID = ownerID;
    return record;
  }

  function recordName(record) {
    return record._name || record.constructor.name || 'Record';
  }

  function setProps(prototype, names) {
    try {
      names.forEach(setProp.bind(undefined, prototype));
    } catch (error) {
      // Object.defineProperty failed. Probably IE8.
    }
  }

  function setProp(prototype, name) {
    Object.defineProperty(prototype, name, {
      get: function() {
        return this.get(name);
      },
      set: function(value) {
        invariant(this.__ownerID, 'Cannot set on an immutable record.');
        this.set(name, value);
      }
    });
  }

  createClass(Set, SetCollection);

    // @pragma Construction

    function Set(value) {
      return value === null || value === undefined ? emptySet() :
        isSet(value) && !isOrdered(value) ? value :
        emptySet().withMutations(function(set ) {
          var iter = SetIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v ) {return set.add(v)});
        });
    }

    Set.of = function(/*...values*/) {
      return this(arguments);
    };

    Set.fromKeys = function(value) {
      return this(KeyedIterable(value).keySeq());
    };

    Set.prototype.toString = function() {
      return this.__toString('Set {', '}');
    };

    // @pragma Access

    Set.prototype.has = function(value) {
      return this._map.has(value);
    };

    // @pragma Modification

    Set.prototype.add = function(value) {
      return updateSet(this, this._map.set(value, true));
    };

    Set.prototype.remove = function(value) {
      return updateSet(this, this._map.remove(value));
    };

    Set.prototype.clear = function() {
      return updateSet(this, this._map.clear());
    };

    // @pragma Composition

    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
      iters = iters.filter(function(x ) {return x.size !== 0});
      if (iters.length === 0) {
        return this;
      }
      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
        return this.constructor(iters[0]);
      }
      return this.withMutations(function(set ) {
        for (var ii = 0; ii < iters.length; ii++) {
          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
        }
      });
    };

    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter ) {return SetIterable(iter)});
      var originalSet = this;
      return this.withMutations(function(set ) {
        originalSet.forEach(function(value ) {
          if (!iters.every(function(iter ) {return iter.includes(value)})) {
            set.remove(value);
          }
        });
      });
    };

    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
      if (iters.length === 0) {
        return this;
      }
      iters = iters.map(function(iter ) {return SetIterable(iter)});
      var originalSet = this;
      return this.withMutations(function(set ) {
        originalSet.forEach(function(value ) {
          if (iters.some(function(iter ) {return iter.includes(value)})) {
            set.remove(value);
          }
        });
      });
    };

    Set.prototype.merge = function() {
      return this.union.apply(this, arguments);
    };

    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
      return this.union.apply(this, iters);
    };

    Set.prototype.sort = function(comparator) {
      // Late binding
      return OrderedSet(sortFactory(this, comparator));
    };

    Set.prototype.sortBy = function(mapper, comparator) {
      // Late binding
      return OrderedSet(sortFactory(this, comparator, mapper));
    };

    Set.prototype.wasAltered = function() {
      return this._map.wasAltered();
    };

    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
    };

    Set.prototype.__iterator = function(type, reverse) {
      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
    };

    Set.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      var newMap = this._map.__ensureOwner(ownerID);
      if (!ownerID) {
        this.__ownerID = ownerID;
        this._map = newMap;
        return this;
      }
      return this.__make(newMap, ownerID);
    };


  function isSet(maybeSet) {
    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
  }

  Set.isSet = isSet;

  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

  var SetPrototype = Set.prototype;
  SetPrototype[IS_SET_SENTINEL] = true;
  SetPrototype[DELETE] = SetPrototype.remove;
  SetPrototype.mergeDeep = SetPrototype.merge;
  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
  SetPrototype.withMutations = MapPrototype.withMutations;
  SetPrototype.asMutable = MapPrototype.asMutable;
  SetPrototype.asImmutable = MapPrototype.asImmutable;

  SetPrototype.__empty = emptySet;
  SetPrototype.__make = makeSet;

  function updateSet(set, newMap) {
    if (set.__ownerID) {
      set.size = newMap.size;
      set._map = newMap;
      return set;
    }
    return newMap === set._map ? set :
      newMap.size === 0 ? set.__empty() :
      set.__make(newMap);
  }

  function makeSet(map, ownerID) {
    var set = Object.create(SetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_SET;
  function emptySet() {
    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
  }

  createClass(OrderedSet, Set);

    // @pragma Construction

    function OrderedSet(value) {
      return value === null || value === undefined ? emptyOrderedSet() :
        isOrderedSet(value) ? value :
        emptyOrderedSet().withMutations(function(set ) {
          var iter = SetIterable(value);
          assertNotInfinite(iter.size);
          iter.forEach(function(v ) {return set.add(v)});
        });
    }

    OrderedSet.of = function(/*...values*/) {
      return this(arguments);
    };

    OrderedSet.fromKeys = function(value) {
      return this(KeyedIterable(value).keySeq());
    };

    OrderedSet.prototype.toString = function() {
      return this.__toString('OrderedSet {', '}');
    };


  function isOrderedSet(maybeOrderedSet) {
    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
  }

  OrderedSet.isOrderedSet = isOrderedSet;

  var OrderedSetPrototype = OrderedSet.prototype;
  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

  OrderedSetPrototype.__empty = emptyOrderedSet;
  OrderedSetPrototype.__make = makeOrderedSet;

  function makeOrderedSet(map, ownerID) {
    var set = Object.create(OrderedSetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_ORDERED_SET;
  function emptyOrderedSet() {
    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
  }

  createClass(Stack, IndexedCollection);

    // @pragma Construction

    function Stack(value) {
      return value === null || value === undefined ? emptyStack() :
        isStack(value) ? value :
        emptyStack().unshiftAll(value);
    }

    Stack.of = function(/*...values*/) {
      return this(arguments);
    };

    Stack.prototype.toString = function() {
      return this.__toString('Stack [', ']');
    };

    // @pragma Access

    Stack.prototype.get = function(index, notSetValue) {
      var head = this._head;
      index = wrapIndex(this, index);
      while (head && index--) {
        head = head.next;
      }
      return head ? head.value : notSetValue;
    };

    Stack.prototype.peek = function() {
      return this._head && this._head.value;
    };

    // @pragma Modification

    Stack.prototype.push = function(/*...values*/) {
      if (arguments.length === 0) {
        return this;
      }
      var newSize = this.size + arguments.length;
      var head = this._head;
      for (var ii = arguments.length - 1; ii >= 0; ii--) {
        head = {
          value: arguments[ii],
          next: head
        };
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    Stack.prototype.pushAll = function(iter) {
      iter = IndexedIterable(iter);
      if (iter.size === 0) {
        return this;
      }
      assertNotInfinite(iter.size);
      var newSize = this.size;
      var head = this._head;
      iter.reverse().forEach(function(value ) {
        newSize++;
        head = {
          value: value,
          next: head
        };
      });
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    Stack.prototype.pop = function() {
      return this.slice(1);
    };

    Stack.prototype.unshift = function(/*...values*/) {
      return this.push.apply(this, arguments);
    };

    Stack.prototype.unshiftAll = function(iter) {
      return this.pushAll(iter);
    };

    Stack.prototype.shift = function() {
      return this.pop.apply(this, arguments);
    };

    Stack.prototype.clear = function() {
      if (this.size === 0) {
        return this;
      }
      if (this.__ownerID) {
        this.size = 0;
        this._head = undefined;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return emptyStack();
    };

    Stack.prototype.slice = function(begin, end) {
      if (wholeSlice(begin, end, this.size)) {
        return this;
      }
      var resolvedBegin = resolveBegin(begin, this.size);
      var resolvedEnd = resolveEnd(end, this.size);
      if (resolvedEnd !== this.size) {
        // super.slice(begin, end);
        return IndexedCollection.prototype.slice.call(this, begin, end);
      }
      var newSize = this.size - resolvedBegin;
      var head = this._head;
      while (resolvedBegin--) {
        head = head.next;
      }
      if (this.__ownerID) {
        this.size = newSize;
        this._head = head;
        this.__hash = undefined;
        this.__altered = true;
        return this;
      }
      return makeStack(newSize, head);
    };

    // @pragma Mutability

    Stack.prototype.__ensureOwner = function(ownerID) {
      if (ownerID === this.__ownerID) {
        return this;
      }
      if (!ownerID) {
        this.__ownerID = ownerID;
        this.__altered = false;
        return this;
      }
      return makeStack(this.size, this._head, ownerID, this.__hash);
    };

    // @pragma Iteration

    Stack.prototype.__iterate = function(fn, reverse) {
      if (reverse) {
        return this.reverse().__iterate(fn);
      }
      var iterations = 0;
      var node = this._head;
      while (node) {
        if (fn(node.value, iterations++, this) === false) {
          break;
        }
        node = node.next;
      }
      return iterations;
    };

    Stack.prototype.__iterator = function(type, reverse) {
      if (reverse) {
        return this.reverse().__iterator(type);
      }
      var iterations = 0;
      var node = this._head;
      return new Iterator(function()  {
        if (node) {
          var value = node.value;
          node = node.next;
          return iteratorValue(type, iterations++, value);
        }
        return iteratorDone();
      });
    };


  function isStack(maybeStack) {
    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
  }

  Stack.isStack = isStack;

  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

  var StackPrototype = Stack.prototype;
  StackPrototype[IS_STACK_SENTINEL] = true;
  StackPrototype.withMutations = MapPrototype.withMutations;
  StackPrototype.asMutable = MapPrototype.asMutable;
  StackPrototype.asImmutable = MapPrototype.asImmutable;
  StackPrototype.wasAltered = MapPrototype.wasAltered;


  function makeStack(size, head, ownerID, hash) {
    var map = Object.create(StackPrototype);
    map.size = size;
    map._head = head;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_STACK;
  function emptyStack() {
    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
  }

  /**
   * Contributes additional methods to a constructor
   */
  function mixin(ctor, methods) {
    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols &&
      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }

  Iterable.Iterator = Iterator;

  mixin(Iterable, {

    // ### Conversion to other types

    toArray: function() {
      assertNotInfinite(this.size);
      var array = new Array(this.size || 0);
      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
      return array;
    },

    toIndexedSeq: function() {
      return new ToIndexedSequence(this);
    },

    toJS: function() {
      return this.toSeq().map(
        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
      ).__toJS();
    },

    toJSON: function() {
      return this.toSeq().map(
        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
      ).__toJS();
    },

    toKeyedSeq: function() {
      return new ToKeyedSequence(this, true);
    },

    toMap: function() {
      // Use Late Binding here to solve the circular dependency.
      return Map(this.toKeyedSeq());
    },

    toObject: function() {
      assertNotInfinite(this.size);
      var object = {};
      this.__iterate(function(v, k)  { object[k] = v; });
      return object;
    },

    toOrderedMap: function() {
      // Use Late Binding here to solve the circular dependency.
      return OrderedMap(this.toKeyedSeq());
    },

    toOrderedSet: function() {
      // Use Late Binding here to solve the circular dependency.
      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
    },

    toSet: function() {
      // Use Late Binding here to solve the circular dependency.
      return Set(isKeyed(this) ? this.valueSeq() : this);
    },

    toSetSeq: function() {
      return new ToSetSequence(this);
    },

    toSeq: function() {
      return isIndexed(this) ? this.toIndexedSeq() :
        isKeyed(this) ? this.toKeyedSeq() :
        this.toSetSeq();
    },

    toStack: function() {
      // Use Late Binding here to solve the circular dependency.
      return Stack(isKeyed(this) ? this.valueSeq() : this);
    },

    toList: function() {
      // Use Late Binding here to solve the circular dependency.
      return List(isKeyed(this) ? this.valueSeq() : this);
    },


    // ### Common JavaScript methods and properties

    toString: function() {
      return '[Iterable]';
    },

    __toString: function(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
    },


    // ### ES6 Collection methods (ES6 Array and Map)

    concat: function() {var values = SLICE$0.call(arguments, 0);
      return reify(this, concatFactory(this, values));
    },

    includes: function(searchValue) {
      return this.some(function(value ) {return is(value, searchValue)});
    },

    entries: function() {
      return this.__iterator(ITERATE_ENTRIES);
    },

    every: function(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = true;
      this.__iterate(function(v, k, c)  {
        if (!predicate.call(context, v, k, c)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },

    filter: function(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, true));
    },

    find: function(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },

    forEach: function(sideEffect, context) {
      assertNotInfinite(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },

    join: function(separator) {
      assertNotInfinite(this.size);
      separator = separator !== undefined ? '' + separator : ',';
      var joined = '';
      var isFirst = true;
      this.__iterate(function(v ) {
        isFirst ? (isFirst = false) : (joined += separator);
        joined += v !== null && v !== undefined ? v.toString() : '';
      });
      return joined;
    },

    keys: function() {
      return this.__iterator(ITERATE_KEYS);
    },

    map: function(mapper, context) {
      return reify(this, mapFactory(this, mapper, context));
    },

    reduce: function(reducer, initialReduction, context) {
      assertNotInfinite(this.size);
      var reduction;
      var useFirst;
      if (arguments.length < 2) {
        useFirst = true;
      } else {
        reduction = initialReduction;
      }
      this.__iterate(function(v, k, c)  {
        if (useFirst) {
          useFirst = false;
          reduction = v;
        } else {
          reduction = reducer.call(context, reduction, v, k, c);
        }
      });
      return reduction;
    },

    reduceRight: function(reducer, initialReduction, context) {
      var reversed = this.toKeyedSeq().reverse();
      return reversed.reduce.apply(reversed, arguments);
    },

    reverse: function() {
      return reify(this, reverseFactory(this, true));
    },

    slice: function(begin, end) {
      return reify(this, sliceFactory(this, begin, end, true));
    },

    some: function(predicate, context) {
      return !this.every(not(predicate), context);
    },

    sort: function(comparator) {
      return reify(this, sortFactory(this, comparator));
    },

    values: function() {
      return this.__iterator(ITERATE_VALUES);
    },


    // ### More sequential methods

    butLast: function() {
      return this.slice(0, -1);
    },

    isEmpty: function() {
      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
    },

    count: function(predicate, context) {
      return ensureSize(
        predicate ? this.toSeq().filter(predicate, context) : this
      );
    },

    countBy: function(grouper, context) {
      return countByFactory(this, grouper, context);
    },

    equals: function(other) {
      return deepEqual(this, other);
    },

    entrySeq: function() {
      var iterable = this;
      if (iterable._cache) {
        // We cache as an entries array, so we can just return the cache!
        return new ArraySeq(iterable._cache);
      }
      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
      return entriesSequence;
    },

    filterNot: function(predicate, context) {
      return this.filter(not(predicate), context);
    },

    findEntry: function(predicate, context, notSetValue) {
      var found = notSetValue;
      this.__iterate(function(v, k, c)  {
        if (predicate.call(context, v, k, c)) {
          found = [k, v];
          return false;
        }
      });
      return found;
    },

    findKey: function(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },

    findLast: function(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },

    findLastEntry: function(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
    },

    findLastKey: function(predicate, context) {
      return this.toKeyedSeq().reverse().findKey(predicate, context);
    },

    first: function() {
      return this.find(returnTrue);
    },

    flatMap: function(mapper, context) {
      return reify(this, flatMapFactory(this, mapper, context));
    },

    flatten: function(depth) {
      return reify(this, flattenFactory(this, depth, true));
    },

    fromEntrySeq: function() {
      return new FromEntriesSequence(this);
    },

    get: function(searchKey, notSetValue) {
      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
    },

    getIn: function(searchKeyPath, notSetValue) {
      var nested = this;
      // Note: in an ES6 environment, we would prefer:
      // for (var key of searchKeyPath) {
      var iter = forceIterator(searchKeyPath);
      var step;
      while (!(step = iter.next()).done) {
        var key = step.value;
        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
        if (nested === NOT_SET) {
          return notSetValue;
        }
      }
      return nested;
    },

    groupBy: function(grouper, context) {
      return groupByFactory(this, grouper, context);
    },

    has: function(searchKey) {
      return this.get(searchKey, NOT_SET) !== NOT_SET;
    },

    hasIn: function(searchKeyPath) {
      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
    },

    isSubset: function(iter) {
      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
      return this.every(function(value ) {return iter.includes(value)});
    },

    isSuperset: function(iter) {
      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
      return iter.isSubset(this);
    },

    keyOf: function(searchValue) {
      return this.findKey(function(value ) {return is(value, searchValue)});
    },

    keySeq: function() {
      return this.toSeq().map(keyMapper).toIndexedSeq();
    },

    last: function() {
      return this.toSeq().reverse().first();
    },

    lastKeyOf: function(searchValue) {
      return this.toKeyedSeq().reverse().keyOf(searchValue);
    },

    max: function(comparator) {
      return maxFactory(this, comparator);
    },

    maxBy: function(mapper, comparator) {
      return maxFactory(this, comparator, mapper);
    },

    min: function(comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
    },

    minBy: function(mapper, comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
    },

    rest: function() {
      return this.slice(1);
    },

    skip: function(amount) {
      return this.slice(Math.max(0, amount));
    },

    skipLast: function(amount) {
      return reify(this, this.toSeq().reverse().skip(amount).reverse());
    },

    skipWhile: function(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, true));
    },

    skipUntil: function(predicate, context) {
      return this.skipWhile(not(predicate), context);
    },

    sortBy: function(mapper, comparator) {
      return reify(this, sortFactory(this, comparator, mapper));
    },

    take: function(amount) {
      return this.slice(0, Math.max(0, amount));
    },

    takeLast: function(amount) {
      return reify(this, this.toSeq().reverse().take(amount).reverse());
    },

    takeWhile: function(predicate, context) {
      return reify(this, takeWhileFactory(this, predicate, context));
    },

    takeUntil: function(predicate, context) {
      return this.takeWhile(not(predicate), context);
    },

    valueSeq: function() {
      return this.toIndexedSeq();
    },


    // ### Hashable Object

    hashCode: function() {
      return this.__hash || (this.__hash = hashIterable(this));
    }


    // ### Internal

    // abstract __iterate(fn, reverse)

    // abstract __iterator(type, reverse)
  });

  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  var IterablePrototype = Iterable.prototype;
  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
  IterablePrototype.__toJS = IterablePrototype.toArray;
  IterablePrototype.__toStringMapper = quoteString;
  IterablePrototype.inspect =
  IterablePrototype.toSource = function() { return this.toString(); };
  IterablePrototype.chain = IterablePrototype.flatMap;
  IterablePrototype.contains = IterablePrototype.includes;

  mixin(KeyedIterable, {

    // ### More sequential methods

    flip: function() {
      return reify(this, flipFactory(this));
    },

    mapEntries: function(mapper, context) {var this$0 = this;
      var iterations = 0;
      return reify(this,
        this.toSeq().map(
          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
        ).fromEntrySeq()
      );
    },

    mapKeys: function(mapper, context) {var this$0 = this;
      return reify(this,
        this.toSeq().flip().map(
          function(k, v)  {return mapper.call(context, k, v, this$0)}
        ).flip()
      );
    }

  });

  var KeyedIterablePrototype = KeyedIterable.prototype;
  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};



  mixin(IndexedIterable, {

    // ### Conversion to other types

    toKeyedSeq: function() {
      return new ToKeyedSequence(this, false);
    },


    // ### ES6 Collection methods (ES6 Array and Map)

    filter: function(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, false));
    },

    findIndex: function(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    indexOf: function(searchValue) {
      var key = this.keyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    lastIndexOf: function(searchValue) {
      var key = this.lastKeyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    reverse: function() {
      return reify(this, reverseFactory(this, false));
    },

    slice: function(begin, end) {
      return reify(this, sliceFactory(this, begin, end, false));
    },

    splice: function(index, removeNum /*, ...values*/) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum | 0, 0);
      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
        return this;
      }
      // If index is negative, it should resolve relative to the size of the
      // collection. However size may be expensive to compute if not cached, so
      // only call count() if the number is in fact negative.
      index = resolveBegin(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify(
        this,
        numArgs === 1 ?
          spliced :
          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
      );
    },


    // ### More collection methods

    findLastIndex: function(predicate, context) {
      var entry = this.findLastEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    first: function() {
      return this.get(0);
    },

    flatten: function(depth) {
      return reify(this, flattenFactory(this, depth, false));
    },

    get: function(index, notSetValue) {
      index = wrapIndex(this, index);
      return (index < 0 || (this.size === Infinity ||
          (this.size !== undefined && index > this.size))) ?
        notSetValue :
        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
    },

    has: function(index) {
      index = wrapIndex(this, index);
      return index >= 0 && (this.size !== undefined ?
        this.size === Infinity || index < this.size :
        this.indexOf(index) !== -1
      );
    },

    interpose: function(separator) {
      return reify(this, interposeFactory(this, separator));
    },

    interleave: function(/*...iterables*/) {
      var iterables = [this].concat(arrCopy(arguments));
      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * iterables.length;
      }
      return reify(this, interleaved);
    },

    keySeq: function() {
      return Range(0, this.size);
    },

    last: function() {
      return this.get(-1);
    },

    skipWhile: function(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, false));
    },

    zip: function(/*, ...iterables */) {
      var iterables = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, iterables));
    },

    zipWith: function(zipper/*, ...iterables */) {
      var iterables = arrCopy(arguments);
      iterables[0] = this;
      return reify(this, zipWithFactory(this, zipper, iterables));
    }

  });

  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;



  mixin(SetIterable, {

    // ### ES6 Collection methods (ES6 Array and Map)

    get: function(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },

    includes: function(value) {
      return this.has(value);
    },


    // ### More sequential methods

    keySeq: function() {
      return this.valueSeq();
    }

  });

  SetIterable.prototype.has = IterablePrototype.includes;
  SetIterable.prototype.contains = SetIterable.prototype.includes;


  // Mixin subclasses

  mixin(KeyedSeq, KeyedIterable.prototype);
  mixin(IndexedSeq, IndexedIterable.prototype);
  mixin(SetSeq, SetIterable.prototype);

  mixin(KeyedCollection, KeyedIterable.prototype);
  mixin(IndexedCollection, IndexedIterable.prototype);
  mixin(SetCollection, SetIterable.prototype);


  // #pragma Helper functions

  function keyMapper(v, k) {
    return k;
  }

  function entryMapper(v, k) {
    return [k, v];
  }

  function not(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    }
  }

  function neg(predicate) {
    return function() {
      return -predicate.apply(this, arguments);
    }
  }

  function quoteString(value) {
    return typeof value === 'string' ? JSON.stringify(value) : String(value);
  }

  function defaultZipper() {
    return arrCopy(arguments);
  }

  function defaultNegComparator(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }

  function hashIterable(iterable) {
    if (iterable.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered(iterable);
    var keyed = isKeyed(iterable);
    var h = ordered ? 1 : 0;
    var size = iterable.__iterate(
      keyed ?
        ordered ?
          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
        ordered ?
          function(v ) { h = 31 * h + hash(v) | 0; } :
          function(v ) { h = h + hash(v) | 0; }
    );
    return murmurHashOfSize(size, h);
  }

  function murmurHashOfSize(size, h) {
    h = imul(h, 0xCC9E2D51);
    h = imul(h << 15 | h >>> -15, 0x1B873593);
    h = imul(h << 13 | h >>> -13, 5);
    h = (h + 0xE6546B64 | 0) ^ size;
    h = imul(h ^ h >>> 16, 0x85EBCA6B);
    h = imul(h ^ h >>> 13, 0xC2B2AE35);
    h = smi(h ^ h >>> 16);
    return h;
  }

  function hashMerge(a, b) {
    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
  }

  var Immutable = {

    Iterable: Iterable,

    Seq: Seq,
    Collection: Collection,
    Map: Map,
    OrderedMap: OrderedMap,
    List: List,
    Stack: Stack,
    Set: Set,
    OrderedSet: OrderedSet,

    Record: Record,
    Range: Range,
    Repeat: Repeat,

    is: is,
    fromJS: fromJS

  };

  return Immutable;

}));

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const zlib = __webpack_require__(377);

const bufferUtil = __webpack_require__(88);

const AVAILABLE_WINDOW_BITS = [8, 9, 10, 11, 12, 13, 14, 15];
const DEFAULT_WINDOW_BITS = 15;
const DEFAULT_MEM_LEVEL = 8;
const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
const EMPTY_BLOCK = Buffer.from([0x00]);

/**
 * Per-message Deflate implementation.
 */
class PerMessageDeflate {
  constructor (options, isServer, maxPayload) {
    this._options = options || {};
    this._isServer = !!isServer;
    this._inflate = null;
    this._deflate = null;
    this.params = null;
    this._maxPayload = maxPayload || 0;
    this.threshold = this._options.threshold === undefined ? 1024 : this._options.threshold;
  }

  static get extensionName () {
    return 'permessage-deflate';
  }

  /**
   * Create extension parameters offer.
   *
   * @return {Object} Extension parameters
   * @public
   */
  offer () {
    const params = {};

    if (this._options.serverNoContextTakeover) {
      params.server_no_context_takeover = true;
    }
    if (this._options.clientNoContextTakeover) {
      params.client_no_context_takeover = true;
    }
    if (this._options.serverMaxWindowBits) {
      params.server_max_window_bits = this._options.serverMaxWindowBits;
    }
    if (this._options.clientMaxWindowBits) {
      params.client_max_window_bits = this._options.clientMaxWindowBits;
    } else if (this._options.clientMaxWindowBits == null) {
      params.client_max_window_bits = true;
    }

    return params;
  }

  /**
   * Accept extension offer.
   *
   * @param {Array} paramsList Extension parameters
   * @return {Object} Accepted configuration
   * @public
   */
  accept (paramsList) {
    paramsList = this.normalizeParams(paramsList);

    var params;
    if (this._isServer) {
      params = this.acceptAsServer(paramsList);
    } else {
      params = this.acceptAsClient(paramsList);
    }

    this.params = params;
    return params;
  }

  /**
   * Releases all resources used by the extension.
   *
   * @public
   */
  cleanup () {
    if (this._inflate) {
      if (this._inflate.writeInProgress) {
        this._inflate.pendingClose = true;
      } else {
        this._inflate.close();
        this._inflate = null;
      }
    }
    if (this._deflate) {
      if (this._deflate.writeInProgress) {
        this._deflate.pendingClose = true;
      } else {
        this._deflate.close();
        this._deflate = null;
      }
    }
  }

  /**
   * Accept extension offer from client.
   *
   * @param {Array} paramsList Extension parameters
   * @return {Object} Accepted configuration
   * @private
   */
  acceptAsServer (paramsList) {
    const accepted = {};
    const result = paramsList.some((params) => {
      if ((
        this._options.serverNoContextTakeover === false &&
        params.server_no_context_takeover
      ) || (
        this._options.serverMaxWindowBits === false &&
        params.server_max_window_bits
      ) || (
        typeof this._options.serverMaxWindowBits === 'number' &&
        typeof params.server_max_window_bits === 'number' &&
        this._options.serverMaxWindowBits > params.server_max_window_bits
      ) || (
        typeof this._options.clientMaxWindowBits === 'number' &&
        !params.client_max_window_bits
      )) {
        return;
      }

      if (
        this._options.serverNoContextTakeover ||
        params.server_no_context_takeover
      ) {
        accepted.server_no_context_takeover = true;
      }
      if (this._options.clientNoContextTakeover) {
        accepted.client_no_context_takeover = true;
      }
      if (
        this._options.clientNoContextTakeover !== false &&
        params.client_no_context_takeover
      ) {
        accepted.client_no_context_takeover = true;
      }
      if (typeof this._options.serverMaxWindowBits === 'number') {
        accepted.server_max_window_bits = this._options.serverMaxWindowBits;
      } else if (typeof params.server_max_window_bits === 'number') {
        accepted.server_max_window_bits = params.server_max_window_bits;
      }
      if (typeof this._options.clientMaxWindowBits === 'number') {
        accepted.client_max_window_bits = this._options.clientMaxWindowBits;
      } else if (
        this._options.clientMaxWindowBits !== false &&
        typeof params.client_max_window_bits === 'number'
      ) {
        accepted.client_max_window_bits = params.client_max_window_bits;
      }
      return true;
    });

    if (!result) throw new Error(`Doesn't support the offered configuration`);

    return accepted;
  }

  /**
   * Accept extension response from server.
   *
   * @param {Array} paramsList Extension parameters
   * @return {Object} Accepted configuration
   * @private
   */
  acceptAsClient (paramsList) {
    const params = paramsList[0];

    if (this._options.clientNoContextTakeover != null) {
      if (
        this._options.clientNoContextTakeover === false &&
        params.client_no_context_takeover
      ) {
        throw new Error('Invalid value for "client_no_context_takeover"');
      }
    }
    if (this._options.clientMaxWindowBits != null) {
      if (
        this._options.clientMaxWindowBits === false &&
        params.client_max_window_bits
      ) {
        throw new Error('Invalid value for "client_max_window_bits"');
      }
      if (
        typeof this._options.clientMaxWindowBits === 'number' && (
        !params.client_max_window_bits ||
        params.client_max_window_bits > this._options.clientMaxWindowBits
      )) {
        throw new Error('Invalid value for "client_max_window_bits"');
      }
    }

    return params;
  }

  /**
   * Normalize extensions parameters.
   *
   * @param {Array} paramsList Extension parameters
   * @return {Array} Normalized extensions parameters
   * @private
   */
  normalizeParams (paramsList) {
    return paramsList.map((params) => {
      Object.keys(params).forEach((key) => {
        var value = params[key];
        if (value.length > 1) {
          throw new Error(`Multiple extension parameters for ${key}`);
        }

        value = value[0];

        switch (key) {
          case 'server_no_context_takeover':
          case 'client_no_context_takeover':
            if (value !== true) {
              throw new Error(`invalid extension parameter value for ${key} (${value})`);
            }
            params[key] = true;
            break;
          case 'server_max_window_bits':
          case 'client_max_window_bits':
            if (typeof value === 'string') {
              value = parseInt(value, 10);
              if (!~AVAILABLE_WINDOW_BITS.indexOf(value)) {
                throw new Error(`invalid extension parameter value for ${key} (${value})`);
              }
            }
            if (!this._isServer && value === true) {
              throw new Error(`Missing extension parameter value for ${key}`);
            }
            params[key] = value;
            break;
          default:
            throw new Error(`Not defined extension parameter (${key})`);
        }
      });
      return params;
    });
  }

  /**
   * Decompress data.
   *
   * @param {Buffer} data Compressed data
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  decompress (data, fin, callback) {
    const endpoint = this._isServer ? 'client' : 'server';

    if (!this._inflate) {
      const maxWindowBits = this.params[`${endpoint}_max_window_bits`];
      this._inflate = zlib.createInflateRaw({
        windowBits: typeof maxWindowBits === 'number' ? maxWindowBits : DEFAULT_WINDOW_BITS
      });
    }
    this._inflate.writeInProgress = true;

    var totalLength = 0;
    const buffers = [];
    var err;

    const onData = (data) => {
      totalLength += data.length;
      if (this._maxPayload < 1 || totalLength <= this._maxPayload) {
        return buffers.push(data);
      }

      err = new Error('max payload size exceeded');
      err.closeCode = 1009;
      this._inflate.reset();
    };

    const onError = (err) => {
      cleanup();
      callback(err);
    };

    const cleanup = () => {
      if (!this._inflate) return;

      this._inflate.removeListener('error', onError);
      this._inflate.removeListener('data', onData);
      this._inflate.writeInProgress = false;

      if (
        (fin && this.params[`${endpoint}_no_context_takeover`]) ||
        this._inflate.pendingClose
      ) {
        this._inflate.close();
        this._inflate = null;
      }
    };

    this._inflate.on('error', onError).on('data', onData);
    this._inflate.write(data);
    if (fin) this._inflate.write(TRAILER);

    this._inflate.flush(() => {
      cleanup();
      if (err) callback(err);
      else callback(null, bufferUtil.concat(buffers, totalLength));
    });
  }

  /**
   * Compress data.
   *
   * @param {Buffer} data Data to compress
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  compress (data, fin, callback) {
    if (!data || data.length === 0) {
      process.nextTick(callback, null, EMPTY_BLOCK);
      return;
    }

    const endpoint = this._isServer ? 'server' : 'client';

    if (!this._deflate) {
      const maxWindowBits = this.params[`${endpoint}_max_window_bits`];
      this._deflate = zlib.createDeflateRaw({
        flush: zlib.Z_SYNC_FLUSH,
        windowBits: typeof maxWindowBits === 'number' ? maxWindowBits : DEFAULT_WINDOW_BITS,
        memLevel: this._options.memLevel || DEFAULT_MEM_LEVEL
      });
    }
    this._deflate.writeInProgress = true;

    var totalLength = 0;
    const buffers = [];

    const onData = (data) => {
      totalLength += data.length;
      buffers.push(data);
    };

    const onError = (err) => {
      cleanup();
      callback(err);
    };

    const cleanup = () => {
      if (!this._deflate) return;

      this._deflate.removeListener('error', onError);
      this._deflate.removeListener('data', onData);
      this._deflate.writeInProgress = false;

      if (
        (fin && this.params[`${endpoint}_no_context_takeover`]) ||
        this._deflate.pendingClose
      ) {
        this._deflate.close();
        this._deflate = null;
      }
    };

    this._deflate.on('error', onError).on('data', onData);
    this._deflate.write(data);
    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
      cleanup();
      var data = bufferUtil.concat(buffers, totalLength);
      if (fin) data = data.slice(0, data.length - 4);
      callback(null, data);
    });
  }
}

module.exports = PerMessageDeflate;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(24)
  , step             = __webpack_require__(119)
  , Iterators        = __webpack_require__(27)
  , toIObject        = __webpack_require__(12);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(118)(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.expectCandles = exports.expectCandle = exports.expectTradeOptions = exports.expectInitArg = exports.expectPositiveNumber = exports.expectPositiveInteger = undefined;

var _observer = __webpack_require__(22);

var _i18n = __webpack_require__(23);

var _error2 = __webpack_require__(92);

var isPositiveNumber = function isPositiveNumber(num) {
  return Number.isFinite(num) && num > 0;
};

var isPositiveInteger = function isPositiveInteger(num) {
  return isPositiveNumber(num) && Number.isInteger(num);
};

var expectPositiveInteger = exports.expectPositiveInteger = function expectPositiveInteger(num, msg) {
  if (!isPositiveInteger(num)) {
    var error = (0, _error2.createError)('PositiveIntegerExpected', msg);
    _observer.observer.emit('Error', error);
    throw error;
  }
  return num;
};

var expectPositiveNumber = exports.expectPositiveNumber = function expectPositiveNumber(num, msg) {
  if (!isPositiveNumber(num)) {
    var error = (0, _error2.createError)('PositiveNumberExpected', msg);
    _observer.observer.emit('Error', error);
    throw error;
  }
  return num;
};

var expectOptions = function expectOptions(options) {
  var symbol = options.symbol,
      contractTypes = options.contractTypes;


  if (!symbol) {
    var error = (0, _error2.createError)('OptionError', (0, _i18n.translate)('Underlying market is not selected'));
    _observer.observer.emit('Error', error);
    throw error;
  }

  if (!contractTypes[0]) {
    var _error = (0, _error2.createError)('OptionError', (0, _i18n.translate)('Contract type is not selected'));
    _observer.observer.emit('Error', _error);
    throw _error;
  }
};

var expectInitArg = exports.expectInitArg = function expectInitArg(args) {
  var token = args[0],
      options = args[1];


  if (!token) {
    var error = (0, _error2.createError)('LoginError', (0, _i18n.translate)('Please login'));
    _observer.observer.emit('Error', error);
    throw error;
  }

  expectOptions(options);

  return args;
};

var expectTradeOptions = exports.expectTradeOptions = function expectTradeOptions(tradeOptions) {
  var amount = tradeOptions.amount,
      duration = tradeOptions.duration;


  expectPositiveInteger(duration, (0, _i18n.translate)('Duration must be an integer'));

  expectPositiveNumber(amount, (0, _i18n.translate)('Amount must be a positive number'));

  return tradeOptions;
};

var isCandle = function isCandle(candle) {
  return candle instanceof Object && ['open', 'high', 'low', 'close'].every(function (key) {
    return isPositiveNumber(candle[key]);
  }) && isPositiveInteger(candle.epoch);
};

var expectCandle = exports.expectCandle = function expectCandle(candle) {
  if (!isCandle(candle)) {
    var error = (0, _error2.createError)('CandleExpected', (0, _i18n.translate)('Given candle is not valid'));
    _observer.observer.emit('Error', error);
    throw error;
  }
  return candle;
};

var expectCandles = exports.expectCandles = function expectCandles(candles) {
  if (!(candles instanceof Array) || !candles.every(function (c) {
    return isCandle(c);
  })) {
    var error = (0, _error2.createError)('CandleListExpected', (0, _i18n.translate)('Given candle list is not valid'));
    _observer.observer.emit('Error', error);
    throw error;
  }
  return candles;
};

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.simpleMovingAverageArray = undefined;

var _binaryUtils = __webpack_require__(47);

var _math = __webpack_require__(33);

var simpleMovingAverage = function simpleMovingAverage(data, config) {
    var periods = config.periods;
    var field = config.field;


    if (data.length < periods) {
        throw new Error('Periods longer than data length');
    }

    var vals = (0, _math.takeLast)(data, periods, field);

    return (0, _math.sum)(vals) / periods;
};

var simpleMovingAverageArray = exports.simpleMovingAverageArray = function simpleMovingAverageArray(data, config) {
    var periods = config.periods;
    var _config$pipSize = config.pipSize;
    var pipSize = _config$pipSize === undefined ? 2 : _config$pipSize;

    return (0, _binaryUtils.sequence)(data.length - periods + 1).map(function (x, i) {
        return +simpleMovingAverage(data.slice(i, i + periods), config).toFixed(pipSize);
    });
};

exports.default = simpleMovingAverage;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (barrier, entrySpot, lastTickQuote) {
    return +barrier + (+entrySpot || lastTickQuote);
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (contract, lastTickQuote) {
    var barrierEntryName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'barrier';

    var barrierValue = +contract[barrierEntryName];
    if (!barrierValue) {
        return lastTickQuote;
    }
    if (contract.barrierType !== 'relative') {
        return barrierValue;
    }
    if (typeof contract.entry_spot === 'undefined' && typeof lastTickQuote === 'undefined') {
        throw new Error('Relative barrier can not be calculated');
    }
    return barrierValue + (+contract.entry_spot || lastTickQuote);
};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (date) {
    return new Date(date - date.getTimezoneOffset() * 60 * 1000).toISOString();
};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    return Math.floor(Date.now() / 1000);
};

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (a, b) {
    var aH = +a.slice(0, 2);
    var aM = +a.slice(3, 5);
    var aS = +a.slice(6);

    var bH = +b.slice(0, 2);
    var bM = +b.slice(3, 5);
    var bS = +b.slice(6);

    if (aH !== bH) {
        return aH > bH;
    } else if (aM !== bM) {
        return aM > bM;
    }
    return aS > bS;
};

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _xDayEpoch = __webpack_require__(35);

var _xDayEpoch2 = _interopRequireDefault(_xDayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  return (0, _xDayEpoch2.default)(-1);
};

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _durationSecHelper = __webpack_require__(99);

var _durationSecHelper2 = _interopRequireDefault(_durationSecHelper);

var _extractMinMaxInUnits = __webpack_require__(101);

var _extractMinMaxInUnits2 = _interopRequireDefault(_extractMinMaxInUnits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contracts, type) {
    if (type.indexOf('SPREAD') > -1) {
        return [];
    }

    var tickContracts = contracts.filter(function (c) {
        return c.min_contract_duration.slice(-1) === 't';
    });
    var tickDuration = tickContracts.length > 0 ? { min: 5, max: 10, unit: 't' } : undefined;

    var nonTickContracts = contracts.filter(function (c) {
        return c.min_contract_duration.slice(-1) !== 't';
    });
    if (nonTickContracts.length === 0) {
        return tickDuration ? [tickDuration] : [];
    }
    var nonTickMinSec = nonTickContracts.map(function (c) {
        return (0, _durationSecHelper2.default)(c.min_contract_duration);
    }).filter(function (d) {
        return !!d;
    }).reduce(function (a, b) {
        return Math.min(a, b);
    });

    var nonTickMaxSec = nonTickContracts.map(function (c) {
        return (0, _durationSecHelper2.default)(c.max_contract_duration);
    }).filter(function (d) {
        return !!d;
    }).reduce(function (a, b) {
        return Math.max(a, b);
    });

    var nonTicksDuration = (0, _extractMinMaxInUnits2.default)(nonTickMinSec, nonTickMaxSec);
    if (tickDuration) {
        nonTicksDuration.unshift(tickDuration);
    }

    return nonTicksDuration;
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr1, arr2) {
    var eq = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (a, b) {
        return a === b;
    };

    var len1 = arr1.length;
    var len2 = arr2.length;
    var lengthDiff = Math.abs(len1 - len2);

    switch (lengthDiff) {
        case 0:
            if (len1 === 0) return false;
            if (len1 === 1) return !eq(arr1[0], arr2[0]);

            return eq(arr1[arr1.length - 1], arr2[arr2.length - 2]) || eq(arr1[arr1.length - 2], arr2[arr2.length - 1]);

        case 1:
            if (len1 === 0 || len2 === 0) return true;

            return eq(arr1[arr1.length - 1], arr2[arr2.length - 2]) || eq(arr1[arr1.length - 2], arr2[arr2.length - 1]);

        default:
            return false;
    }
};

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(20)
  , toIndex  = __webpack_require__(43)
  , toLength = __webpack_require__(9);
module.exports = function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , aLen   = arguments.length
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
    , end    = aLen > 2 ? arguments[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(12)
  , toLength  = __webpack_require__(9)
  , toIndex   = __webpack_require__(43);
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(26)
  , TAG = __webpack_require__(3)('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(6)
  , createDesc      = __webpack_require__(17);

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4)
  , document = __webpack_require__(1).document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};

/***/ }),
/* 75 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(3)('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(26);
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators  = __webpack_require__(27)
  , ITERATOR   = __webpack_require__(3)('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),
/* 79 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

/***/ }),
/* 80 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(4)
  , anObject = __webpack_require__(2);
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = __webpack_require__(13)(Function.call, __webpack_require__(16).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global      = __webpack_require__(1)
  , dP          = __webpack_require__(6)
  , DESCRIPTORS = __webpack_require__(8)
  , SPECIES     = __webpack_require__(3)('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(84)('keys')
  , uid    = __webpack_require__(21);
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1)
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(116)
  , defined  = __webpack_require__(15);

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var ctx                = __webpack_require__(13)
  , invoke             = __webpack_require__(53)
  , html               = __webpack_require__(112)
  , cel                = __webpack_require__(74)
  , global             = __webpack_require__(1)
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(__webpack_require__(26)(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(72)
  , ITERATOR  = __webpack_require__(3)('iterator')
  , Iterators = __webpack_require__(27);
module.exports = __webpack_require__(37).getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

/**
 * Merges an array of buffers into a new buffer.
 *
 * @param {Buffer[]} list The array of buffers to concat
 * @param {Number} totalLength The total length of buffers in the list
 * @return {Buffer} The resulting buffer
 * @public
 */
const concat = (list, totalLength) => {
  const target = Buffer.allocUnsafe(totalLength);
  var offset = 0;

  for (var i = 0; i < list.length; i++) {
    const buf = list[i];
    buf.copy(target, offset);
    offset += buf.length;
  }

  return target;
};

try {
  const bufferUtil = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"bufferutil\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

  module.exports = Object.assign({ concat }, bufferUtil.BufferUtil || bufferUtil);
} catch (e) {
  /**
   * Masks a buffer using the given mask.
   *
   * @param {Buffer} source The buffer to mask
   * @param {Buffer} mask The mask to use
   * @param {Buffer} output The buffer where to store the result
   * @param {Number} offset The offset at which to start writing
   * @param {Number} length The number of bytes to mask.
   * @public
   */
  const mask = (source, mask, output, offset, length) => {
    for (var i = 0; i < length; i++) {
      output[offset + i] = source[i] ^ mask[i & 3];
    }
  };

  /**
   * Unmasks a buffer using the given mask.
   *
   * @param {Buffer} buffer The buffer to unmask
   * @param {Buffer} mask The mask to use
   * @public
   */
  const unmask = (buffer, mask) => {
    // Required until https://github.com/nodejs/node/issues/9006 is resolved.
    const length = buffer.length;
    for (var i = 0; i < length; i++) {
      buffer[i] ^= mask[i & 3];
    }
  };

  module.exports = { concat, mask, unmask };
}


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.BINARY_TYPES = ['nodebuffer', 'arraybuffer', 'fragments'];
exports.GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
exports.EMPTY_BUFFER = Buffer.alloc(0);
exports.NOOP = () => {};


/***/ }),
/* 90 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),
/* 91 */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var createError = exports.createError = function createError(name, message) {
  var e = new Error(message);
  e.name = name;
  return e;
};

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.exponentialMovingAverageArray = undefined;

var _math = __webpack_require__(33);

var exponentialMovingAverage = function exponentialMovingAverage(data, config) {
    var initVal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var periods = config.periods;
    var field = config.field;
    var _config$pipSize = config.pipSize;
    var pipSize = _config$pipSize === undefined ? 2 : _config$pipSize;


    var weightingMultiplier = 2 / (periods + 1);

    var vals = (0, _math.takeField)(data, field);

    if (initVal) {
        return (vals[0] - initVal) * weightingMultiplier + initVal;
    }

    if (data.length < periods) {
        throw new Error('Periods longer than data length');
    }

    var meanVal = (0, _math.mean)((0, _math.takeField)(data.slice(0, periods), field));

    return +vals.slice(periods).reduce(function (prev, e) {
        return (e - prev) * weightingMultiplier + prev;
    }, meanVal).toFixed(pipSize);
};

var exponentialMovingAverageArray = exports.exponentialMovingAverageArray = function exponentialMovingAverageArray(data, config) {
    var periods = config.periods;


    var initVal = exponentialMovingAverage(data.slice(0, periods), config);

    return data.slice(periods - 1).map(function (x, i) {
        return !i ? initVal : initVal = exponentialMovingAverage([x], config, initVal);
    });
};

exports.default = exponentialMovingAverage;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr) {
    return arr.reduce(function (obj, x) {
        Object.keys(x).forEach(function (key) {
            if (Array.isArray(obj[key])) {
                obj[key].push(x[key]);
            } else {
                obj[key] = [x[key]];
            }
        });
        return obj;
    }, {});
};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _commonRelativeBarrier = __webpack_require__(62);

var _commonRelativeBarrier2 = _interopRequireDefault(_commonRelativeBarrier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract, lastTickQuote) {
    return (0, _commonRelativeBarrier2.default)(contract.barrier, contract.entry_spot, lastTickQuote);
};

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dateAsLocalISOString = __webpack_require__(64);

var _dateAsLocalISOString2 = _interopRequireDefault(_dateAsLocalISOString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (date) {
    return (0, _dateAsLocalISOString2.default)(date).slice(11, 19);
};

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (sec) {
    var minute = Math.floor(sec / 60);
    var hour = Math.floor(minute / 60);
    var day = Math.floor(hour / 24);

    return [sec, minute, hour, day];
};

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _timeStringBigger = __webpack_require__(66);

var _timeStringBigger2 = _interopRequireDefault(_timeStringBigger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (a, b) {
    if (a === b) {
        return false;
    }
    return !(0, _timeStringBigger2.default)(a, b);
};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _durationToSecs = __webpack_require__(46);

var _durationToSecs2 = _interopRequireDefault(_durationToSecs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (duration) {
    var d = +duration.slice(0, -1);
    var u = duration.slice(-1);
    return (0, _durationToSecs2.default)(d, u);
};

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ['t', 's', 'm', 'h', 'd'];

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _durationUnits = __webpack_require__(100);

var _durationUnits2 = _interopRequireDefault(_durationUnits);

var _splitSecsToUnits = __webpack_require__(97);

var _splitSecsToUnits2 = _interopRequireDefault(_splitSecsToUnits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// block is a structure that describes min and max of specific time unit
var blockIsValid = function blockIsValid(minArg, maxArg, unit) {
    if (maxArg <= 1) {
        return false;
    }
    switch (unit) {
        case 's':
            return minArg < 60;
        case 'm':
            return minArg < 60;
        case 'h':
            return minArg < 24;
        case 'd':
        default:
            return true;
    }
};

exports.default = function (minInSecs, maxInSecs) {
    var minInUnits = (0, _splitSecsToUnits2.default)(minInSecs);
    var maxInUnits = (0, _splitSecsToUnits2.default)(maxInSecs);

    var durations = [];
    for (var i = 0; i < minInUnits.length; i++) {
        var unit = _durationUnits2.default[i + 1];
        var minI = minInUnits[i];
        var maxI = maxInUnits[i];
        if (blockIsValid(minI, maxI, unit)) {
            durations.push({
                unit: unit,
                min: minI > 0 ? minI : 1,
                max: maxI });
        }
    }
    return durations;
};

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (duration) {
    return !!duration && duration.slice(-1) === 't';
};

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (value, pips) {
    return +value.toFixed(pips).slice(-1);
};

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (ohlc1, ohlc2) {
    return !ohlc1 && ohlc1 === ohlc2 || !!ohlc1 && !!ohlc2 && ohlc1.epoch === ohlc2.epoch && ohlc1.close === ohlc2.close;
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (tick1, tick2) {
    return !tick1 && tick1 === tick2 || !!tick1 && !!tick2 && tick1.epoch === tick2.epoch && tick1.quote === tick2.quote;
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tradeTypes = __webpack_require__(49);

var _tradeTypes2 = _interopRequireDefault(_tradeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (code) {
    var tradeType = _tradeTypes2.default.find(function (x) {
        return x.value === code;
    });
    return tradeType ? tradeType.text : 'Unknown';
};

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tradeTypes = __webpack_require__(49);

var _tradeTypes2 = _interopRequireDefault(_tradeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (type) {
    var typeDetails = _tradeTypes2.default.find(function (x) {
        return x.value === type;
    });
    return !!(typeDetails && typeDetails.barrier);
};

/***/ }),
/* 108 */
/***/ (function(module, exports) {

var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

module.exports = charenc;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(20)
  , toIndex  = __webpack_require__(43)
  , toLength = __webpack_require__(9);

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , end   = arguments.length > 2 ? arguments[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP          = __webpack_require__(6).f
  , create      = __webpack_require__(39)
  , redefineAll = __webpack_require__(30)
  , ctx         = __webpack_require__(13)
  , anInstance  = __webpack_require__(25)
  , defined     = __webpack_require__(15)
  , forOf       = __webpack_require__(52)
  , $iterDefine = __webpack_require__(118)
  , step        = __webpack_require__(119)
  , setSpecies  = __webpack_require__(82)
  , DESCRIPTORS = __webpack_require__(8)
  , fastKey     = __webpack_require__(38).fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll       = __webpack_require__(30)
  , getWeak           = __webpack_require__(38).getWeak
  , anObject          = __webpack_require__(2)
  , isObject          = __webpack_require__(4)
  , anInstance        = __webpack_require__(25)
  , forOf             = __webpack_require__(52)
  , createArrayMethod = __webpack_require__(36)
  , $has              = __webpack_require__(7)
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1).document && document.documentElement;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(8) && !__webpack_require__(5)(function(){
  return Object.defineProperty(__webpack_require__(74)('div'), 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(26);
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(4)
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(4)
  , cof      = __webpack_require__(26)
  , MATCH    = __webpack_require__(3)('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(2);
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY        = __webpack_require__(28)
  , $export        = __webpack_require__(0)
  , redefine       = __webpack_require__(18)
  , hide           = __webpack_require__(10)
  , has            = __webpack_require__(7)
  , Iterators      = __webpack_require__(27)
  , $iterCreate    = __webpack_require__(344)
  , setToStringTag = __webpack_require__(31)
  , getPrototypeOf = __webpack_require__(41)
  , ITERATOR       = __webpack_require__(3)('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = function(done, value){
  return {value: value, done: !!done};
};

/***/ }),
/* 120 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = __webpack_require__(29)
  , gOPS     = __webpack_require__(55)
  , pIE      = __webpack_require__(42)
  , toObject = __webpack_require__(20)
  , IObject  = __webpack_require__(77)
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(5)(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var has          = __webpack_require__(7)
  , toIObject    = __webpack_require__(12)
  , arrayIndexOf = __webpack_require__(71)(false)
  , IE_PROTO     = __webpack_require__(83)('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys   = __webpack_require__(29)
  , toIObject = __webpack_require__(12)
  , isEnum    = __webpack_require__(42).f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN     = __webpack_require__(40)
  , gOPS     = __webpack_require__(55)
  , anObject = __webpack_require__(2)
  , Reflect  = __webpack_require__(1).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = gOPN.f(anObject(it))
    , getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

/***/ }),
/* 125 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = __webpack_require__(2)
  , aFunction = __webpack_require__(19)
  , SPECIES   = __webpack_require__(3)('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(9)
  , repeat   = __webpack_require__(128)
  , defined  = __webpack_require__(15);

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength || fillStr == '')return S;
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(32)
  , defined   = __webpack_require__(15);

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(1)
  , hide   = __webpack_require__(10)
  , uid    = __webpack_require__(21)
  , TYPED  = uid('typed_array')
  , VIEW   = uid('view')
  , ABV    = !!(global.ArrayBuffer && global.DataView)
  , CONSTR = ABV
  , i = 0, l = 9, Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while(i < l){
  if(Typed = global[TypedArrayConstructors[i++]]){
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV:    ABV,
  CONSTR: CONSTR,
  TYPED:  TYPED,
  VIEW:   VIEW
};

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(3);

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty;

/**
 * An auto incrementing id which we can use to create "unique" Ultron instances
 * so we can track the event emitters that are added through the Ultron
 * interface.
 *
 * @type {Number}
 * @private
 */
var id = 0;

/**
 * Ultron is high-intelligence robot. It gathers intelligence so it can start improving
 * upon his rudimentary design. It will learn from your EventEmitting patterns
 * and exterminate them.
 *
 * @constructor
 * @param {EventEmitter} ee EventEmitter instance we need to wrap.
 * @api public
 */
function Ultron(ee) {
  if (!(this instanceof Ultron)) return new Ultron(ee);

  this.id = id++;
  this.ee = ee;
}

/**
 * Register a new EventListener for the given event.
 *
 * @param {String} event Name of the event.
 * @param {Functon} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @returns {Ultron}
 * @api public
 */
Ultron.prototype.on = function on(event, fn, context) {
  fn.__ultron = this.id;
  this.ee.on(event, fn, context);

  return this;
};
/**
 * Add an EventListener that's only called once.
 *
 * @param {String} event Name of the event.
 * @param {Function} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @returns {Ultron}
 * @api public
 */
Ultron.prototype.once = function once(event, fn, context) {
  fn.__ultron = this.id;
  this.ee.once(event, fn, context);

  return this;
};

/**
 * Remove the listeners we assigned for the given event.
 *
 * @returns {Ultron}
 * @api public
 */
Ultron.prototype.remove = function remove() {
  var args = arguments
    , ee = this.ee
    , event;

  //
  // When no event names are provided we assume that we need to clear all the
  // events that were assigned through us.
  //
  if (args.length === 1 && 'string' === typeof args[0]) {
    args = args[0].split(/[, ]+/);
  } else if (!args.length) {
    if (ee.eventNames) {
      args = ee.eventNames();
    } else if (ee._events) {
      args = [];

      for (event in ee._events) {
        if (has.call(ee._events, event)) args.push(event);
      }

      if (Object.getOwnPropertySymbols) {
        args = args.concat(Object.getOwnPropertySymbols(ee._events));
      }
    }
  }

  for (var i = 0; i < args.length; i++) {
    var listeners = ee.listeners(args[i]);

    for (var j = 0; j < listeners.length; j++) {
      event = listeners[j];

      //
      // Once listeners have a `listener` property that stores the real listener
      // in the EventEmitter that ships with Node.js.
      //
      if (event.listener) {
        if (event.listener.__ultron !== this.id) continue;
        delete event.listener.__ultron;
      } else {
        if (event.__ultron !== this.id) continue;
        delete event.__ultron;
      }

      ee.removeListener(args[i], event);
    }
  }

  return this;
};

/**
 * Destroy the Ultron instance, remove all listeners and release all references.
 *
 * @returns {Boolean}
 * @api public
 */
Ultron.prototype.destroy = function destroy() {
  if (!this.ee) return false;

  this.remove();
  this.ee = null;

  return true;
};

//
// Expose the module.
//
module.exports = Ultron;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */



module.exports = {
  isValidErrorCode: function (code) {
    return (code >= 1000 && code <= 1013 && code !== 1004 && code !== 1005 && code !== 1006) ||
      (code >= 3000 && code <= 4999);
  },
  1000: 'normal',
  1001: 'going away',
  1002: 'protocol error',
  1003: 'unsupported data',
  1004: 'reserved',
  1005: 'reserved for extensions',
  1006: 'reserved for extensions',
  1007: 'inconsistent or invalid data',
  1008: 'policy violation',
  1009: 'message too big',
  1010: 'extension handshake missing',
  1011: 'an unexpected condition prevented the request from being fulfilled',
  1012: 'service restart',
  1013: 'try again later'
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Parse the `Sec-WebSocket-Extensions` header into an object.
 *
 * @param {String} value field value of the header
 * @return {Object} The parsed object
 * @public
 */
const parse = (value) => {
  value = value || '';

  const extensions = {};

  value.split(',').forEach((v) => {
    const params = v.split(';');
    const token = params.shift().trim();
    const paramsList = extensions[token] = extensions[token] || [];
    const parsedParams = {};

    params.forEach((param) => {
      const parts = param.trim().split('=');
      const key = parts[0];
      var value = parts[1];

      if (value === undefined) {
        value = true;
      } else {
        // unquote value
        if (value[0] === '"') {
          value = value.slice(1);
        }
        if (value[value.length - 1] === '"') {
          value = value.slice(0, value.length - 1);
        }
      }
      (parsedParams[key] = parsedParams[key] || []).push(value);
    });

    paramsList.push(parsedParams);
  });

  return extensions;
};

/**
 * Serialize a parsed `Sec-WebSocket-Extensions` header to a string.
 *
 * @param {Object} value The object to format
 * @return {String} A string representing the given value
 * @public
 */
const format = (value) => {
  return Object.keys(value).map((token) => {
    var paramsList = value[token];
    if (!Array.isArray(paramsList)) paramsList = [paramsList];
    return paramsList.map((params) => {
      return [token].concat(Object.keys(params).map((k) => {
        var p = params[k];
        if (!Array.isArray(p)) p = [p];
        return p.map((v) => v === true ? k : `${k}=${v}`).join('; ');
      })).join('; ');
    }).join(', ');
  }).join(', ');
};

module.exports = { format, parse };


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */



const PerMessageDeflate = __webpack_require__(57);
const isValidUTF8 = __webpack_require__(359);
const bufferUtil = __webpack_require__(88);
const ErrorCodes = __webpack_require__(132);
const constants = __webpack_require__(89);

const GET_INFO = 0;
const GET_PAYLOAD_LENGTH_16 = 1;
const GET_PAYLOAD_LENGTH_64 = 2;
const GET_MASK = 3;
const GET_DATA = 4;
const INFLATING = 5;

/**
 * HyBi Receiver implementation.
 */
class Receiver {
  /**
   * Creates a Receiver instance.
   *
   * @param {Object} extensions An object containing the negotiated extensions
   * @param {Number} maxPayload The maximum allowed message length
   * @param {String} binaryType The type for binary data
   */
  constructor (extensions, maxPayload, binaryType) {
    this.binaryType = binaryType || constants.BINARY_TYPES[0];
    this.extensions = extensions || {};
    this.maxPayload = maxPayload | 0;

    this.bufferedBytes = 0;
    this.buffers = [];

    this.compressed = false;
    this.payloadLength = 0;
    this.fragmented = 0;
    this.masked = false;
    this.fin = false;
    this.mask = null;
    this.opcode = 0;

    this.totalPayloadLength = 0;
    this.messageLength = 0;
    this.fragments = [];

    this.cleanupCallback = null;
    this.hadError = false;
    this.dead = false;
    this.loop = false;

    this.onmessage = null;
    this.onclose = null;
    this.onerror = null;
    this.onping = null;
    this.onpong = null;

    this.state = GET_INFO;
  }

  /**
   * Consumes bytes from the available buffered data.
   *
   * @param {Number} bytes The number of bytes to consume
   * @return {Buffer} Consumed bytes
   * @private
   */
  readBuffer (bytes) {
    var offset = 0;
    var dst;
    var l;

    this.bufferedBytes -= bytes;

    if (bytes === this.buffers[0].length) return this.buffers.shift();

    if (bytes < this.buffers[0].length) {
      dst = this.buffers[0].slice(0, bytes);
      this.buffers[0] = this.buffers[0].slice(bytes);
      return dst;
    }

    dst = Buffer.allocUnsafe(bytes);

    while (bytes > 0) {
      l = this.buffers[0].length;

      if (bytes >= l) {
        this.buffers[0].copy(dst, offset);
        offset += l;
        this.buffers.shift();
      } else {
        this.buffers[0].copy(dst, offset, 0, bytes);
        this.buffers[0] = this.buffers[0].slice(bytes);
      }

      bytes -= l;
    }

    return dst;
  }

  /**
   * Checks if the number of buffered bytes is bigger or equal than `n` and
   * calls `cleanup` if necessary.
   *
   * @param {Number} n The number of bytes to check against
   * @return {Boolean} `true` if `bufferedBytes >= n`, else `false`
   * @private
   */
  hasBufferedBytes (n) {
    if (this.bufferedBytes >= n) return true;

    this.loop = false;
    if (this.dead) this.cleanup(this.cleanupCallback);
    return false;
  }

  /**
   * Adds new data to the parser.
   *
   * @public
   */
  add (data) {
    if (this.dead) return;

    this.bufferedBytes += data.length;
    this.buffers.push(data);
    this.startLoop();
  }

  /**
   * Starts the parsing loop.
   *
   * @private
   */
  startLoop () {
    this.loop = true;

    while (this.loop) {
      switch (this.state) {
        case GET_INFO:
          this.getInfo();
          break;
        case GET_PAYLOAD_LENGTH_16:
          this.getPayloadLength16();
          break;
        case GET_PAYLOAD_LENGTH_64:
          this.getPayloadLength64();
          break;
        case GET_MASK:
          this.getMask();
          break;
        case GET_DATA:
          this.getData();
          break;
        default: // `INFLATING`
          this.loop = false;
      }
    }
  }

  /**
   * Reads the first two bytes of a frame.
   *
   * @private
   */
  getInfo () {
    if (!this.hasBufferedBytes(2)) return;

    const buf = this.readBuffer(2);

    if ((buf[0] & 0x30) !== 0x00) {
      this.error(new Error('RSV2 and RSV3 must be clear'), 1002);
      return;
    }

    const compressed = (buf[0] & 0x40) === 0x40;

    if (compressed && !this.extensions[PerMessageDeflate.extensionName]) {
      this.error(new Error('RSV1 must be clear'), 1002);
      return;
    }

    this.fin = (buf[0] & 0x80) === 0x80;
    this.opcode = buf[0] & 0x0f;
    this.payloadLength = buf[1] & 0x7f;

    if (this.opcode === 0x00) {
      if (compressed) {
        this.error(new Error('RSV1 must be clear'), 1002);
        return;
      }

      if (!this.fragmented) {
        this.error(new Error(`invalid opcode: ${this.opcode}`), 1002);
        return;
      } else {
        this.opcode = this.fragmented;
      }
    } else if (this.opcode === 0x01 || this.opcode === 0x02) {
      if (this.fragmented) {
        this.error(new Error(`invalid opcode: ${this.opcode}`), 1002);
        return;
      }

      this.compressed = compressed;
    } else if (this.opcode > 0x07 && this.opcode < 0x0b) {
      if (!this.fin) {
        this.error(new Error('FIN must be set'), 1002);
        return;
      }

      if (compressed) {
        this.error(new Error('RSV1 must be clear'), 1002);
        return;
      }

      if (this.payloadLength > 0x7d) {
        this.error(new Error('invalid payload length'), 1002);
        return;
      }
    } else {
      this.error(new Error(`invalid opcode: ${this.opcode}`), 1002);
      return;
    }

    if (!this.fin && !this.fragmented) this.fragmented = this.opcode;

    this.masked = (buf[1] & 0x80) === 0x80;

    if (this.payloadLength === 126) this.state = GET_PAYLOAD_LENGTH_16;
    else if (this.payloadLength === 127) this.state = GET_PAYLOAD_LENGTH_64;
    else this.haveLength();
  }

  /**
   * Gets extended payload length (7+16).
   *
   * @private
   */
  getPayloadLength16 () {
    if (!this.hasBufferedBytes(2)) return;

    this.payloadLength = this.readBuffer(2).readUInt16BE(0, true);
    this.haveLength();
  }

  /**
   * Gets extended payload length (7+64).
   *
   * @private
   */
  getPayloadLength64 () {
    if (!this.hasBufferedBytes(8)) return;

    const buf = this.readBuffer(8);
    const num = buf.readUInt32BE(0, true);

    //
    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
    // if payload length is greater than this number.
    //
    if (num > Math.pow(2, 53 - 32) - 1) {
      this.error(new Error('max payload size exceeded'), 1009);
      return;
    }

    this.payloadLength = (num * Math.pow(2, 32)) + buf.readUInt32BE(4, true);
    this.haveLength();
  }

  /**
   * Payload length has been read.
   *
   * @private
   */
  haveLength () {
    if (this.opcode < 0x08 && this.maxPayloadExceeded(this.payloadLength)) {
      return;
    }

    if (this.masked) this.state = GET_MASK;
    else this.state = GET_DATA;
  }

  /**
   * Reads mask bytes.
   *
   * @private
   */
  getMask () {
    if (!this.hasBufferedBytes(4)) return;

    this.mask = this.readBuffer(4);
    this.state = GET_DATA;
  }

  /**
   * Reads data bytes.
   *
   * @private
   */
  getData () {
    var data = constants.EMPTY_BUFFER;

    if (this.payloadLength) {
      if (!this.hasBufferedBytes(this.payloadLength)) return;

      data = this.readBuffer(this.payloadLength);
      if (this.masked) bufferUtil.unmask(data, this.mask);
    }

    if (this.opcode > 0x07) {
      this.controlMessage(data);
    } else if (this.compressed) {
      this.state = INFLATING;
      this.decompress(data);
    } else if (this.pushFragment(data)) {
      this.dataMessage();
    }
  }

  /**
   * Decompresses data.
   *
   * @param {Buffer} data Compressed data
   * @private
   */
  decompress (data) {
    const extension = this.extensions[PerMessageDeflate.extensionName];

    extension.decompress(data, this.fin, (err, buf) => {
      if (err) {
        this.error(err, err.closeCode === 1009 ? 1009 : 1007);
        return;
      }

      if (this.pushFragment(buf)) this.dataMessage();
      this.startLoop();
    });
  }

  /**
   * Handles a data message.
   *
   * @private
   */
  dataMessage () {
    if (this.fin) {
      const messageLength = this.messageLength;
      const fragments = this.fragments;

      this.totalPayloadLength = 0;
      this.messageLength = 0;
      this.fragmented = 0;
      this.fragments = [];

      if (this.opcode === 2) {
        var data;

        if (this.binaryType === 'nodebuffer') {
          data = toBuffer(fragments, messageLength);
        } else if (this.binaryType === 'arraybuffer') {
          data = toArrayBuffer(toBuffer(fragments, messageLength));
        } else {
          data = fragments;
        }

        this.onmessage(data, { masked: this.masked, binary: true });
      } else {
        const buf = toBuffer(fragments, messageLength);

        if (!isValidUTF8(buf)) {
          this.error(new Error('invalid utf8 sequence'), 1007);
          return;
        }

        this.onmessage(buf.toString(), { masked: this.masked });
      }
    }

    this.state = GET_INFO;
  }

  /**
   * Handles a control message.
   *
   * @param {Buffer} data Data to handle
   * @private
   */
  controlMessage (data) {
    if (this.opcode === 0x08) {
      if (data.length === 0) {
        this.onclose(1000, '', { masked: this.masked });
        this.loop = false;
        this.cleanup(this.cleanupCallback);
      } else if (data.length === 1) {
        this.error(new Error('invalid payload length'), 1002);
      } else {
        const code = data.readUInt16BE(0, true);

        if (!ErrorCodes.isValidErrorCode(code)) {
          this.error(new Error(`invalid status code: ${code}`), 1002);
          return;
        }

        const buf = data.slice(2);

        if (!isValidUTF8(buf)) {
          this.error(new Error('invalid utf8 sequence'), 1007);
          return;
        }

        this.onclose(code, buf.toString(), { masked: this.masked });
        this.loop = false;
        this.cleanup(this.cleanupCallback);
      }

      return;
    }

    const flags = { masked: this.masked, binary: true };

    if (this.opcode === 0x09) this.onping(data, flags);
    else this.onpong(data, flags);

    this.state = GET_INFO;
  }

  /**
   * Handles an error.
   *
   * @param {Error} err The error
   * @param {Number} code Close code
   * @private
   */
  error (err, code) {
    this.onerror(err, code);
    this.hadError = true;
    this.loop = false;
    this.cleanup(this.cleanupCallback);
  }

  /**
   * Checks payload size, disconnects socket when it exceeds `maxPayload`.
   *
   * @param {Number} length Payload length
   * @private
   */
  maxPayloadExceeded (length) {
    if (length === 0 || this.maxPayload < 1) return false;

    const fullLength = this.totalPayloadLength + length;

    if (fullLength <= this.maxPayload) {
      this.totalPayloadLength = fullLength;
      return false;
    }

    this.error(new Error('max payload size exceeded'), 1009);
    return true;
  }

  /**
   * Appends a fragment in the fragments array after checking that the sum of
   * fragment lengths does not exceed `maxPayload`.
   *
   * @param {Buffer} fragment The fragment to add
   * @return {Boolean} `true` if `maxPayload` is not exceeded, else `false`
   * @private
   */
  pushFragment (fragment) {
    if (fragment.length === 0) return true;

    const totalLength = this.messageLength + fragment.length;

    if (this.maxPayload < 1 || totalLength <= this.maxPayload) {
      this.messageLength = totalLength;
      this.fragments.push(fragment);
      return true;
    }

    this.error(new Error('max payload size exceeded'), 1009);
    return false;
  }

  /**
   * Releases resources used by the receiver.
   *
   * @param {Function} cb Callback
   * @public
   */
  cleanup (cb) {
    this.dead = true;

    if (!this.hadError && (this.loop || this.state === INFLATING)) {
      this.cleanupCallback = cb;
    } else {
      this.extensions = null;
      this.fragments = null;
      this.buffers = null;
      this.mask = null;

      this.cleanupCallback = null;
      this.onmessage = null;
      this.onclose = null;
      this.onerror = null;
      this.onping = null;
      this.onpong = null;

      if (cb) cb();
    }
  }
}

module.exports = Receiver;

/**
 * Makes a buffer from a list of fragments.
 *
 * @param {Buffer[]} fragments The list of fragments composing the message
 * @param {Number} messageLength The length of the message
 * @return {Buffer}
 * @private
 */
function toBuffer (fragments, messageLength) {
  if (fragments.length === 1) return fragments[0];
  if (fragments.length > 1) return bufferUtil.concat(fragments, messageLength);
  return constants.EMPTY_BUFFER;
}

/**
 * Converts a buffer to an `ArrayBuffer`.
 *
 * @param {Buffer} The buffer to convert
 * @return {ArrayBuffer} Converted buffer
 */
function toArrayBuffer (buf) {
  if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
    return buf.buffer;
  }

  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
}


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */



const crypto = __webpack_require__(90);

const PerMessageDeflate = __webpack_require__(57);
const bufferUtil = __webpack_require__(88);
const ErrorCodes = __webpack_require__(132);

/**
 * HyBi Sender implementation.
 */
class Sender {
  /**
   * Creates a Sender instance.
   *
   * @param {net.Socket} socket The connection socket
   * @param {Object} extensions An object containing the negotiated extensions
   */
  constructor (socket, extensions) {
    this.perMessageDeflate = (extensions || {})[PerMessageDeflate.extensionName];
    this._socket = socket;

    this.firstFragment = true;
    this.compress = false;

    this.bufferedBytes = 0;
    this.deflating = false;
    this.queue = [];

    this.onerror = null;
  }

  /**
   * Frames a piece of data according to the HyBi WebSocket protocol.
   *
   * @param {Buffer} data The data to frame
   * @param {Object} options Options object
   * @param {Number} options.opcode The opcode
   * @param {Boolean} options.readOnly Specifies whether `data` can be modified
   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
   * @return {Buffer[]} The framed data as a list of `Buffer` instances
   * @public
   */
  static frame (data, options) {
    const merge = data.length < 1024 || (options.mask && options.readOnly);
    var offset = options.mask ? 6 : 2;
    var payloadLength = data.length;

    if (data.length >= 65536) {
      offset += 8;
      payloadLength = 127;
    } else if (data.length > 125) {
      offset += 2;
      payloadLength = 126;
    }

    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);

    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
    if (options.rsv1) target[0] |= 0x40;

    if (payloadLength === 126) {
      target.writeUInt16BE(data.length, 2, true);
    } else if (payloadLength === 127) {
      target.writeUInt32BE(0, 2, true);
      target.writeUInt32BE(data.length, 6, true);
    }

    if (!options.mask) {
      target[1] = payloadLength;
      if (merge) {
        data.copy(target, offset);
        return [target];
      }

      return [target, data];
    }

    const mask = crypto.randomBytes(4);

    target[1] = payloadLength | 0x80;
    target[offset - 4] = mask[0];
    target[offset - 3] = mask[1];
    target[offset - 2] = mask[2];
    target[offset - 1] = mask[3];

    if (merge) {
      bufferUtil.mask(data, mask, target, offset, data.length);
      return [target];
    }

    bufferUtil.mask(data, mask, data, 0, data.length);
    return [target, data];
  }

  /**
   * Sends a close message to the other peer.
   *
   * @param {(Number|undefined)} code The status code component of the body
   * @param {String} data The message component of the body
   * @param {Boolean} mask Specifies whether or not to mask the message
   * @param {Function} cb Callback
   * @public
   */
  close (code, data, mask, cb) {
    if (code !== undefined && (typeof code !== 'number' || !ErrorCodes.isValidErrorCode(code))) {
      throw new Error('first argument must be a valid error code number');
    }

    const buf = Buffer.allocUnsafe(2 + (data ? Buffer.byteLength(data) : 0));

    buf.writeUInt16BE(code || 1000, 0, true);
    if (buf.length > 2) buf.write(data, 2);

    if (this.deflating) {
      this.enqueue([this.doClose, buf, mask, cb]);
    } else {
      this.doClose(buf, mask, cb);
    }
  }

  /**
   * Frames and sends a close message.
   *
   * @param {Buffer} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @private
   */
  doClose (data, mask, cb) {
    this.sendFrame(Sender.frame(data, {
      readOnly: false,
      opcode: 0x08,
      rsv1: false,
      fin: true,
      mask
    }), cb);
  }

  /**
   * Sends a ping message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @public
   */
  ping (data, mask) {
    var readOnly = true;

    if (!Buffer.isBuffer(data)) {
      if (data instanceof ArrayBuffer) {
        data = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        data = viewToBuffer(data);
      } else {
        data = Buffer.from(data);
        readOnly = false;
      }
    }

    if (this.deflating) {
      this.enqueue([this.doPing, data, mask, readOnly]);
    } else {
      this.doPing(data, mask, readOnly);
    }
  }

  /**
   * Frames and sends a ping message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Boolean} readOnly Specifies whether `data` can be modified
   * @private
   */
  doPing (data, mask, readOnly) {
    this.sendFrame(Sender.frame(data, {
      opcode: 0x09,
      rsv1: false,
      fin: true,
      readOnly,
      mask
    }));
  }

  /**
   * Sends a pong message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @public
   */
  pong (data, mask) {
    var readOnly = true;

    if (!Buffer.isBuffer(data)) {
      if (data instanceof ArrayBuffer) {
        data = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        data = viewToBuffer(data);
      } else {
        data = Buffer.from(data);
        readOnly = false;
      }
    }

    if (this.deflating) {
      this.enqueue([this.doPong, data, mask, readOnly]);
    } else {
      this.doPong(data, mask, readOnly);
    }
  }

  /**
   * Frames and sends a pong message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Boolean} readOnly Specifies whether `data` can be modified
   * @private
   */
  doPong (data, mask, readOnly) {
    this.sendFrame(Sender.frame(data, {
      opcode: 0x0a,
      rsv1: false,
      fin: true,
      readOnly,
      mask
    }));
  }

  /**
   * Sends a data message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} options.compress Specifies whether or not to compress `data`
   * @param {Boolean} options.binary Specifies whether `data` is binary or text
   * @param {Boolean} options.fin Specifies whether the fragment is the last one
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @public
   */
  send (data, options, cb) {
    var opcode = options.binary ? 2 : 1;
    var rsv1 = options.compress;
    var readOnly = true;

    if (!Buffer.isBuffer(data)) {
      if (data instanceof ArrayBuffer) {
        data = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        data = viewToBuffer(data);
      } else {
        data = Buffer.from(data);
        readOnly = false;
      }
    }

    if (this.firstFragment) {
      this.firstFragment = false;
      if (rsv1 && this.perMessageDeflate) {
        rsv1 = data.length >= this.perMessageDeflate.threshold;
      }
      this.compress = rsv1;
    } else {
      rsv1 = false;
      opcode = 0;
    }

    if (options.fin) this.firstFragment = true;

    if (this.perMessageDeflate) {
      const opts = {
        compress: this.compress,
        mask: options.mask,
        fin: options.fin,
        readOnly,
        opcode,
        rsv1
      };

      if (this.deflating) {
        this.enqueue([this.dispatch, data, opts, cb]);
      } else {
        this.dispatch(data, opts, cb);
      }
    } else {
      this.sendFrame(Sender.frame(data, {
        mask: options.mask,
        fin: options.fin,
        rsv1: false,
        readOnly,
        opcode
      }), cb);
    }
  }

  /**
   * Dispatches a data message.
   *
   * @param {Buffer} data The message to send
   * @param {Object} options Options object
   * @param {Number} options.opcode The opcode
   * @param {Boolean} options.readOnly Specifies whether `data` can be modified
   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
   * @param {Boolean} options.compress Specifies whether or not to compress `data`
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
   * @param {Function} cb Callback
   * @private
   */
  dispatch (data, options, cb) {
    if (!options.compress) {
      this.sendFrame(Sender.frame(data, options), cb);
      return;
    }

    this.deflating = true;
    this.perMessageDeflate.compress(data, options.fin, (err, buf) => {
      if (err) {
        if (cb) cb(err);
        else this.onerror(err);
        return;
      }

      options.readOnly = false;
      this.sendFrame(Sender.frame(buf, options), cb);
      this.deflating = false;
      this.dequeue();
    });
  }

  /**
   * Executes queued send operations.
   *
   * @private
   */
  dequeue () {
    while (!this.deflating && this.queue.length) {
      const params = this.queue.shift();

      this.bufferedBytes -= params[1].length;
      params[0].apply(this, params.slice(1));
    }
  }

  /**
   * Enqueues a send operation.
   *
   * @param {Array} params Send operation parameters.
   * @private
   */
  enqueue (params) {
    this.bufferedBytes += params[1].length;
    this.queue.push(params);
  }

  /**
   * Sends a frame.
   *
   * @param {Buffer[]} list The frame to send
   * @param {Function} cb Callback
   * @private
   */
  sendFrame (list, cb) {
    if (list.length === 2) {
      this._socket.write(list[0]);
      this._socket.write(list[1], cb);
    } else {
      this._socket.write(list[0], cb);
    }
  }
}

module.exports = Sender;

/**
 * Converts an `ArrayBuffer` view into a buffer.
 *
 * @param {(DataView|TypedArray)} view The view to convert
 * @return {Buffer} Converted view
 * @private
 */
function viewToBuffer (view) {
  const buf = Buffer.from(view.buffer);

  if (view.byteLength !== view.buffer.byteLength) {
    return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);
  }

  return buf;
}


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */



const EventEmitter = __webpack_require__(91);
const crypto = __webpack_require__(90);
const Ultron = __webpack_require__(131);
const https = __webpack_require__(375);
const http = __webpack_require__(137);
const url = __webpack_require__(138);

const PerMessageDeflate = __webpack_require__(57);
const EventTarget = __webpack_require__(358);
const Extensions = __webpack_require__(133);
const constants = __webpack_require__(89);
const Receiver = __webpack_require__(134);
const Sender = __webpack_require__(135);

const protocolVersions = [8, 13];
const closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.

/**
 * Class representing a WebSocket.
 *
 * @extends EventEmitter
 */
class WebSocket extends EventEmitter {
  /**
   * Create a new `WebSocket`.
   *
   * @param {String} address The URL to which to connect
   * @param {(String|String[])} protocols The subprotocols
   * @param {Object} options Connection options
   */
  constructor (address, protocols, options) {
    super();

    if (typeof protocols === 'object' && !Array.isArray(protocols)) {
      options = protocols;
      protocols = null;
    }

    if (typeof protocols === 'string') protocols = [protocols];
    if (!Array.isArray(protocols)) protocols = [];

    this.readyState = WebSocket.CONNECTING;
    this.bytesReceived = 0;
    this.extensions = {};
    this.protocol = '';

    this._binaryType = constants.BINARY_TYPES[0];
    this._finalize = this.finalize.bind(this);
    this._finalizeCalled = false;
    this._closeMessage = null;
    this._closeTimer = null;
    this._closeCode = null;
    this._receiver = null;
    this._sender = null;
    this._socket = null;
    this._ultron = null;

    if (Array.isArray(address)) {
      initAsServerClient.call(this, address[0], address[1], address[2], options);
    } else {
      initAsClient.call(this, address, protocols, options);
    }
  }

  get CONNECTING () { return WebSocket.CONNECTING; }
  get CLOSING () { return WebSocket.CLOSING; }
  get CLOSED () { return WebSocket.CLOSED; }
  get OPEN () { return WebSocket.OPEN; }

  /**
   * @type {Number}
   */
  get bufferedAmount () {
    var amount = 0;

    if (this._socket) {
      amount = this._socket.bufferSize + this._sender.bufferedBytes;
    }
    return amount;
  }

  /**
   * This deviates from the WHATWG interface since ws doesn't support the required
   * default "blob" type (instead we define a custom "nodebuffer" type).
   *
   * @type {String}
   */
  get binaryType () {
    return this._binaryType;
  }

  set binaryType (type) {
    if (constants.BINARY_TYPES.indexOf(type) < 0) return;

    this._binaryType = type;

    //
    // Allow to change `binaryType` on the fly.
    //
    if (this._receiver) this._receiver.binaryType = type;
  }

  /**
   * Set up the socket and the internal resources.
   *
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @private
   */
  setSocket (socket, head) {
    socket.setTimeout(0);
    socket.setNoDelay();

    this._receiver = new Receiver(this.extensions, this.maxPayload, this.binaryType);
    this._sender = new Sender(socket, this.extensions);
    this._ultron = new Ultron(socket);
    this._socket = socket;

    // socket cleanup handlers
    this._ultron.on('close', this._finalize);
    this._ultron.on('error', this._finalize);
    this._ultron.on('end', this._finalize);

    // ensure that the head is added to the receiver
    if (head && head.length > 0) {
      socket.unshift(head);
      head = null;
    }

    // subsequent packets are pushed to the receiver
    this._ultron.on('data', (data) => {
      this.bytesReceived += data.length;
      this._receiver.add(data);
    });

    // receiver event handlers
    this._receiver.onmessage = (data, flags) => this.emit('message', data, flags);
    this._receiver.onping = (data, flags) => {
      this.pong(data, !this._isServer, true);
      this.emit('ping', data, flags);
    };
    this._receiver.onpong = (data, flags) => this.emit('pong', data, flags);
    this._receiver.onclose = (code, reason) => {
      this._closeMessage = reason;
      this._closeCode = code;
      this.close(code, reason);
    };
    this._receiver.onerror = (error, code) => {
      // close the connection when the receiver reports a HyBi error code
      this.close(code, '');
      this.emit('error', error);
    };

    // sender event handlers
    this._sender.onerror = (error) => {
      this.close(1002, '');
      this.emit('error', error);
    };

    this.readyState = WebSocket.OPEN;
    this.emit('open');
  }

  /**
   * Clean up and release internal resources.
   *
   * @param {(Boolean|Error)} Indicates whether or not an error occurred
   * @private
   */
  finalize (error) {
    if (this._finalizeCalled) return;

    this.readyState = WebSocket.CLOSING;
    this._finalizeCalled = true;

    clearTimeout(this._closeTimer);
    this._closeTimer = null;

    //
    // If the connection was closed abnormally (with an error), or if the close
    // control frame was malformed or not received then the close code must be
    // 1006.
    //
    if (error) this._closeCode = 1006;

    if (this._socket) {
      this._ultron.destroy();
      this._socket.on('error', function onerror () {
        this.destroy();
      });

      if (!error) this._socket.end();
      else this._socket.destroy();

      this._socket = null;
      this._ultron = null;
    }

    if (this._sender) {
      this._sender = this._sender.onerror = null;
    }

    if (this._receiver) {
      this._receiver.cleanup(() => this.emitClose());
      this._receiver = null;
    } else {
      this.emitClose();
    }
  }

  /**
   * Emit the `close` event.
   *
   * @private
   */
  emitClose () {
    this.readyState = WebSocket.CLOSED;
    this.emit('close', this._closeCode || 1006, this._closeMessage || '');

    if (this.extensions[PerMessageDeflate.extensionName]) {
      this.extensions[PerMessageDeflate.extensionName].cleanup();
    }

    this.extensions = null;

    this.removeAllListeners();
    this.on('error', constants.NOOP); // Catch all errors after this.
  }

  /**
   * Pause the socket stream.
   *
   * @public
   */
  pause () {
    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');

    this._socket.pause();
  }

  /**
   * Resume the socket stream
   *
   * @public
   */
  resume () {
    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');

    this._socket.resume();
  }

  /**
   * Start a closing handshake.
   *
   * @param {Number} code Status code explaining why the connection is closing
   * @param {String} data A string explaining why the connection is closing
   * @public
   */
  close (code, data) {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      if (this._req && !this._req.aborted) {
        this._req.abort();
        this.emit('error', new Error('closed before the connection is established'));
        this.finalize(true);
      }
      return;
    }

    if (this.readyState === WebSocket.CLOSING) {
      if (this._closeCode && this._socket) this._socket.end();
      return;
    }

    this.readyState = WebSocket.CLOSING;
    this._sender.close(code, data, !this._isServer, (err) => {
      if (err) this.emit('error', err);

      if (this._socket) {
        if (this._closeCode) this._socket.end();
        //
        // Ensure that the connection is cleaned up even when the closing
        // handshake fails.
        //
        clearTimeout(this._closeTimer);
        this._closeTimer = setTimeout(this._finalize, closeTimeout, true);
      }
    });
  }

  /**
   * Send a ping message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Indicates whether or not to mask `data`
   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`
   * @public
   */
  ping (data, mask, failSilently) {
    if (this.readyState !== WebSocket.OPEN) {
      if (failSilently) return;
      throw new Error('not opened');
    }

    if (typeof data === 'number') data = data.toString();
    if (mask === undefined) mask = !this._isServer;
    this._sender.ping(data || constants.EMPTY_BUFFER, mask);
  }

  /**
   * Send a pong message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Indicates whether or not to mask `data`
   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`
   * @public
   */
  pong (data, mask, failSilently) {
    if (this.readyState !== WebSocket.OPEN) {
      if (failSilently) return;
      throw new Error('not opened');
    }

    if (typeof data === 'number') data = data.toString();
    if (mask === undefined) mask = !this._isServer;
    this._sender.pong(data || constants.EMPTY_BUFFER, mask);
  }

  /**
   * Send a data message.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} options.compress Specifies whether or not to compress `data`
   * @param {Boolean} options.binary Specifies whether `data` is binary or text
   * @param {Boolean} options.fin Specifies whether the fragment is the last one
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback which is executed when data is written out
   * @public
   */
  send (data, options, cb) {
    if (typeof options === 'function') {
      cb = options;
      options = {};
    }

    if (this.readyState !== WebSocket.OPEN) {
      if (cb) cb(new Error('not opened'));
      else throw new Error('not opened');
      return;
    }

    if (typeof data === 'number') data = data.toString();

    const opts = Object.assign({
      binary: typeof data !== 'string',
      mask: !this._isServer,
      compress: true,
      fin: true
    }, options);

    if (!this.extensions[PerMessageDeflate.extensionName]) {
      opts.compress = false;
    }

    this._sender.send(data || constants.EMPTY_BUFFER, opts, cb);
  }

  /**
   * Forcibly close the connection.
   *
   * @public
   */
  terminate () {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      if (this._req && !this._req.aborted) {
        this._req.abort();
        this.emit('error', new Error('closed before the connection is established'));
        this.finalize(true);
      }
      return;
    }

    this.finalize(true);
  }
}

WebSocket.CONNECTING = 0;
WebSocket.OPEN = 1;
WebSocket.CLOSING = 2;
WebSocket.CLOSED = 3;

//
// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
//
['open', 'error', 'close', 'message'].forEach((method) => {
  Object.defineProperty(WebSocket.prototype, `on${method}`, {
    /**
     * Return the listener of the event.
     *
     * @return {(Function|undefined)} The event listener or `undefined`
     * @public
     */
    get () {
      const listeners = this.listeners(method);
      for (var i = 0; i < listeners.length; i++) {
        if (listeners[i]._listener) return listeners[i]._listener;
      }
    },
    /**
     * Add a listener for the event.
     *
     * @param {Function} listener The listener to add
     * @public
     */
    set (listener) {
      const listeners = this.listeners(method);
      for (var i = 0; i < listeners.length; i++) {
        //
        // Remove only the listeners added via `addEventListener`.
        //
        if (listeners[i]._listener) this.removeListener(method, listeners[i]);
      }
      this.addEventListener(method, listener);
    }
  });
});

WebSocket.prototype.addEventListener = EventTarget.addEventListener;
WebSocket.prototype.removeEventListener = EventTarget.removeEventListener;

module.exports = WebSocket;

/**
 * Initialize a WebSocket server client.
 *
 * @param {http.IncomingMessage} req The request object
 * @param {net.Socket} socket The network socket between the server and client
 * @param {Buffer} head The first packet of the upgraded stream
 * @param {Object} options WebSocket attributes
 * @param {Number} options.protocolVersion The WebSocket protocol version
 * @param {Object} options.extensions The negotiated extensions
 * @param {Number} options.maxPayload The maximum allowed message size
 * @param {String} options.protocol The chosen subprotocol
 * @private
 */
function initAsServerClient (req, socket, head, options) {
  this.protocolVersion = options.protocolVersion;
  this.extensions = options.extensions;
  this.maxPayload = options.maxPayload;
  this.protocol = options.protocol;

  this.upgradeReq = req;
  this._isServer = true;

  this.setSocket(socket, head);
}

/**
 * Initialize a WebSocket client.
 *
 * @param {String} address The URL to which to connect
 * @param {String[]} protocols The list of subprotocols
 * @param {Object} options Connection options
 * @param {String} options.protocol Value of the `Sec-WebSocket-Protocol` header
 * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate
 * @param {String} options.localAddress Local interface to bind for network connections
 * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header
 * @param {Object} options.headers An object containing request headers
 * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header
 * @param {http.Agent} options.agent Use the specified Agent
 * @param {String} options.host Value of the `Host` header
 * @param {Number} options.family IP address family to use during hostname lookup (4 or 6).
 * @param {Function} options.checkServerIdentity A function to validate the server hostname
 * @param {Boolean} options.rejectUnauthorized Verify or not the server certificate
 * @param {String} options.passphrase The passphrase for the private key or pfx
 * @param {String} options.ciphers The ciphers to use or exclude
 * @param {(String|String[]|Buffer|Buffer[])} options.cert The certificate key
 * @param {(String|String[]|Buffer|Buffer[])} options.key The private key
 * @param {(String|Buffer)} options.pfx The private key, certificate, and CA certs
 * @param {(String|String[]|Buffer|Buffer[])} options.ca Trusted certificates
 * @private
 */
function initAsClient (address, protocols, options) {
  options = Object.assign({
    protocolVersion: protocolVersions[1],
    protocol: protocols.join(','),
    perMessageDeflate: true,
    localAddress: null,
    headers: null,
    family: null,
    origin: null,
    agent: null,
    host: null,

    //
    // SSL options.
    //
    checkServerIdentity: null,
    rejectUnauthorized: null,
    passphrase: null,
    ciphers: null,
    cert: null,
    key: null,
    pfx: null,
    ca: null
  }, options);

  if (protocolVersions.indexOf(options.protocolVersion) === -1) {
    throw new Error(
      `unsupported protocol version: ${options.protocolVersion} ` +
      `(supported versions: ${protocolVersions.join(', ')})`
    );
  }

  this.protocolVersion = options.protocolVersion;
  this._isServer = false;
  this.url = address;

  const serverUrl = url.parse(address);
  const isUnixSocket = serverUrl.protocol === 'ws+unix:';

  if (!serverUrl.host && (!isUnixSocket || !serverUrl.path)) {
    throw new Error('invalid url');
  }

  const isSecure = serverUrl.protocol === 'wss:' || serverUrl.protocol === 'https:';
  const key = crypto.randomBytes(16).toString('base64');
  const httpObj = isSecure ? https : http;

  //
  // Prepare extensions.
  //
  const extensionsOffer = {};
  var perMessageDeflate;

  if (options.perMessageDeflate) {
    perMessageDeflate = new PerMessageDeflate(
      options.perMessageDeflate !== true ? options.perMessageDeflate : {},
      false
    );
    extensionsOffer[PerMessageDeflate.extensionName] = perMessageDeflate.offer();
  }

  const requestOptions = {
    port: serverUrl.port || (isSecure ? 443 : 80),
    host: serverUrl.hostname,
    path: '/',
    headers: {
      'Sec-WebSocket-Version': options.protocolVersion,
      'Sec-WebSocket-Key': key,
      'Connection': 'Upgrade',
      'Upgrade': 'websocket'
    }
  };

  if (options.headers) Object.assign(requestOptions.headers, options.headers);
  if (Object.keys(extensionsOffer).length) {
    requestOptions.headers['Sec-WebSocket-Extensions'] = Extensions.format(extensionsOffer);
  }
  if (options.protocol) {
    requestOptions.headers['Sec-WebSocket-Protocol'] = options.protocol;
  }
  if (options.origin) {
    if (options.protocolVersion < 13) {
      requestOptions.headers['Sec-WebSocket-Origin'] = options.origin;
    } else {
      requestOptions.headers.Origin = options.origin;
    }
  }
  if (options.host) requestOptions.headers.Host = options.host;
  if (serverUrl.auth) requestOptions.auth = serverUrl.auth;

  if (options.localAddress) requestOptions.localAddress = options.localAddress;
  if (options.family) requestOptions.family = options.family;

  if (isUnixSocket) {
    const parts = serverUrl.path.split(':');

    requestOptions.socketPath = parts[0];
    requestOptions.path = parts[1];
  } else if (serverUrl.path) {
    //
    // Make sure that path starts with `/`.
    //
    if (serverUrl.path.charAt(0) !== '/') {
      requestOptions.path = `/${serverUrl.path}`;
    } else {
      requestOptions.path = serverUrl.path;
    }
  }

  var agent = options.agent;

  //
  // A custom agent is required for these options.
  //
  if (
    options.rejectUnauthorized != null ||
    options.checkServerIdentity ||
    options.passphrase ||
    options.ciphers ||
    options.cert ||
    options.key ||
    options.pfx ||
    options.ca
  ) {
    if (options.passphrase) requestOptions.passphrase = options.passphrase;
    if (options.ciphers) requestOptions.ciphers = options.ciphers;
    if (options.cert) requestOptions.cert = options.cert;
    if (options.key) requestOptions.key = options.key;
    if (options.pfx) requestOptions.pfx = options.pfx;
    if (options.ca) requestOptions.ca = options.ca;
    if (options.checkServerIdentity) {
      requestOptions.checkServerIdentity = options.checkServerIdentity;
    }
    if (options.rejectUnauthorized != null) {
      requestOptions.rejectUnauthorized = options.rejectUnauthorized;
    }

    if (!agent) agent = new httpObj.Agent(requestOptions);
  }

  if (agent) requestOptions.agent = agent;

  this._req = httpObj.get(requestOptions);

  this._req.on('error', (error) => {
    if (this._req.aborted) return;

    this._req = null;
    this.emit('error', error);
    this.finalize(true);
  });

  this._req.on('response', (res) => {
    if (!this.emit('unexpected-response', this._req, res)) {
      this._req.abort();
      this.emit('error', new Error(`unexpected server response (${res.statusCode})`));
      this.finalize(true);
    }
  });

  this._req.on('upgrade', (res, socket, head) => {
    this._req = null;

    const digest = crypto.createHash('sha1')
      .update(key + constants.GUID, 'binary')
      .digest('base64');

    if (res.headers['sec-websocket-accept'] !== digest) {
      socket.destroy();
      this.emit('error', new Error('invalid server key'));
      return this.finalize(true);
    }

    const serverProt = res.headers['sec-websocket-protocol'];
    const protList = (options.protocol || '').split(/, */);
    var protError;

    if (!options.protocol && serverProt) {
      protError = 'server sent a subprotocol even though none requested';
    } else if (options.protocol && !serverProt) {
      protError = 'server sent no subprotocol even though requested';
    } else if (serverProt && protList.indexOf(serverProt) === -1) {
      protError = 'server responded with an invalid protocol';
    }

    if (protError) {
      socket.destroy();
      this.emit('error', new Error(protError));
      return this.finalize(true);
    }

    if (serverProt) this.protocol = serverProt;

    const serverExtensions = Extensions.parse(res.headers['sec-websocket-extensions']);

    if (perMessageDeflate && serverExtensions[PerMessageDeflate.extensionName]) {
      try {
        perMessageDeflate.accept(serverExtensions[PerMessageDeflate.extensionName]);
      } catch (err) {
        socket.destroy();
        this.emit('error', new Error('invalid extension parameter'));
        return this.finalize(true);
      }

      this.extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
    }

    this.setSocket(socket, head);
  });
}


/***/ }),
/* 137 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 138 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _jsInterpreter = __webpack_require__(356);

var _jsInterpreter2 = _interopRequireDefault(_jsInterpreter);

var _observer = __webpack_require__(22);

var _Interface = __webpack_require__(234);

var _Interface2 = _interopRequireDefault(_Interface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Interpreter = function () {
  function Interpreter($scope) {
    var _this = this;

    _classCallCheck(this, Interpreter);

    if (!$scope) {
      // valid usage for js only code
      return;
    }
    this.$scope = $scope;
    this.bot = new _Interface2.default($scope);
    this.stopped = false;
    $scope.observer.register('REVERT', function (watchName) {
      return _this.revert(watchName);
    });
  }

  Interpreter.prototype.run = function run(code) {
    var _this2 = this;

    var initFunc = void 0;

    if (this.bot) {
      var BotIf = this.bot.getInterface('Bot');

      var ticksIf = this.bot.getTicksInterface();

      var _bot$getInterface = this.bot.getInterface(),
          watch = _bot$getInterface.watch,
          alert = _bot$getInterface.alert,
          sleep = _bot$getInterface.sleep;

      initFunc = function initFunc(interpreter, scope) {
        interpreter.setProperty(scope, 'console', interpreter.nativeToPseudo({
          log: function log() {
            var _console;

            (_console = console).log.apply(_console, arguments);
          }
        }));
        interpreter.setProperty(scope, 'alert', interpreter.nativeToPseudo(alert));

        var pseudoBotIf = interpreter.nativeToPseudo(BotIf);

        Object.entries(ticksIf).forEach(function (_ref) {
          var name = _ref[0],
              f = _ref[1];
          return interpreter.setProperty(pseudoBotIf, name, _this2.createAsync(interpreter, f));
        });

        interpreter.setProperty(pseudoBotIf, 'purchase', _this2.createAsync(interpreter, BotIf.purchase));

        interpreter.setProperty(pseudoBotIf, 'sellAtMarket', _this2.createAsync(interpreter, BotIf.sellAtMarket));

        interpreter.setProperty(scope, 'Bot', pseudoBotIf);

        interpreter.setProperty(scope, 'watch', _this2.createAsync(interpreter, function (watchName) {
          var snapshot = _this2.interpreter.takeStateSnapshot();
          if (watchName === 'before') {
            _this2.beforeState = snapshot;
          } else {
            _this2.duringState = snapshot;
          }

          return watch(watchName);
        }));
        interpreter.setProperty(scope, 'sleep', _this2.createAsync(interpreter, sleep));
      };
    }

    return new Promise(function (resolve, reject) {
      _observer.observer.register('Error', function (e) {
        return reject(e);
      });

      try {
        _this2.interpreter = new _jsInterpreter2.default(code, initFunc);
      } catch (e) {
        _observer.observer.emit('Error', e);
      }

      _this2.onFinish = resolve;
      _this2.loop();
    });
  };

  Interpreter.prototype.loop = function loop() {
    if (this.stopped || !this.interpreter.run()) {
      this.onFinish(this.interpreter.pseudoToNative(this.interpreter.value));
    }
  };

  Interpreter.prototype.revert = function revert(watchName) {
    this.interpreter.restoreStateSnapshot(watchName === 'before' ? this.beforeState : this.duringState);
    this.interpreter.paused_ = false;
    this.loop();
  };

  Interpreter.prototype.stop = function stop() {
    this.$scope.api.disconnect();
    _observer.observer.emit('bot.stop');
    this.stopped = true;
  };

  Interpreter.prototype.createAsync = function createAsync(interpreter, func) {
    var _this3 = this;

    return interpreter.createAsyncFunction(function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var callback = args.pop();

      func.apply(undefined, args.map(function (arg) {
        return interpreter.pseudoToNative(arg);
      })).then(function (rv) {
        callback(interpreter.nativeToPseudo(rv));
        _this3.loop();
      }).catch(function (e) {
        return _observer.observer.emit('Error', e);
      });
    });
  };

  return Interpreter;
}();

exports.default = Interpreter;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _immutable = __webpack_require__(56);

var _binaryUtils = __webpack_require__(47);

var _observer = __webpack_require__(22);

var _tools = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var parseTick = function parseTick(tick) {
  return {
    epoch: +tick.epoch,
    quote: +tick.quote
  };
};

var parseOhlc = function parseOhlc(ohlc) {
  return {
    open: +ohlc.open,
    high: +ohlc.high,
    low: +ohlc.low,
    close: +ohlc.close,
    epoch: +(ohlc.open_time || ohlc.epoch)
  };
};

var parseCandles = function parseCandles(candles) {
  return candles.map(function (t) {
    return parseOhlc(t);
  });
};

var updateTicks = function updateTicks(ticks, newTick) {
  return [].concat(ticks.slice(1), [newTick]);
};

var updateCandles = function updateCandles(candles, ohlc) {
  var prevCandles = (0, _binaryUtils.getLast)(candles).epoch === ohlc.epoch ? candles.slice(0, -1) : candles.slice(1);
  return [].concat(prevCandles, [ohlc]);
};

var getType = function getType(isCandle) {
  return isCandle ? 'candles' : 'ticks';
};

var getUUID = function getUUID() {
  return '' + new Date().getTime() * Math.random();
};

var TicksService = function () {
  function TicksService(api) {
    _classCallCheck(this, TicksService);

    this.api = api;
    this.ticks = new _immutable.Map();
    this.candles = new _immutable.Map();
    this.tickListeners = new _immutable.Map();
    this.ohlcListeners = new _immutable.Map();
    this.subscriptions = new _immutable.Map();
    this.observe();
  }

  TicksService.prototype.request = function request(options) {
    var symbol = options.symbol,
        granularity = options.granularity;


    var style = getType(granularity);

    if (style === 'ticks' && this.ticks.has(symbol)) {
      return Promise.resolve(this.ticks.get(symbol));
    }

    if (style === 'candles' && this.candles.hasIn(['symbol', 'granularity'])) {
      return Promise.resolve(this.candles.getIn(['symbol', 'granularity']));
    }

    return this.requestStream(Object.assign({}, options, { style: style }));
  };

  TicksService.prototype.monitor = function monitor(options) {
    var symbol = options.symbol,
        granularity = options.granularity,
        callback = options.callback;


    var type = getType(granularity);

    var key = getUUID();

    this.request(Object.assign({}, options, { subscribe: 1 })).catch(function (e) {
      return _observer.observer.emit('Error', e);
    });

    if (type === 'ticks') {
      this.tickListeners = this.tickListeners.setIn([symbol, key], callback);
    } else {
      this.ohlcListeners = this.ohlcListeners.setIn([symbol, granularity, key], callback);
    }

    return key;
  };

  TicksService.prototype.stopMonitor = function stopMonitor(options) {
    var symbol = options.symbol,
        granularity = options.granularity,
        key = options.key;

    var type = getType(granularity);

    if (type === 'ticks' && this.tickListeners.hasIn([symbol, key])) {
      this.tickListeners = this.tickListeners.deleteIn([symbol, key]);
    }

    if (type === 'candles' && this.ohlcListeners.hasIn([symbol, granularity, key])) {
      this.ohlcListeners = this.ohlcListeners.deleteIn([symbol, granularity, key]);
    }

    this.unsubscribeIfEmptyListeners(options);
  };

  TicksService.prototype.unsubscribeIfEmptyListeners = function unsubscribeIfEmptyListeners(options) {
    var symbol = options.symbol,
        granularity = options.granularity;


    var needToUnsubscribe = false;

    var tickListener = this.tickListeners.get(symbol);

    if (tickListener && !tickListener.size) {
      this.tickListeners = this.tickListeners.delete(symbol);
      this.ticks = this.ticks.delete(symbol);
      needToUnsubscribe = true;
    }

    var ohlcListener = this.ohlcListeners.getIn([symbol, granularity]);

    if (ohlcListener && !ohlcListener.size) {
      this.ohlcListeners = this.ohlcListeners.deleteIn([symbol, granularity]);
      this.candles = this.candles.deleteIn([symbol, granularity]);
      needToUnsubscribe = true;
    }

    if (needToUnsubscribe) {
      this.unsubscribeAllAndSubscribeListeners(symbol);
    }
  };

  TicksService.prototype.unsubscribeAllAndSubscribeListeners = function unsubscribeAllAndSubscribeListeners(symbol) {
    var _this = this;

    var ohlcSubscriptions = this.subscriptions.getIn(['ohlc', symbol]);
    var tickSubscription = this.subscriptions.getIn(['tick', symbol]);

    var subscription = (ohlcSubscriptions ? Array.from(ohlcSubscriptions.keys()) : []).concat(tickSubscription);

    Promise.all(subscription.map(function (id) {
      return (0, _tools.doUntilDone)(function () {
        return _this.api.unsubscribeByID(id);
      });
    })).then(function () {
      var ohlcListeners = _this.ohlcListeners.get(symbol);

      if (ohlcListeners) {
        ohlcListeners.forEach(function (listener, granularity) {
          _this.candles = _this.candles.deleteIn([symbol, granularity]);
          _this.requestStream({ symbol: symbol, subscribe: 1, granularity: granularity, style: 'candles' }).catch(function (e) {
            return _observer.observer.emit('Error', e);
          });
        });
      }

      if (_this.tickListeners.has(symbol)) {
        _this.ticks = _this.ticks.delete(symbol);
        _this.requestStream({ symbol: symbol, subscribe: 1, style: 'ticks' }).catch(function (e) {
          return _observer.observer.emit('Error', e);
        });
      }
    });

    this.subscriptions = new _immutable.Map();
  };

  TicksService.prototype.observe = function observe() {
    var _this2 = this;

    this.api.events.on('tick', function (r) {
      var tick = r.tick,
          _r$tick = r.tick,
          symbol = _r$tick.symbol,
          id = _r$tick.id;


      if (_this2.ticks.has(symbol)) {
        _this2.subscriptions = _this2.subscriptions.setIn(['tick', symbol], id);

        _this2.ticks = _this2.ticks.set(symbol, updateTicks(_this2.ticks.get(symbol), parseTick(tick)));

        var listeners = _this2.tickListeners.get(symbol);

        if (listeners) {
          listeners.forEach(function (callback) {
            return callback(_this2.ticks.get(symbol));
          });
        }
      }
    });

    this.api.events.on('ohlc', function (r) {
      var ohlc = r.ohlc,
          _r$ohlc = r.ohlc,
          symbol = _r$ohlc.symbol,
          granularity = _r$ohlc.granularity,
          id = _r$ohlc.id;


      if (_this2.candles.hasIn([symbol, granularity])) {
        _this2.subscriptions = _this2.subscriptions.setIn(['ohlc', symbol, granularity], id);

        _this2.candles = _this2.candles.setIn([symbol, granularity], updateCandles(_this2.candles.getIn([symbol, granularity]), parseOhlc(ohlc)));

        var listeners = _this2.ohlcListeners.getIn([symbol, granularity]);

        if (listeners) {
          listeners.forEach(function (callback) {
            return callback(_this2.candles.getIn([symbol, granularity]));
          });
        }
      }
    });
  };

  TicksService.prototype.requestStream = function requestStream(options) {
    var _this3 = this;

    var symbol = options.symbol,
        subscribe = options.subscribe,
        granularity = options.granularity,
        style = options.style;

    return new Promise(function (resolve, reject) {
      (0, _tools.doUntilDone)(function () {
        return _this3.api.getTickHistory(symbol, { subscribe: subscribe, end: 'latest', count: 1000, granularity: granularity, style: style });
      }).then(function (r) {
        if (style === 'ticks') {
          var ticks = (0, _binaryUtils.historyToTicks)(r.history);

          if (subscribe) {
            _this3.ticks = _this3.ticks.set(symbol, ticks);
          }

          resolve(ticks);
        } else {
          var candles = parseCandles(r.candles);

          if (subscribe) {
            _this3.candles = _this3.candles.setIn([symbol, granularity], candles);
          }

          resolve(candles);
        }
      }).catch(reject);
    });
  };

  TicksService.prototype.getHistory = function getHistory(options) {
    return this.request(options);
  };

  TicksService.prototype.getLast = function getLast(options) {
    var _this4 = this;

    return new Promise(function (resolve, reject) {
      _this4.request(options).then(function (t) {
        return resolve((0, _binaryUtils.getLast)(t));
      }, reject);
    });
  };

  return TicksService;
}();

exports.default = TicksService;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["binary-live-api"] = factory();
	else
		root["binary-live-api"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 135);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dateAsLocalISOString = __webpack_require__(8);

var _dateAsLocalISOString2 = _interopRequireDefault(_dateAsLocalISOString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (date) {
    return (0, _dateAsLocalISOString2.default)(date).slice(0, 10);
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (x) {
    var secsAway = x * 60 * 60 * 24;
    return Math.floor(Date.now() / 1000) + secsAway;
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (epoch) {
    return new Date(epoch * 1000);
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (duration, unit) {
    switch (unit) {
        case 't':
        case 's':
            return duration;
        case 'm':
            return 60 * duration;
        case 'h':
            return 3600 * duration;
        case 'd':
            return 86400 * duration;
        default:
            throw new Error('Duration unit not valid: ' + unit + ', only allow [\'t\', \'s\', \'m\', \'h\', \'d\']');
    }
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr, key) {
    var result = {};
    arr.forEach(function (ele) {
        var kv = ele[key];
        if (!result[kv]) {
            result[kv] = [];
        }
        result[kv].push(ele);
    });
    return result;
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = [{ value: 'CALL', text: 'Rise', img: 'img/trade-call.svg', ticks: true, barrier: false }, { value: 'PUT', text: 'Fall', img: 'img/trade-put.svg', ticks: true, barrier: false }, { value: 'HIGHER', text: 'Higher', img: 'img/trade-higher.svg', ticks: false, barrier: false }, { value: 'LOWER', text: 'Lower', img: 'img/trade-lower.svg', ticks: false, barrier: false }, { value: 'DIGITMATCH', text: 'Digit Match', img: 'img/trade-digitmatch.svg', ticks: true, barrier: true }, { value: 'DIGITDIFF', text: 'Digit Differs', img: 'img/trade-digitdiff.svg', tick: true, barrier: true }, { value: 'DIGITOVER', text: 'Digit Over', img: 'img/trade-digitover.svg', tick: true, barrier: true }, { value: 'DIGITUNDER', text: 'Digit Under', img: 'img/trade-digitunder.svg', tick: true, barrier: true }, { value: 'DIGITEVEN', text: 'Digit Even', img: 'img/trade-digiteven.svg', tick: true, barrier: false }, { value: 'DIGITODD', text: 'Digit Odd', img: 'img/trade-digitodd.svg', tick: true, barrier: false }, { value: 'ASIANU', text: 'Asian Up', img: 'img/trade-asianu.svg', ticks: true, barrier: false }, { value: 'ASIAND', text: 'Asian Down', img: 'img/trade-asiand.svg', ticks: true, barrier: false }, { value: 'EXPIRYRANGE', text: 'Ends Between', img: 'img/trade-expiryrange.svg', ticks: false, barrier: false }, { value: 'EXPIRYMISS', text: 'Ends Outside', img: 'img/trade-expirymiss.svg', ticks: false, barrier: false }, { value: 'RANGE', text: 'Stays Between', img: 'img/trade-range.svg', ticks: false, barrier: false }, { value: 'UPORDOWN', text: 'Goes Outside', img: 'img/trade-upordown.svg', ticks: false, barrier: false }, { value: 'ONETOUCH', text: 'Touches', img: 'img/trade-onetouch.svg', ticks: false, barrier: false }, { value: 'NOTOUCH', text: 'Does Not Touch', img: 'img/trade-notouch.svg', ticks: false, barrier: false }, { value: 'SPREADU', text: 'Spread Long', img: 'img/trade-spreadu.svg', ticks: false, barrier: false }, { value: 'SPREADD', text: 'Spread Short', img: 'img/trade-spreadu.svg', ticks: false, barrier: false }];

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (barrier, entrySpot, lastTickQuote) {
    return +barrier + (+entrySpot || lastTickQuote);
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (contract, lastTickQuote) {
    var barrierEntryName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'barrier';

    var barrierValue = +contract[barrierEntryName];
    if (!barrierValue) {
        return lastTickQuote;
    }
    if (contract.barrierType !== 'relative') {
        return barrierValue;
    }
    if (typeof contract.entry_spot === 'undefined' && typeof lastTickQuote === 'undefined') {
        throw new Error('Relative barrier can not be calculated');
    }
    return barrierValue + (+contract.entry_spot || lastTickQuote);
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (date) {
    return new Date(date - date.getTimezoneOffset() * 60 * 1000).toISOString();
};

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    return Math.floor(Date.now() / 1000);
};

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (a, b) {
    var aH = +a.slice(0, 2);
    var aM = +a.slice(3, 5);
    var aS = +a.slice(6);

    var bH = +b.slice(0, 2);
    var bM = +b.slice(3, 5);
    var bS = +b.slice(6);

    if (aH !== bH) {
        return aH > bH;
    } else if (aM !== bM) {
        return aM > bM;
    }
    return aS > bS;
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _xDayEpoch = __webpack_require__(1);

var _xDayEpoch2 = _interopRequireDefault(_xDayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  return (0, _xDayEpoch2.default)(-1);
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _durationSecHelper = __webpack_require__(21);

var _durationSecHelper2 = _interopRequireDefault(_durationSecHelper);

var _extractMinMaxInUnits = __webpack_require__(23);

var _extractMinMaxInUnits2 = _interopRequireDefault(_extractMinMaxInUnits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contracts, type) {
    if (type.indexOf('SPREAD') > -1) {
        return [];
    }

    var tickContracts = contracts.filter(function (c) {
        return c.min_contract_duration.slice(-1) === 't';
    });
    var tickDuration = tickContracts.length > 0 ? { min: 5, max: 10, unit: 't' } : undefined;

    var nonTickContracts = contracts.filter(function (c) {
        return c.min_contract_duration.slice(-1) !== 't';
    });
    if (nonTickContracts.length === 0) {
        return tickDuration ? [tickDuration] : [];
    }
    var nonTickMinSec = nonTickContracts.map(function (c) {
        return (0, _durationSecHelper2.default)(c.min_contract_duration);
    }).filter(function (d) {
        return !!d;
    }).reduce(function (a, b) {
        return Math.min(a, b);
    });

    var nonTickMaxSec = nonTickContracts.map(function (c) {
        return (0, _durationSecHelper2.default)(c.max_contract_duration);
    }).filter(function (d) {
        return !!d;
    }).reduce(function (a, b) {
        return Math.max(a, b);
    });

    var nonTicksDuration = (0, _extractMinMaxInUnits2.default)(nonTickMinSec, nonTickMaxSec);
    if (tickDuration) {
        nonTicksDuration.unshift(tickDuration);
    }

    return nonTicksDuration;
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr1, arr2) {
    var eq = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (a, b) {
        return a === b;
    };

    var len1 = arr1.length;
    var len2 = arr2.length;
    var lengthDiff = Math.abs(len1 - len2);

    switch (lengthDiff) {
        case 0:
            if (len1 === 0) return false;
            if (len1 === 1) return !eq(arr1[0], arr2[0]);

            return eq(arr1[arr1.length - 1], arr2[arr2.length - 2]) || eq(arr1[arr1.length - 2], arr2[arr2.length - 1]);

        case 1:
            if (len1 === 0 || len2 === 0) return true;

            return eq(arr1[arr1.length - 1], arr2[arr2.length - 2]) || eq(arr1[arr1.length - 2], arr2[arr2.length - 1]);

        default:
            return false;
    }
};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LiveEvents = function () {
    function LiveEvents() {
        _classCallCheck(this, LiveEvents);

        this.messageHandlers = {};
    }

    LiveEvents.prototype.emitSingle = function emitSingle(msgType, msgData) {
        var handlers = this.messageHandlers[msgType] || [];
        handlers.forEach(function (handler) {
            handler(msgData);
        });
    };

    LiveEvents.prototype.emitWildcard = function emitWildcard(msgData) {
        var handlers = this.messageHandlers['*'] || [];
        handlers.forEach(function (handler) {
            handler(msgData);
        });
    };

    LiveEvents.prototype.emit = function emit(msgType, msgData) {
        this.emitSingle(msgType, msgData);
        this.emitWildcard(msgData);
    };

    LiveEvents.prototype.on = function on(msgType, callback) {
        if (!this.messageHandlers[msgType]) {
            this.messageHandlers[msgType] = [callback];
        } else {
            this.messageHandlers[msgType].push(callback);
        }
    };

    LiveEvents.prototype.ignoreAll = function ignoreAll(msgType) {
        delete this.messageHandlers[msgType];
    };

    return LiveEvents;
}();

exports.default = LiveEvents;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.helpers = exports.autoAdjustGetData = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getDataForSymbol = getDataForSymbol;
exports.getDataForContract = getDataForContract;

var _binaryUtils = __webpack_require__(25);

var responseSizeLimit = 700;

var granularities = [60, 120, 180, 300, 600, 900, 1800, 3600, 7200, 14400, 28800, 86400];

var ohlcDataToTicks = function ohlcDataToTicks(candles) {
    return candles.map(function (data) {
        return { quote: +data.open, epoch: +data.epoch };
    });
};

var autoAdjustGetData = exports.autoAdjustGetData = function autoAdjustGetData(api, symbol, start, end) {
    var style = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'ticks';
    var subscribe = arguments[5];
    var extra = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};

    var secs = end - start;
    var ticksCount = secs / 2;
    if (ticksCount >= responseSizeLimit || style === 'candles') {
        var idealGranularity = secs / responseSizeLimit;
        var finalGranularity = 60;
        granularities.forEach(function (g, i) {
            if (idealGranularity > g && idealGranularity <= granularities[i + 1]) {
                finalGranularity = granularities[i + 1];
            }
        });
        finalGranularity = Math.min(86400, finalGranularity);

        return api.getTickHistory(symbol, {
            start: start,
            end: end,
            adjust_start_time: 1,
            count: responseSizeLimit,
            style: 'candles',
            granularity: finalGranularity,
            subscribe: subscribe ? 1 : undefined
        }).then(function (r) {
            if (style === 'ticks') {
                return _extends({}, extra, {
                    ticks: ohlcDataToTicks(r.candles),
                    symbol: symbol
                });
            }
            return _extends({}, extra, {
                candles: r.candles,
                symbol: symbol
            });
        });
    }
    return api.getTickHistory(symbol, {
        start: start,
        end: end,
        adjust_start_time: 1,
        count: responseSizeLimit,
        style: 'ticks',
        subscribe: subscribe ? 1 : undefined
    }).then(function (r) {
        var ticks = r.history.times.map(function (t, idx) {
            var quote = r.history.prices[idx];
            return { epoch: +t, quote: +quote };
        });
        return _extends({}, extra, {
            ticks: ticks,
            symbol: symbol
        });
    });
};

function getDataForSymbol(api, symbol) {
    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 600;
    var style = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'ticks';
    var subscribe = arguments[4];

    var end = (0, _binaryUtils.nowAsEpoch)();
    var start = end - duration;
    return autoAdjustGetData(api, symbol, start, end, style, subscribe);
}

/**
 * get data of contract
 * @param api                      - will be injected by library
 * @param getContract              - function that accept nothing and return a Promise containing contract
 * @param durationCount            - number of duration
 * @param durationType             - type of duration, check http://api.highcharts.com/highstock#rangeSelector.buttons
 * @param style                    - one of ['ticks', 'candles'], this will affect the return data shape,
 *                                   internally library might not always use this param when requesting, eg. when data is too large,
 *                                   library will use `candles` instead of `ticks`, this is handle by library so user do not need to worry
 * @param granularity              - default to 60, check https://developers.binary.com/api/#ticks_history
 * @returns {*|Promise.<TResult>}
 */
function getDataForContract(api, getContract, duration) {
    var style = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'ticks';
    var subscribe = arguments[4];

    var getAllData = function getAllData() {
        return getContract().then(function (contract) {
            var symbol = contract.underlying;

            var _computeStartEndForCo = (0, _binaryUtils.computeStartEndForContract)(contract),
                start = _computeStartEndForCo.start,
                end = _computeStartEndForCo.end;

            return autoAdjustGetData(api, symbol, start, end, style, subscribe, { isSold: !!contract.sell_time });
        });
    };

    if (!duration) {
        return getAllData();
    }

    return getContract().then(function (contract) {
        var symbol = contract.underlying;
        var startTime = +contract.date_start;

        // handle Contract not started yet
        if (startTime > (0, _binaryUtils.nowAsEpoch)()) {
            return autoAdjustGetData(api, symbol, (0, _binaryUtils.nowAsEpoch)() - 600, (0, _binaryUtils.nowAsEpoch)(), style, subscribe, { isSold: !!contract.sell_time });
        }

        var sellT = contract.sell_time;
        var end = sellT || (0, _binaryUtils.nowAsEpoch)();

        var buffer = (end - startTime) * 0.05;

        var start = Math.min(startTime - buffer, end - duration);
        return autoAdjustGetData(api, symbol, Math.round(start), Math.round(end), style, subscribe, { isSold: !!contract.sell_time });
    });
}

var helpers = exports.helpers = {
    autoAdjustGetData: autoAdjustGetData
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr) {
    return arr.reduce(function (obj, x) {
        Object.keys(x).forEach(function (key) {
            if (Array.isArray(obj[key])) {
                obj[key].push(x[key]);
            } else {
                obj[key] = [x[key]];
            }
        });
        return obj;
    }, {});
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _commonRelativeBarrier = __webpack_require__(6);

var _commonRelativeBarrier2 = _interopRequireDefault(_commonRelativeBarrier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract, lastTickQuote) {
    return (0, _commonRelativeBarrier2.default)(contract.barrier, contract.entry_spot, lastTickQuote);
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dateAsLocalISOString = __webpack_require__(8);

var _dateAsLocalISOString2 = _interopRequireDefault(_dateAsLocalISOString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (date) {
    return (0, _dateAsLocalISOString2.default)(date).slice(11, 19);
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (sec) {
    var minute = Math.floor(sec / 60);
    var hour = Math.floor(minute / 60);
    var day = Math.floor(hour / 24);

    return [sec, minute, hour, day];
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _timeStringBigger = __webpack_require__(10);

var _timeStringBigger2 = _interopRequireDefault(_timeStringBigger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (a, b) {
    if (a === b) {
        return false;
    }
    return !(0, _timeStringBigger2.default)(a, b);
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _durationToSecs = __webpack_require__(3);

var _durationToSecs2 = _interopRequireDefault(_durationToSecs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (duration) {
    var d = +duration.slice(0, -1);
    var u = duration.slice(-1);
    return (0, _durationToSecs2.default)(d, u);
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ['t', 's', 'm', 'h', 'd'];

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _durationUnits = __webpack_require__(22);

var _durationUnits2 = _interopRequireDefault(_durationUnits);

var _splitSecsToUnits = __webpack_require__(19);

var _splitSecsToUnits2 = _interopRequireDefault(_splitSecsToUnits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// block is a structure that describes min and max of specific time unit
var blockIsValid = function blockIsValid(minArg, maxArg, unit) {
    if (maxArg <= 1) {
        return false;
    }
    switch (unit) {
        case 's':
            return minArg < 60;
        case 'm':
            return minArg < 60;
        case 'h':
            return minArg < 24;
        case 'd':
        default:
            return true;
    }
};

exports.default = function (minInSecs, maxInSecs) {
    var minInUnits = (0, _splitSecsToUnits2.default)(minInSecs);
    var maxInUnits = (0, _splitSecsToUnits2.default)(maxInSecs);

    var durations = [];
    for (var i = 0; i < minInUnits.length; i++) {
        var unit = _durationUnits2.default[i + 1];
        var minI = minInUnits[i];
        var maxI = maxInUnits[i];
        if (blockIsValid(minI, maxI, unit)) {
            durations.push({
                unit: unit,
                min: minI > 0 ? minI : 1,
                max: maxI });
        }
    }
    return durations;
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (duration) {
    return !!duration && duration.slice(-1) === 't';
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _arrayEqual = __webpack_require__(42);

Object.defineProperty(exports, 'arrayEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_arrayEqual).default;
  }
});

var _arrayMax = __webpack_require__(43);

Object.defineProperty(exports, 'arrayMax', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_arrayMax).default;
  }
});

var _arrayMin = __webpack_require__(44);

Object.defineProperty(exports, 'arrayMin', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_arrayMin).default;
  }
});

var _arrayToObject = __webpack_require__(16);

Object.defineProperty(exports, 'arrayToObject', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_arrayToObject).default;
  }
});

var _getLast = __webpack_require__(45);

Object.defineProperty(exports, 'getLast', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getLast).default;
  }
});

var _mergeSortedArrays = __webpack_require__(47);

Object.defineProperty(exports, 'mergeSortedArrays', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_mergeSortedArrays).default;
  }
});

var _sequence = __webpack_require__(48);

Object.defineProperty(exports, 'sequence', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_sequence).default;
  }
});

var _groupArrayToNestedArray = __webpack_require__(46);

Object.defineProperty(exports, 'groupArrayToNestedArray', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_groupArrayToNestedArray).default;
  }
});

var _barrier2FromContract = __webpack_require__(49);

Object.defineProperty(exports, 'barrier2FromContract', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_barrier2FromContract).default;
  }
});

var _barrierFromContract = __webpack_require__(50);

Object.defineProperty(exports, 'barrierFromContract', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_barrierFromContract).default;
  }
});

var _callPutBarrier = __webpack_require__(51);

Object.defineProperty(exports, 'callPutBarrier', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_callPutBarrier).default;
  }
});

var _commonRelativeBarrier = __webpack_require__(6);

Object.defineProperty(exports, 'commonRelativeBarrier', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_commonRelativeBarrier).default;
  }
});

var _extractBarrier = __webpack_require__(52);

Object.defineProperty(exports, 'extractBarrier', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractBarrier).default;
  }
});

var _getAbsoluteBarrierFromContract = __webpack_require__(7);

Object.defineProperty(exports, 'getAbsoluteBarrierFromContract', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getAbsoluteBarrierFromContract).default;
  }
});

var _relativeBarrier = __webpack_require__(17);

Object.defineProperty(exports, 'relativeBarrier', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_relativeBarrier).default;
  }
});

var _relativeBarrier2 = __webpack_require__(53);

Object.defineProperty(exports, 'relativeBarrier2', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_relativeBarrier2).default;
  }
});

var _dateAsLocalISOString = __webpack_require__(8);

Object.defineProperty(exports, 'dateAsLocalISOString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateAsLocalISOString).default;
  }
});

var _dateToDateString = __webpack_require__(0);

Object.defineProperty(exports, 'dateToDateString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateToDateString).default;
  }
});

var _dateToEpoch = __webpack_require__(54);

Object.defineProperty(exports, 'dateToEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateToEpoch).default;
  }
});

var _dateToGMTString = __webpack_require__(55);

Object.defineProperty(exports, 'dateToGMTString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateToGMTString).default;
  }
});

var _dateToTimeString = __webpack_require__(18);

Object.defineProperty(exports, 'dateToTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateToTimeString).default;
  }
});

var _dateToUTCTimeString = __webpack_require__(56);

Object.defineProperty(exports, 'dateToUTCTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_dateToUTCTimeString).default;
  }
});

var _epochToDate = __webpack_require__(2);

Object.defineProperty(exports, 'epochToDate', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToDate).default;
  }
});

var _epochToDateString = __webpack_require__(57);

Object.defineProperty(exports, 'epochToDateString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToDateString).default;
  }
});

var _epochToDateTimeString = __webpack_require__(58);

Object.defineProperty(exports, 'epochToDateTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToDateTimeString).default;
  }
});

var _epochToTimeString = __webpack_require__(59);

Object.defineProperty(exports, 'epochToTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToTimeString).default;
  }
});

var _epochToUTCDateString = __webpack_require__(60);

Object.defineProperty(exports, 'epochToUTCDateString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToUTCDateString).default;
  }
});

var _epochToUTCTimeString = __webpack_require__(61);

Object.defineProperty(exports, 'epochToUTCTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_epochToUTCTimeString).default;
  }
});

var _getLastXMonthEpoch = __webpack_require__(62);

Object.defineProperty(exports, 'getLastXMonthEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getLastXMonthEpoch).default;
  }
});

var _isDateValid = __webpack_require__(63);

Object.defineProperty(exports, 'isDateValid', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isDateValid).default;
  }
});

var _last30DaysEpoch = __webpack_require__(65);

Object.defineProperty(exports, 'last30DaysEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_last30DaysEpoch).default;
  }
});

var _last7DaysEpoch = __webpack_require__(66);

Object.defineProperty(exports, 'last7DaysEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_last7DaysEpoch).default;
  }
});

var _nextXDay = __webpack_require__(67);

Object.defineProperty(exports, 'nextXDay', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_nextXDay).default;
  }
});

var _nowAsEpoch = __webpack_require__(9);

Object.defineProperty(exports, 'nowAsEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_nowAsEpoch).default;
  }
});

var _oneYearAfterStr = __webpack_require__(68);

Object.defineProperty(exports, 'oneYearAfterStr', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_oneYearAfterStr).default;
  }
});

var _secondsToTimeString = __webpack_require__(71);

Object.defineProperty(exports, 'secondsToTimeString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_secondsToTimeString).default;
  }
});

var _splitSecsToUnits = __webpack_require__(19);

Object.defineProperty(exports, 'splitSecsToUnits', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_splitSecsToUnits).default;
  }
});

var _timeStringBigger = __webpack_require__(10);

Object.defineProperty(exports, 'timeStringBigger', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_timeStringBigger).default;
  }
});

var _timeStringIsBetween = __webpack_require__(73);

Object.defineProperty(exports, 'timeStringIsBetween', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_timeStringIsBetween).default;
  }
});

var _timeStringSmaller = __webpack_require__(20);

Object.defineProperty(exports, 'timeStringSmaller', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_timeStringSmaller).default;
  }
});

var _timeStringToSeconds = __webpack_require__(74);

Object.defineProperty(exports, 'timeStringToSeconds', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_timeStringToSeconds).default;
  }
});

var _todayEpoch = __webpack_require__(75);

Object.defineProperty(exports, 'todayEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_todayEpoch).default;
  }
});

var _todayLocaleString = __webpack_require__(76);

Object.defineProperty(exports, 'todayLocaleString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_todayLocaleString).default;
  }
});

var _todayUTCString = __webpack_require__(77);

Object.defineProperty(exports, 'todayUTCString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_todayUTCString).default;
  }
});

var _xDayEpoch = __webpack_require__(1);

Object.defineProperty(exports, 'xDayEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_xDayEpoch).default;
  }
});

var _xMonthsAfter = __webpack_require__(78);

Object.defineProperty(exports, 'xMonthsAfter', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_xMonthsAfter).default;
  }
});

var _yesterdayEpoch = __webpack_require__(11);

Object.defineProperty(exports, 'yesterdayEpoch', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_yesterdayEpoch).default;
  }
});

var _yesterdayString = __webpack_require__(79);

Object.defineProperty(exports, 'yesterdayString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_yesterdayString).default;
  }
});

var _yesterdayUTCString = __webpack_require__(80);

Object.defineProperty(exports, 'yesterdayUTCString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_yesterdayUTCString).default;
  }
});

var _returnValidDate = __webpack_require__(69);

Object.defineProperty(exports, 'returnValidDate', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_returnValidDate).default;
  }
});

var _returnValidTime = __webpack_require__(70);

Object.defineProperty(exports, 'returnValidTime', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_returnValidTime).default;
  }
});

var _isValidTime = __webpack_require__(64);

Object.defineProperty(exports, 'isValidTime', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isValidTime).default;
  }
});

var _timeLeftToNextRealityCheck = __webpack_require__(72);

Object.defineProperty(exports, 'timeLeftToNextRealityCheck', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_timeLeftToNextRealityCheck).default;
  }
});

var _durationSecHelper = __webpack_require__(21);

Object.defineProperty(exports, 'durationSecHelper', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_durationSecHelper).default;
  }
});

var _durationText = __webpack_require__(88);

Object.defineProperty(exports, 'durationText', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_durationText).default;
  }
});

var _durationToSecs = __webpack_require__(3);

Object.defineProperty(exports, 'durationToSecs', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_durationToSecs).default;
  }
});

var _durationUnits = __webpack_require__(22);

Object.defineProperty(exports, 'durationUnits', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_durationUnits).default;
  }
});

var _extractDuration = __webpack_require__(89);

Object.defineProperty(exports, 'extractDuration', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractDuration).default;
  }
});

var _extractDurationHelper = __webpack_require__(12);

Object.defineProperty(exports, 'extractDurationHelper', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractDurationHelper).default;
  }
});

var _extractForwardStartingDuration = __webpack_require__(90);

Object.defineProperty(exports, 'extractForwardStartingDuration', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractForwardStartingDuration).default;
  }
});

var _extractMinMaxInUnits = __webpack_require__(23);

Object.defineProperty(exports, 'extractMinMaxInUnits', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractMinMaxInUnits).default;
  }
});

var _isDurationLessThan2Mins = __webpack_require__(91);

Object.defineProperty(exports, 'isDurationLessThan2Mins', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isDurationLessThan2Mins).default;
  }
});

var _isDurationTick = __webpack_require__(24);

Object.defineProperty(exports, 'isDurationTick', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isDurationTick).default;
  }
});

var _isDurationWithinRange = __webpack_require__(92);

Object.defineProperty(exports, 'isDurationWithinRange', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isDurationWithinRange).default;
  }
});

var _calculateLastDigitStats = __webpack_require__(101);

Object.defineProperty(exports, 'calculateLastDigitStats', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_calculateLastDigitStats).default;
  }
});

var _digitsToPips = __webpack_require__(102);

Object.defineProperty(exports, 'digitsToPips', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_digitsToPips).default;
  }
});

var _getLastDigit = __webpack_require__(26);

Object.defineProperty(exports, 'getLastDigit', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getLastDigit).default;
  }
});

var _noOfDecimals = __webpack_require__(103);

Object.defineProperty(exports, 'noOfDecimals', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_noOfDecimals).default;
  }
});

var _numberToSignedString = __webpack_require__(104);

Object.defineProperty(exports, 'numberToSignedString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_numberToSignedString).default;
  }
});

var _pipSizeToStepSize = __webpack_require__(105);

Object.defineProperty(exports, 'pipSizeToStepSize', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_pipSizeToStepSize).default;
  }
});

var _pipsToDigits = __webpack_require__(106);

Object.defineProperty(exports, 'pipsToDigits', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_pipsToDigits).default;
  }
});

var _toMoney = __webpack_require__(107);

Object.defineProperty(exports, 'toMoney', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_toMoney).default;
  }
});

var _filterDeep = __webpack_require__(108);

Object.defineProperty(exports, 'filterDeep', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_filterDeep).default;
  }
});

var _findDeep = __webpack_require__(109);

Object.defineProperty(exports, 'findDeep', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_findDeep).default;
  }
});

var _groupByKey = __webpack_require__(4);

Object.defineProperty(exports, 'groupByKey', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_groupByKey).default;
  }
});

var _immutableChildrenToJS = __webpack_require__(110);

Object.defineProperty(exports, 'immutableChildrenToJS', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_immutableChildrenToJS).default;
  }
});

var _areArraysEqual = __webpack_require__(111);

Object.defineProperty(exports, 'areArraysEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_areArraysEqual).default;
  }
});

var _areCandleArrayEqual = __webpack_require__(112);

Object.defineProperty(exports, 'areCandleArrayEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_areCandleArrayEqual).default;
  }
});

var _areTickArraysEqual = __webpack_require__(113);

Object.defineProperty(exports, 'areTickArraysEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_areTickArraysEqual).default;
  }
});

var _doArrayDifferJustOneEntry = __webpack_require__(13);

Object.defineProperty(exports, 'doArrayDifferJustOneEntry', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_doArrayDifferJustOneEntry).default;
  }
});

var _doCandleEqual = __webpack_require__(27);

Object.defineProperty(exports, 'doCandleEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_doCandleEqual).default;
  }
});

var _doCandlesDifferJustOneEntry = __webpack_require__(114);

Object.defineProperty(exports, 'doCandlesDifferJustOneEntry', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_doCandlesDifferJustOneEntry).default;
  }
});

var _doTicksDifferJustOneEntry = __webpack_require__(115);

Object.defineProperty(exports, 'doTicksDifferJustOneEntry', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_doTicksDifferJustOneEntry).default;
  }
});

var _doTicksEqual = __webpack_require__(28);

Object.defineProperty(exports, 'doTicksEqual', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_doTicksEqual).default;
  }
});

var _getLastOHLCTick = __webpack_require__(116);

Object.defineProperty(exports, 'getLastOHLCTick', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getLastOHLCTick).default;
  }
});

var _getLastTickQuote = __webpack_require__(117);

Object.defineProperty(exports, 'getLastTickQuote', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getLastTickQuote).default;
  }
});

var _historyToTicks = __webpack_require__(118);

Object.defineProperty(exports, 'historyToTicks', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_historyToTicks).default;
  }
});

var _ohlcToData = __webpack_require__(119);

Object.defineProperty(exports, 'ohlcToData', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ohlcToData).default;
  }
});

var _ohlcToTicks = __webpack_require__(120);

Object.defineProperty(exports, 'ohlcToTicks', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ohlcToTicks).default;
  }
});

var _tickToData = __webpack_require__(121);

Object.defineProperty(exports, 'tickToData', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tickToData).default;
  }
});

var _askPriceFromProposal = __webpack_require__(122);

Object.defineProperty(exports, 'askPriceFromProposal', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_askPriceFromProposal).default;
  }
});

var _computeStartEndForContract = __webpack_require__(123);

Object.defineProperty(exports, 'computeStartEndForContract', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_computeStartEndForContract).default;
  }
});

var _contractCategoryToText = __webpack_require__(124);

Object.defineProperty(exports, 'contractCategoryToText', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_contractCategoryToText).default;
  }
});

var _contractCodeToText = __webpack_require__(125);

Object.defineProperty(exports, 'contractCodeToText', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_contractCodeToText).default;
  }
});

var _extractSpreadInfo = __webpack_require__(126);

Object.defineProperty(exports, 'extractSpreadInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_extractSpreadInfo).default;
  }
});

var _isIntraday = __webpack_require__(127);

Object.defineProperty(exports, 'isIntraday', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isIntraday).default;
  }
});

var _normalizedContractFor = __webpack_require__(128);

Object.defineProperty(exports, 'normalizedContractFor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_normalizedContractFor).default;
  }
});

var _tradeToFriendlyType = __webpack_require__(129);

Object.defineProperty(exports, 'tradeToFriendlyType', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tradeToFriendlyType).default;
  }
});

var _tradeTypeCodeToText = __webpack_require__(29);

Object.defineProperty(exports, 'tradeTypeCodeToText', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tradeTypeCodeToText).default;
  }
});

var _tradeTypeTextToCode = __webpack_require__(130);

Object.defineProperty(exports, 'tradeTypeTextToCode', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tradeTypeTextToCode).default;
  }
});

var _tradeTypes = __webpack_require__(5);

Object.defineProperty(exports, 'tradeTypes', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_tradeTypes).default;
  }
});

var _typeHasBarrier = __webpack_require__(30);

Object.defineProperty(exports, 'typeHasBarrier', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_typeHasBarrier).default;
  }
});

var _Analytics = __webpack_require__(93);

Object.defineProperty(exports, 'Analytics', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Analytics).default;
  }
});

var _brandColor = __webpack_require__(94);

Object.defineProperty(exports, 'brandColor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_brandColor).default;
  }
});

var _directionClassName = __webpack_require__(95);

Object.defineProperty(exports, 'directionClassName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_directionClassName).default;
  }
});

var _errorToString = __webpack_require__(96);

Object.defineProperty(exports, 'errorToString', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_errorToString).default;
  }
});

var _getUniqueId = __webpack_require__(97);

Object.defineProperty(exports, 'getUniqueId', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getUniqueId).default;
  }
});

var _isMobile = __webpack_require__(98);

Object.defineProperty(exports, 'isMobile', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isMobile).default;
  }
});

var _isValidEmail = __webpack_require__(99);

Object.defineProperty(exports, 'isValidEmail', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isValidEmail).default;
  }
});

var _isValidPassword = __webpack_require__(100);

Object.defineProperty(exports, 'isValidPassword', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_isValidPassword).default;
  }
});

var _addFullscreenEventListener = __webpack_require__(81);

Object.defineProperty(exports, 'addFullscreenEventListener', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_addFullscreenEventListener).default;
  }
});

var _exitFullscreen = __webpack_require__(82);

Object.defineProperty(exports, 'exitFullscreen', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_exitFullscreen).default;
  }
});

var _removeFullscreenEventListener = __webpack_require__(83);

Object.defineProperty(exports, 'removeFullscreenEventListener', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_removeFullscreenEventListener).default;
  }
});

var _requestFullscreen = __webpack_require__(84);

Object.defineProperty(exports, 'requestFullscreen', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_requestFullscreen).default;
  }
});

var _showInfo = __webpack_require__(86);

Object.defineProperty(exports, 'showInfo', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_showInfo).default;
  }
});

var _showError = __webpack_require__(85);

Object.defineProperty(exports, 'showError', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_showError).default;
  }
});

var _windowResizeEvent = __webpack_require__(87);

Object.defineProperty(exports, 'windowResizeEvent', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_windowResizeEvent).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (value, pips) {
    return +value.toFixed(pips).slice(-1);
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (ohlc1, ohlc2) {
    return !ohlc1 && ohlc1 === ohlc2 || !!ohlc1 && !!ohlc2 && ohlc1.epoch === ohlc2.epoch && ohlc1.close === ohlc2.close;
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (tick1, tick2) {
    return !tick1 && tick1 === tick2 || !!tick1 && !!tick2 && tick1.epoch === tick2.epoch && tick1.quote === tick2.quote;
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tradeTypes = __webpack_require__(5);

var _tradeTypes2 = _interopRequireDefault(_tradeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (code) {
    var tradeType = _tradeTypes2.default.find(function (x) {
        return x.value === code;
    });
    return tradeType ? tradeType.text : 'Unknown';
};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tradeTypes = __webpack_require__(5);

var _tradeTypes2 = _interopRequireDefault(_tradeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (type) {
    var typeDetails = _tradeTypes2.default.find(function (x) {
        return x.value === type;
    });
    return !!(typeDetails && typeDetails.barrier);
};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.OAuth = exports.helpers = exports.LiveApi = exports.LiveEvents = undefined;

var _LiveEvents = __webpack_require__(14);

Object.defineProperty(exports, 'LiveEvents', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LiveEvents).default;
  }
});

var _LiveApi = __webpack_require__(33);

Object.defineProperty(exports, 'LiveApi', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_LiveApi).default;
  }
});

var _custom = __webpack_require__(15);

Object.defineProperty(exports, 'helpers', {
  enumerable: true,
  get: function get() {
    return _custom.helpers;
  }
});

var _OAuth2 = __webpack_require__(34);

var _OAuth = _interopRequireWildcard(_OAuth2);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.OAuth = _OAuth;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var getInitialState = function getInitialState() {
    return {
        token: undefined,
        balance: false,
        contracts: new Set(),
        allContract: false,
        transactions: false,
        ticks: new Set(),
        ticksHistory: new Map(),
        candlesHistory: new Map(),
        proposals: new Set(),
        streamIdMapping: new Map()
    };
};

var ApiState = function ApiState() {
    var _this = this;

    _classCallCheck(this, ApiState);

    this.resetState = function () {
        _this.state = getInitialState();
    };

    this.getState = function () {
        return _this.state;
    };

    this.authorize = function (token) {
        _this.state.token = token;
    };

    this.subscribeToBalance = function () {
        _this.state.balance = true;
    };

    this.unsubscribeFromBalance = function () {
        _this.state.balance = false;
    };

    this.subscribeToOpenContract = function (contractId, streamId) {
        if (streamId) {
            _this.state.contracts.add(contractId);
            _this.state.streamIdMapping.set(streamId, contractId);
        }
    };

    this.unsubscribeFromAllOpenContracts = function () {
        _this.state.contracts.clear();
        _this.state.allContract = false;
    };

    this.subscribeToAllOpenContracts = function () {
        _this.state.allContract = true;
    };

    this.subscribeToTransactions = function () {
        _this.state.transactions = true;
    };

    this.unsubscribeFromTransactions = function () {
        _this.state.transactions = false;
    };

    this.subscribeToTick = function (symbol) {
        _this.state.ticks.add(symbol);
    };

    this.subscribeToTicks = function (symbols) {
        symbols.forEach(_this.subscribeToTick);
    };

    this.unsubscribeFromAllTicks = function () {
        _this.state.ticks.clear();
        _this.state.ticksHistory.clear();
    };

    this.unsubscribeFromAllCandles = function () {
        _this.state.candlesHistory.clear();
    };

    this.getTickHistory = function (symbol, params) {
        if (params && params.subscribe === 1) {
            if (params.style === 'candles') {
                _this.state.candlesHistory.set(symbol, params);
            } else {
                _this.state.ticksHistory.set(symbol, params);
            }
        }
    };

    this.subscribeToPriceForContractProposal = function (options, streamId) {
        if (streamId) {
            _this.state.proposals.add(options);
            _this.state.streamIdMapping.set(streamId, options);
        }
    };

    this.unsubscribeFromAllProposals = function () {
        _this.state.proposals.clear();
    };

    this.unsubscribeByID = function (id) {
        _this.state.streamIdMapping.forEach(function (payload, streamId) {
            if (streamId === id) {
                _this.state.contracts.delete(payload);
                _this.state.proposals.delete(payload);
            }
        });
        _this.state.streamIdMapping.delete(id);
    };

    this.state = getInitialState();
}

// special care needed to forget subscription, as backends rely on
// and id instead of more natural keys like symbol and payload
;

exports.default = ApiState;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _rxLite = __webpack_require__(132);

var _binaryUtils = __webpack_require__(25);

var _LiveEvents = __webpack_require__(14);

var _LiveEvents2 = _interopRequireDefault(_LiveEvents);

var _ServerError = __webpack_require__(35);

var _ServerError2 = _interopRequireDefault(_ServerError);

var _calls = __webpack_require__(37);

var calls = _interopRequireWildcard(_calls);

var _ApiState = __webpack_require__(32);

var _ApiState2 = _interopRequireDefault(_ApiState);

var _custom = __webpack_require__(15);

var customCalls = _interopRequireWildcard(_custom);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(0, _binaryUtils.getUniqueId)(); // skip 0 value
var defaultApiUrl = 'wss://ws.binaryws.com/websockets/v3';
var nullFunc = function nullFunc() {};
var MockWebSocket = nullFunc;
var WebSocket = typeof window !== 'undefined' ? window.WebSocket : MockWebSocket;

var shouldIgnoreError = function shouldIgnoreError(error) {
    return error.code === 'AlreadySubscribed';
};

var LiveApi = function () {
    function LiveApi(initParams) {
        var _this = this;

        _classCallCheck(this, LiveApi);

        this.onOpen = function () {
            _this.resubscribe();
            _this.executeBufferedExecutes();
        };

        this.disconnect = function () {
            _this.token = '';
            _this.socket.onclose = nullFunc;
            try {
                _this.socket.close();
            } catch (e) {
                // ignore the error
            }
        };

        this.resubscribe = function () {
            var _apiState$getState = _this.apiState.getState(),
                token = _apiState$getState.token;

            var _resubscriptions = _this.resubscriptions,
                authorized = _resubscriptions.authorized,
                unauthorized = _resubscriptions.unauthorized;


            _this.authStream.take(1).subscribe(function () {
                Object.keys(authorized).forEach(function (msgType) {
                    return authorized[msgType]();
                });
            });

            Object.keys(unauthorized).forEach(function (msgType) {
                return unauthorized[msgType]();
            });

            if (token) {
                _this.authorize(token);
            } else {
                // this need to be called last as it mayb mutate
                // ticksHistory, candlesHistory and proposals
                _this.sendBufferedSends();
            }
        };

        this.getInState = function (name) {
            return _this.apiState.getState()[name];
        };

        this.resubscriptions = {
            authorized: {
                balance: function balance() {
                    if (_this.getInState('balance')) {
                        _this.subscribeToBalance();
                        return true;
                    }
                    return false;
                },
                transaction: function transaction() {
                    if (_this.getInState('transactions')) {
                        _this.subscribeToTransactions();
                        return true;
                    }
                    return false;
                },
                proposal_open_contract: function proposal_open_contract() {
                    if (_this.getInState('allContract')) {
                        _this.subscribeToAllOpenContracts();
                        return true;
                    }
                    _this.getInState('contracts').forEach(function (id) {
                        return _this.subscribeToOpenContract(id);
                    });
                    return Boolean(_this.getInState('contracts').length);
                }
            },
            unauthorized: {
                tick: function tick() {
                    if (_this.getInState('ticks').size !== 0) {
                        _this.subscribeToTicks([].concat(_this.getInState('ticks')));
                        return true;
                    }

                    _this.getInState('ticksHistory').forEach(function (param, symbol) {
                        return _this.getTickHistory(symbol, param);
                    });
                    return Boolean(_this.getInState('ticksHistory').length);
                },
                ohlc: function ohlc() {
                    _this.getInState('candlesHistory').forEach(function (param, symbol) {
                        return _this.getTickHistory(symbol, param);
                    });
                    return Boolean(_this.getInState('candlesHistory').length);
                },
                proposal: function proposal() {
                    _this.getInState('proposals').forEach(function (proposal) {
                        return _this.subscribeToPriceForContractProposal(proposal);
                    });
                    return Boolean(_this.getInState('proposals').length);
                }
            }
        };

        this.shouldResubscribeOnError = function (json) {
            var msgType = json.msg_type,
                error = json.error;


            if (error.code !== 'CallError' && error.code !== 'WrongResponse') {
                return false;
            }

            var _resubscriptions2 = _this.resubscriptions,
                authorized = _resubscriptions2.authorized,
                unauthorized = _resubscriptions2.unauthorized;


            var resubscribe = function resubscribe(stream) {
                var type = Object.keys(stream).find(function (t) {
                    return t === msgType;
                });

                if (type) {
                    return stream[type]();
                }

                return false;
            };

            return resubscribe(authorized) || resubscribe(unauthorized);
        };

        this.changeLanguage = function (ln) {
            if (ln === _this.language) {
                return;
            }
            _this.socket.onclose = nullFunc;
            try {
                _this.socket.close();
            } catch (e) {
                // ignore the error
            }
            _this.language = ln;
            _this.connect();
        };

        this.isReady = function () {
            return !!_this.socket && _this.socket.readyState === 1;
        };

        this.sendBufferedSends = function () {
            if (_this.isReady()) {
                // TODO: test fail without this check, find out why!!??
                while (_this.bufferedSends.length > 0) {
                    _this.bufferedSends.shift()();
                }
            }
        };

        this.executeBufferedExecutes = function () {
            while (_this.bufferedExecutes.length > 0) {
                _this.bufferedExecutes.shift()();
            }
        };

        this.resolvePromiseForResponse = function (json) {
            if (typeof json.req_id === 'undefined') {
                return Promise.resolve();
            }

            var reqId = json.req_id.toString();
            var promise = _this.unresolvedPromises[reqId];

            if (!promise) {
                return Promise.resolve();
            }

            delete _this.unresolvedPromises[reqId];
            if (!json.error) {
                return promise.resolve(json);
            }

            if (_this.shouldResubscribeOnError(json)) {
                return Promise.resolve();
            }

            if (!shouldIgnoreError(json.error)) {
                return promise.reject(new _ServerError2.default(json));
            }

            return Promise.resolve();
        };

        this.publishToObservables = function (json) {
            if (typeof json.req_id === 'undefined') {
                return;
            }

            var reqId = json.req_id.toString();

            var onetimeObs = _this.uncompleteOneTimeObs[reqId];

            var streamObs = _this.uncompleteStreamObs[reqId];

            if (!onetimeObs && !streamObs) {
                return;
            }

            if (!json.error) {
                if (onetimeObs) {
                    onetimeObs.onNext(json);
                    onetimeObs.onCompleted();
                } else {
                    streamObs.onNext(json);
                }
                return;
            }

            if (!shouldIgnoreError(json.error)) {
                if (onetimeObs) {
                    onetimeObs.onError(new _ServerError2.default(json));
                } else {
                    streamObs.onError(new _ServerError2.default(json));
                }
            }
        };

        this.onMessage = function (message) {
            var json = JSON.parse(message.data);

            if (json.msg_type === 'authorize' && _this.onAuth) {
                if (!json.error) {
                    _this.onAuth.next();
                }
            }

            if (!json.error) {
                _this.events.emit(json.msg_type, json);
            } else {
                _this.events.emit('error', json);
            }

            if (_this.useRx) {
                return _this.publishToObservables(json);
            }

            return _this.resolvePromiseForResponse(json);
        };

        this.generatePromiseOrObservable = function (json) {
            var reqId = json.req_id.toString();

            if (_this.useRx) {
                var obs = _rxLite.Observable.create(function (observer) {
                    // if call is an subscription, store it in uncompleteStreamObs
                    // ticks is a special case that's a stream without subscribe keyword
                    if (json.subscribe || json.ticks) {
                        _this.uncompleteStreamObs[reqId] = observer;
                    } else {
                        _this.uncompleteOneTimeObs[reqId] = observer;
                    }

                    return function () {
                        delete _this.uncompleteOneTimeObs[reqId];
                        delete _this.uncompleteStreamObs[reqId];
                    };
                });

                var published = obs.publish();

                return published; // use hot observables
            }

            return new Promise(function (resolve, reject) {
                _this.unresolvedPromises[reqId] = { resolve: resolve, reject: reject };
            });
        };

        this.sendAndUpdateState = function (callName) {
            for (var _len = arguments.length, param = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                param[_key - 1] = arguments[_key];
            }

            var reqId = (0, _binaryUtils.getUniqueId)();
            var actualPaylod = calls[callName].apply(calls, param);
            var json = _extends({
                req_id: reqId
            }, actualPaylod);

            var socketSend = function socketSend() {
                _this.sendSpy(JSON.stringify(json));
                _this.socket.send(JSON.stringify(json));
                if (_this.apiState[callName]) {
                    var _apiState;

                    (_apiState = _this.apiState)[callName].apply(_apiState, param);
                }
            };

            if (_this.isReady()) {
                socketSend();
            } else {
                _this.bufferedSends.push(socketSend);
            }

            if (typeof json.req_id !== 'undefined') {
                // Set the stream id into ApiState so that we can unsubscribe later
                // TODO: hackish and need redo, this depends on object identity to works!!!
                var setState = function setState(r) {
                    if (!_this.apiState[callName]) return r;

                    if (r.proposal_open_contract && r.proposal_open_contract.id) {
                        var _apiState2;

                        (_apiState2 = _this.apiState)[callName].apply(_apiState2, param.concat([r.proposal_open_contract.id]));
                    } else if (r.proposal && r.proposal.id) {
                        var _apiState3;

                        (_apiState3 = _this.apiState)[callName].apply(_apiState3, param.concat([r.proposal.id]));
                    }
                    return r;
                };

                if (_this.useRx) {
                    var connectableObs = _this.generatePromiseOrObservable(json);
                    connectableObs.take(1).forEach(setState);
                    return connectableObs;
                }

                return _this.generatePromiseOrObservable(json).then(setState);
            }

            return undefined;
        };

        this.execute = function (func) {
            if (_this.isReady()) {
                func();
            } else {
                _this.bufferedExecutes.push(func);
            }
        };

        this.send = function (json) {
            console.warn('This method is deprecated, use high-level methods'); // eslint-disable-line
            var reqId = (0, _binaryUtils.getUniqueId)();
            return _this.sendRaw(_extends({
                req_id: reqId
            }, json));
        };

        this.sendRaw = function (json) {
            console.warn('This method is deprecated, use high-level methods'); // eslint-disable-line
            var socketSend = function socketSend() {
                _this.sendSpy(JSON.stringify(json));
                _this.socket.send(JSON.stringify(json));
            };
            if (_this.isReady()) {
                socketSend();
            } else {
                _this.bufferedSends.push(socketSend);
            }

            if (typeof json.req_id !== 'undefined') {
                return _this.generatePromiseOrObservable(json);
            }

            return undefined;
        };

        var _ref = initParams || {},
            _ref$apiUrl = _ref.apiUrl,
            apiUrl = _ref$apiUrl === undefined ? defaultApiUrl : _ref$apiUrl,
            _ref$language = _ref.language,
            language = _ref$language === undefined ? 'en' : _ref$language,
            _ref$appId = _ref.appId,
            appId = _ref$appId === undefined ? 0 : _ref$appId,
            _ref$brand = _ref.brand,
            brand = _ref$brand === undefined ? '' : _ref$brand,
            _ref$sendSpy = _ref.sendSpy,
            sendSpy = _ref$sendSpy === undefined ? function () {} : _ref$sendSpy,
            websocket = _ref.websocket,
            connection = _ref.connection,
            keepAlive = _ref.keepAlive,
            _ref$useRx = _ref.useRx,
            useRx = _ref$useRx === undefined ? false : _ref$useRx;

        this.apiUrl = apiUrl;
        this.language = language;
        this.appId = appId;
        this.brand = brand;
        this.sendSpy = sendSpy;

        // experimental: use at your own risk
        this.useRx = useRx;

        if (keepAlive) {
            setInterval(function () {
                return _this.ping();
            }, 60 * 1000);
        }

        if (websocket) {
            WebSocket = websocket;
        }

        this.bufferedSends = [];
        this.bufferedExecutes = [];
        this.unresolvedPromises = {};

        this.events = new _LiveEvents2.default();
        this.apiState = new _ApiState2.default();

        if (useRx) {
            this.uncompleteOneTimeObs = {};
            this.uncompleteStreamObs = {};
        }

        this.authStream = _rxLite.Observable.create(function (observer) {
            _this.onAuth = observer;

            return function () {
                _this.onAuth = null;
            };
        });

        this.bindCallsAndStateMutators();

        this.connect(connection);
    }

    LiveApi.prototype.bindCallsAndStateMutators = function bindCallsAndStateMutators() {
        var _this2 = this;

        Object.keys(calls).forEach(function (callName) {
            _this2[callName] = function () {
                for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    params[_key2] = arguments[_key2];
                }

                return _this2.sendAndUpdateState.apply(_this2, [callName].concat(params));
            };
        });

        Object.keys(customCalls).forEach(function (callName) {
            _this2[callName] = function () {
                for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    params[_key3] = arguments[_key3];
                }

                return customCalls[callName].apply(customCalls, [_this2].concat(params));
            }; // seems to be a good place to do some simple cache
        });
    };

    LiveApi.prototype.connect = function connect(connection) {
        var _this3 = this;

        var optionalParam = this.brand ? '&brand=' + this.brand : '';
        var urlPlusParams = this.apiUrl + '?l=' + this.language + '&app_id=' + this.appId + optionalParam;

        Object.keys(this.unresolvedPromises).forEach(function (reqId) {
            var disconnectedError = new Error('Websocket disconnected before response received.');
            disconnectedError.name = 'DisconnectError';
            _this3.unresolvedPromises[reqId].reject(disconnectedError);
            delete _this3.unresolvedPromises[reqId];
        });

        try {
            this.socket = connection || new WebSocket(urlPlusParams);
        } catch (err) {
            // swallow connection error, we can't do anything about it
        } finally {
            this.socket.onopen = this.onOpen;
            this.socket.onclose = function () {
                return _this3.connect();
            };
            this.socket.onmessage = this.onMessage;
        }
    };

    // TODO: should we deprecate this? preserve for backward compatibility


    // TODO: should we deprecate this? preserve for backward compatibility


    return LiveApi;
}();

exports.default = LiveApi;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var oauthUrl = exports.oauthUrl = function oauthUrl(appId) {
    return 'https://www.binary.com/oauth2/authorize?app_id=' + appId;
};

var oauthUrlWithLanguage = exports.oauthUrlWithLanguage = function oauthUrlWithLanguage(appId, langCode) {
    return 'https://www.binary.com/oauth2/authorize?app_id=' + appId + '&l=' + langCode;
};

var parseOAuthResponse = exports.parseOAuthResponse = function parseOAuthResponse(responseUrl) {
    var matcher = /acct\d=(\w+)&token\d=([\w-]+)/g;
    var urlParts = responseUrl.split('/redirect?');
    if (urlParts.length !== 2) throw new Error('Not a valid url');

    var params = urlParts[1].split(matcher);

    var accounts = [];

    for (var i = 1; i < params.length; i += 3) {
        accounts.push({
            account: params[i],
            token: params[i + 1]
        });
    }

    return accounts;
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ServerError = function (_Error) {
    _inherits(ServerError, _Error);

    function ServerError(errorObj) {
        _classCallCheck(this, ServerError);

        var _this = _possibleConstructorReturn(this, _Error.call(this, errorObj));

        _this.stack = new Error().stack;
        _this.error = errorObj;
        _this.name = errorObj.error.code;

        var message = errorObj.error.message,
            echo_req = errorObj.echo_req;


        var echoStr = JSON.stringify(echo_req, null, 2);
        _this.message = "[ServerError] " + message + "\n" + echoStr;
        return _this;
    }

    return ServerError;
}(Error);

exports.default = ServerError;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var deleteApiToken = exports.deleteApiToken = function deleteApiToken(token) {
    return {
        api_token: 1,
        delete_token: token
    };
};

var getApiTokens = exports.getApiTokens = function getApiTokens() {
    return {
        api_token: 1
    };
};

var createApiToken = exports.createApiToken = function createApiToken(token, scopes) {
    return {
        api_token: 1,
        new_token: token,
        new_token_scopes: scopes
    };
};

var changePassword = exports.changePassword = function changePassword(oldPassword, newPassword) {
    return {
        change_password: 1,
        old_password: oldPassword,
        new_password: newPassword
    };
};

var registerApplication = exports.registerApplication = function registerApplication(options) {
    return _extends({
        app_register: 1
    }, options);
};

var getAllAppList = exports.getAllAppList = function getAllAppList() {
    return {
        app_list: 1
    };
};

var getAppslistById = exports.getAppslistById = function getAppslistById(appid) {
    return {
        app_get: appid
    };
};

var deleteApplication = exports.deleteApplication = function deleteApplication(appid) {
    return {
        app_delete: appid
    };
};

var createRealAccountMaltaInvest = exports.createRealAccountMaltaInvest = function createRealAccountMaltaInvest(options) {
    return _extends({
        new_account_maltainvest: 1
    }, options);
};

var createRealAccount = exports.createRealAccount = function createRealAccount(options) {
    return _extends({
        new_account_real: 1
    }, options);
};

var setAccountCurrency = exports.setAccountCurrency = function setAccountCurrency(currency) {
    return {
        set_account_currency: currency
    };
};

var setSelfExclusion = exports.setSelfExclusion = function setSelfExclusion(options) {
    return _extends({
        set_self_exclusion: 1
    }, options);
};

var setAccountSettings = exports.setAccountSettings = function setAccountSettings(options) {
    return _extends({
        set_settings: 1
    }, options);
};

var setTnCApproval = exports.setTnCApproval = function setTnCApproval() {
    return {
        tnc_approval: 1
    };
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _unauthenticated = __webpack_require__(41);

Object.keys(_unauthenticated).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _unauthenticated[key];
    }
  });
});

var _read = __webpack_require__(39);

Object.keys(_read).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _read[key];
    }
  });
});

var _trade = __webpack_require__(40);

Object.keys(_trade).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _trade[key];
    }
  });
});

var _payments = __webpack_require__(38);

Object.keys(_payments).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _payments[key];
    }
  });
});

var _admin = __webpack_require__(36);

Object.keys(_admin).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _admin[key];
    }
  });
});

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var getCashierLockStatus = exports.getCashierLockStatus = function getCashierLockStatus() {
    return {
        cashier_password: 1
    };
};

var setCashierLock = exports.setCashierLock = function setCashierLock(options) {
    return _extends({
        cashier_password: 1
    }, options);
};

var withdrawToPaymentAgent = exports.withdrawToPaymentAgent = function withdrawToPaymentAgent(options) {
    return _extends({
        paymentagent_withdraw: 1
    }, options);
};

var paymentAgentTransfer = exports.paymentAgentTransfer = function paymentAgentTransfer(options) {
    return _extends({
        paymentagent_transfer: 1
    }, options);
};

var transferBetweenAccounts = exports.transferBetweenAccounts = function transferBetweenAccounts(options) {
    return _extends({
        transfer_between_accounts: 1
    }, options);
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var getAccountLimits = exports.getAccountLimits = function getAccountLimits() {
    return {
        get_limits: 1
    };
};

var getAccountSettings = exports.getAccountSettings = function getAccountSettings() {
    return {
        get_settings: 1
    };
};

var getAccountStatus = exports.getAccountStatus = function getAccountStatus() {
    return {
        get_account_status: 1
    };
};

var getSelfExclusion = exports.getSelfExclusion = function getSelfExclusion() {
    return {
        get_self_exclusion: 1
    };
};

var logOut = exports.logOut = function logOut() {
    return {
        logout: 1
    };
};

var getStatement = exports.getStatement = function getStatement(options) {
    return _extends({
        statement: 1
    }, options);
};

var getPortfolio = exports.getPortfolio = function getPortfolio() {
    return {
        portfolio: 1
    };
};

var getProfitTable = exports.getProfitTable = function getProfitTable(options) {
    return _extends({
        profit_table: 1
    }, options);
};

var getRealityCheckSummary = exports.getRealityCheckSummary = function getRealityCheckSummary() {
    return {
        reality_check: 1
    };
};

var subscribeToBalance = exports.subscribeToBalance = function subscribeToBalance() {
    return {
        balance: 1,
        subscribe: 1
    };
};

var unsubscribeFromBalance = exports.unsubscribeFromBalance = function unsubscribeFromBalance() {
    return {
        forget_all: 'balance'
    };
};

var subscribeToOpenContract = exports.subscribeToOpenContract = function subscribeToOpenContract(contractId) {
    return {
        proposal_open_contract: 1,
        subscribe: 1,
        contract_id: contractId
    };
};

var getContractInfo = exports.getContractInfo = function getContractInfo(contractId) {
    return {
        proposal_open_contract: 1,
        contract_id: contractId
    };
};

var subscribeToAllOpenContracts = exports.subscribeToAllOpenContracts = function subscribeToAllOpenContracts() {
    return {
        proposal_open_contract: 1,
        subscribe: 1
    };
};

var unsubscribeFromAllOpenContracts = exports.unsubscribeFromAllOpenContracts = function unsubscribeFromAllOpenContracts() {
    return {
        forget_all: 'proposal_open_contract'
    };
};

var subscribeToTransactions = exports.subscribeToTransactions = function subscribeToTransactions() {
    return {
        transaction: 1,
        subscribe: 1
    };
};

var unsubscribeFromTransactions = exports.unsubscribeFromTransactions = function unsubscribeFromTransactions() {
    return {
        forget_all: 'transaction'
    };
};

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var buyContract = exports.buyContract = function buyContract(contractId, price) {
    return {
        buy: contractId,
        price: price
    };
};

var buyContractParams = exports.buyContractParams = function buyContractParams(params, price) {
    return {
        buy: 1,
        price: price,
        parameters: params
    };
};

var sellContract = exports.sellContract = function sellContract(contractId, price) {
    return {
        sell: contractId,
        price: price
    };
};

var sellExpiredContracts = exports.sellExpiredContracts = function sellExpiredContracts() {
    return {
        sell_expired: 1
    };
};

var topUpVirtualAccount = exports.topUpVirtualAccount = function topUpVirtualAccount() {
    return {
        topup_virtual: 1
    };
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var getActiveSymbolsBrief = exports.getActiveSymbolsBrief = function getActiveSymbolsBrief() {
    return {
        active_symbols: 'brief'
    };
};

var getActiveSymbolsFull = exports.getActiveSymbolsFull = function getActiveSymbolsFull() {
    return {
        active_symbols: 'full'
    };
};

var getAssetIndex = exports.getAssetIndex = function getAssetIndex() {
    return {
        asset_index: 1
    };
};

var authorize = exports.authorize = function authorize(token) {
    return {
        authorize: token
    };
};

var getContractsForSymbol = exports.getContractsForSymbol = function getContractsForSymbol(symbol) {
    return {
        contracts_for: symbol
    };
};

var unsubscribeFromTick = exports.unsubscribeFromTick = function unsubscribeFromTick(symbol) {
    return {
        forget: symbol
    };
};

var unsubscribeFromTicks = exports.unsubscribeFromTicks = function unsubscribeFromTicks(symbols) {
    return {
        forget: symbols
    };
};

var unsubscribeByID = exports.unsubscribeByID = function unsubscribeByID(id) {
    return {
        forget: id
    };
};

var unsubscribeFromAllTicks = exports.unsubscribeFromAllTicks = function unsubscribeFromAllTicks() {
    return {
        forget_all: 'ticks'
    };
};

var unsubscribeFromAllCandles = exports.unsubscribeFromAllCandles = function unsubscribeFromAllCandles() {
    return {
        forget_all: 'candles'
    };
};

var unsubscribeFromAllProposals = exports.unsubscribeFromAllProposals = function unsubscribeFromAllProposals() {
    return {
        forget_all: 'proposal'
    };
};

var unsubscribeFromAllPortfolios = exports.unsubscribeFromAllPortfolios = function unsubscribeFromAllPortfolios() {
    return {
        forget_all: 'portfolio'
    };
};

var getLandingCompany = exports.getLandingCompany = function getLandingCompany(landingCompany) {
    return {
        landing_company: landingCompany
    };
};

var getLandingCompanyDetails = exports.getLandingCompanyDetails = function getLandingCompanyDetails(landingCompany) {
    return {
        landing_company_details: landingCompany
    };
};

var createVirtualAccount = exports.createVirtualAccount = function createVirtualAccount(options) {
    return _extends({
        new_account_virtual: 1
    }, options);
};

var ping = exports.ping = function ping() {
    return {
        ping: 1
    };
};

var getPaymentAgentsForCountry = exports.getPaymentAgentsForCountry = function getPaymentAgentsForCountry(countryCode) {
    return {
        paymentagent_list: countryCode
    };
};

var getPayoutCurrencies = exports.getPayoutCurrencies = function getPayoutCurrencies() {
    return {
        payout_currencies: 1
    };
};

var getPriceProposalForContract = exports.getPriceProposalForContract = function getPriceProposalForContract(options) {
    return _extends({
        proposal: 1
    }, options);
};

var subscribeToPriceForContractProposal = exports.subscribeToPriceForContractProposal = function subscribeToPriceForContractProposal(options) {
    return _extends({
        proposal: 1,
        subscribe: 1
    }, options);
};

var getResidences = exports.getResidences = function getResidences() {
    return {
        residence_list: 1
    };
};

var getStatesForCountry = exports.getStatesForCountry = function getStatesForCountry(countryCode) {
    return {
        states_list: countryCode
    };
};

var subscribeToTick = exports.subscribeToTick = function subscribeToTick(symbol) {
    return {
        ticks: symbol
    };
};

var subscribeToTicks = exports.subscribeToTicks = function subscribeToTicks(symbols) {
    return {
        ticks: symbols
    };
};

var getTickHistory = exports.getTickHistory = function getTickHistory(symbol, options) {
    return _extends({
        ticks_history: symbol
    }, options || { end: 'latest' });
};

var getCandles = exports.getCandles = function getCandles(symbol, options) {
    return _extends({
        ticks_history: symbol,
        style: 'candles'
    }, options || { end: 'latest' });
};

var getCandlesForLastNDays = exports.getCandlesForLastNDays = function getCandlesForLastNDays(symbol, ndays) {
    return {
        ticks_history: symbol,
        style: 'candles',
        start: Math.floor(Date.now() / 1000) - (ndays - 1) * 60 * 60 * 24,
        end: 'latest',
        granularity: 60 * 60 * 24,
        count: 30
    };
};

var getServerTime = exports.getServerTime = function getServerTime() {
    return {
        time: 1
    };
};

var getTradingTimes = exports.getTradingTimes = function getTradingTimes(date) {
    return {
        trading_times: date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()
    };
};

var verifyEmail = exports.verifyEmail = function verifyEmail(email, type) {
    return {
        verify_email: email,
        type: type
    };
};

var getWebsiteStatus = exports.getWebsiteStatus = function getWebsiteStatus() {
    return {
        website_status: 1
    };
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (a, b) {
    if (a.length !== b.length) {
        return false;
    }

    return !a.some(function (x, idx) {
        return x !== b[idx];
    });
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = function (arr) {
    return Math.max.apply(Math, _toConsumableArray(arr));
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = function (arr) {
    return Math.min.apply(Math, _toConsumableArray(arr));
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr) {
    return arr && (arr.length === 0 ? undefined : arr[arr.length - 1]);
};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr, key) {
    return arr.reduce(function (a, b) {
        var kv = b[key];
        var idx = a.findIndex(function (g) {
            return g.some(function (e) {
                return e[key] === kv;
            });
        });

        if (idx > -1) {
            a[idx].push(b);
        } else {
            a.push([b]);
        }
        return a;
    }, []);
};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr1, arr2) {
    var getter1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (x) {
        return x;
    };
    var getter2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (x) {
        return x;
    };
    var deduplication = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

    /**
     * compare element using getter
     * @param a
     * @param b
     * @returns {number}
     *   0  -> equal
     *   1  -> `a` bigger than `b`
     *   -1 -> `b` bigger than `a`
     */
    var compare = function compare(a, b) {
        var valA = getter1(a);
        var valB = getter2(b);

        if (valA > valB) {
            return 1;
        }

        if (valA < valB) {
            return -1;
        }

        return 0;
    };

    // clone so that does not change arguments
    var a1Clone = arr1.slice(0);
    var a2Clone = arr2.slice(0);

    var result = [];

    // loop until both array is empty
    while (a1Clone.length > 0 || a2Clone.length > 0) {
        var a1Head = a1Clone[0];
        var a2Head = a2Clone[0];

        if (!a1Head) {
            result = result.concat(a2Clone);
            break; // break if one of the array is empty
        }

        if (!a2Head) {
            result = result.concat(a1Clone);
            break; // break if one of the array is empty
        }

        var last = result.length > 0 && result[result.length - 1];
        var toAdd = void 0;
        switch (compare(a1Head, a2Head)) {
            case 0:
                {
                    if (deduplication) a2Clone.shift();
                    toAdd = a1Clone.shift();
                    break;
                }
            // a2Head is smaller
            case 1:
                {
                    toAdd = a2Clone.shift();
                    break;
                }
            // a1Head is smaller
            case -1:
                {
                    toAdd = a1Clone.shift();
                    break;
                }
            default: // impossible
        }

        // if dedup is true, do not append same element
        if (deduplication && last && getter1(last) === getter2(toAdd)) {
            break;
        }
        result.push(toAdd);
    }

    return result;
};

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (n) {
    return Array.from(Array(n).keys());
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getAbsoluteBarrierFromContract = __webpack_require__(7);

var _getAbsoluteBarrierFromContract2 = _interopRequireDefault(_getAbsoluteBarrierFromContract);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract, lastTickQuote) {
    return (0, _getAbsoluteBarrierFromContract2.default)(contract, lastTickQuote, 'barrier2');
};

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getAbsoluteBarrierFromContract = __webpack_require__(7);

var _getAbsoluteBarrierFromContract2 = _interopRequireDefault(_getAbsoluteBarrierFromContract);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract, lastTickQuote) {
    return (0, _getAbsoluteBarrierFromContract2.default)(contract, lastTickQuote, 'barrier');
};

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _relativeBarrier = __webpack_require__(17);

var _relativeBarrier2 = _interopRequireDefault(_relativeBarrier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract, lastTickQuote) {
    return contract.barrier ? (0, _relativeBarrier2.default)(contract, lastTickQuote) : +contract.entry_spot || lastTickQuote;
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _groupByKey = __webpack_require__(4);

var _groupByKey2 = _interopRequireDefault(_groupByKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var extractDigitBarrierHelper = function extractDigitBarrierHelper(contractsGroupedByExpiry) {
    var expiryTypes = Object.keys(contractsGroupedByExpiry);
    var result = {};
    expiryTypes.forEach(function (et) {
        var contractsByExpiry = contractsGroupedByExpiry[et];
        result[et] = [{
            name: 'Digit',
            values: contractsByExpiry[0].last_digit_range,
            defaultValue: contractsByExpiry[0].last_digit_range[0]
        }];
    });
    return result;
};

var extract2BarriersHelper = function extract2BarriersHelper(contractsGroupedByExpiry) {
    var expiryTypes = Object.keys(contractsGroupedByExpiry);
    var result = {};
    expiryTypes.forEach(function (et) {
        var contractsByExpiry = contractsGroupedByExpiry[et];
        result[et] = [{ name: 'High barrier', defaultValue: contractsByExpiry[0].high_barrier }, { name: 'Low barrier', defaultValue: contractsByExpiry[0].low_barrier }];
    });
    return result;
};

var extract1BarrierHelper = function extract1BarrierHelper(contractGroupedByExpiry, barrierName) {
    var expiryTypes = Object.keys(contractGroupedByExpiry);
    var result = {};
    expiryTypes.forEach(function (et) {
        var contractsByExpiry = contractGroupedByExpiry[et];
        var contractWithBarrier = contractsByExpiry.find(function (c) {
            return !!c.barrier;
        });
        if (!contractWithBarrier) {
            return;
        }
        result[et] = [{ name: barrierName, defaultValue: contractWithBarrier.barrier }];
    });
    return result;
};

exports.default = function (contracts, type) {
    var groupByExpiryType = (0, _groupByKey2.default)(contracts, 'expiry_type');

    switch (type) {
        // types with 1 barrier
        case 'CALL':
            return extract1BarrierHelper(groupByExpiryType, 'Higher than');
        case 'PUT':
            return extract1BarrierHelper(groupByExpiryType, 'Lower than');
        case 'ONETOUCH':
        case 'NOTOUCH':
            return extract1BarrierHelper(groupByExpiryType, 'Touch spot');

        // types with 2 barriers
        case 'EXPIRYMISS':
        case 'EXPIRYRANGE':
        case 'RANGE':
        case 'UPORDOWN':
            return extract2BarriersHelper(groupByExpiryType);

        // special case: digit type
        case 'DIGITMATCH':
        case 'DIGITDIFF':
        case 'DIGITOVER':
        case 'DIGITUNDER':
            return extractDigitBarrierHelper(groupByExpiryType);

        // These types do not have barrier
        case 'DIGITODD':
        case 'DIGITEVEN':
        case 'ASIANU':
        case 'ASIAND':
        case 'SPREADU':
        case 'SPREADD':
        default:
            return undefined;
    }
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _commonRelativeBarrier = __webpack_require__(6);

var _commonRelativeBarrier2 = _interopRequireDefault(_commonRelativeBarrier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract, lastTickQuote) {
    return (0, _commonRelativeBarrier2.default)(contract.barrier2, contract.entry_spot, lastTickQuote);
};

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (date) {
    return Math.floor(date.getTime() / 1000);
};

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (date) {
    return date.toISOString().replace(/T/, ' ').replace(/\..+/, '');
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (date) {
    return date.toISOString().slice(11, 19);
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _epochToDate = __webpack_require__(2);

var _epochToDate2 = _interopRequireDefault(_epochToDate);

var _dateToDateString = __webpack_require__(0);

var _dateToDateString2 = _interopRequireDefault(_dateToDateString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    var epoch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return (0, _dateToDateString2.default)((0, _epochToDate2.default)(epoch));
};

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _epochToDate = __webpack_require__(2);

var _epochToDate2 = _interopRequireDefault(_epochToDate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (epoch) {
    return (0, _epochToDate2.default)(epoch).toUTCString();
};

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dateToTimeString = __webpack_require__(18);

var _dateToTimeString2 = _interopRequireDefault(_dateToTimeString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (epoch) {
    return (0, _dateToTimeString2.default)(new Date(epoch * 1000));
};

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _epochToDate = __webpack_require__(2);

var _epochToDate2 = _interopRequireDefault(_epochToDate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    var epoch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return (0, _epochToDate2.default)(epoch).toISOString().slice(0, 10);
};

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (epoch) {
    return new Date(epoch * 1000).toISOString().slice(11, 19);
};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (x) {
	var d = new Date();
	d.setMonth(d.getMonth() - x);
	return Math.floor(d.getTime() / 1000);
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (date) {
    return !isNaN(date.getTime());
};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (time) {
    var tokens = time.split(':');
    if (tokens.length < 2 || tokens.length > 3) {
        return false;
    }

    return tokens.map(function (val, ind) {
        switch (ind) {
            case 0:
                return parseInt(val, 0) < 24;
            case 1:
                return parseInt(val, 0) <= 59;
            default:
                return parseInt(val, 0) <= 59;
        }
    }).indexOf(false) === -1;
};

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _xDayEpoch = __webpack_require__(1);

var _xDayEpoch2 = _interopRequireDefault(_xDayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  return (0, _xDayEpoch2.default)(-29);
};

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _xDayEpoch = __webpack_require__(1);

var _xDayEpoch2 = _interopRequireDefault(_xDayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  return (0, _xDayEpoch2.default)(-6);
};

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (x) {
    var tmr = new Date();
    tmr.setDate(tmr.getDate() + x);
    return tmr;
};

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _dateToDateString = __webpack_require__(0);

var _dateToDateString2 = _interopRequireDefault(_dateToDateString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
	var d = new Date();
	d.setFullYear(new Date().getFullYear() + 1);
	return (0, _dateToDateString2.default)(d);
};

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (inputValue, bridge) {
    return inputValue.split(bridge).map(function (obj) {
        switch (obj.length) {
            case 0:
                return '01';
            case 1:
                return '0' + (obj === '0' ? '1' : obj);
            default:
                return obj;
        }
    }).join(bridge);
};

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (inputValue, bridge) {
    return inputValue.split(bridge).map(function (obj) {
        switch (obj.length) {
            case 0:
                return '00';
            case 1:
                return '0' + obj;
            default:
                return obj;
        }
    }).join(bridge);
};

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (secs) {
    var days = Math.floor(secs / 60 / 60 / 24);
    var hours = Math.floor(secs % (60 * 60 * 24) / (60 * 60));
    var minutes = Math.floor(secs % (60 * 60) / 60);
    var seconds = Math.floor(secs % 60);
    return (days > 0 ? days + ' day(s)' : '') + (hours > 0 ? hours + ' hour(s)' : '') + (minutes > 0 ? minutes + ' minute(s)' : '') + (seconds > 0 ? seconds + ' second(s)' : '');
};

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _nowAsEpoch = __webpack_require__(9);

var _nowAsEpoch2 = _interopRequireDefault(_nowAsEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (loginTime, interval) {
    return interval - ((0, _nowAsEpoch2.default)() - loginTime) % interval;
};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _timeStringBigger = __webpack_require__(10);

var _timeStringBigger2 = _interopRequireDefault(_timeStringBigger);

var _timeStringSmaller = __webpack_require__(20);

var _timeStringSmaller2 = _interopRequireDefault(_timeStringSmaller);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (start, end, target) {
    if ((0, _timeStringBigger2.default)(end, start)) {
        return (0, _timeStringBigger2.default)(target, start) && (0, _timeStringSmaller2.default)(target, end);
    }
    /**
     * if open time is bigger than close time
     * target should not between close and open time
     * eg. '09:00:00' is not between '23:00:00' (start) and '08:00:00'(close)
     * because it is between '08:00:00' to '23:00:00'
     * */

    return !((0, _timeStringBigger2.default)(target, end) && (0, _timeStringSmaller2.default)(target, start));
};

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

// only supported format = "hh:mm", seconds are not supported
exports.default = function (timeString) {
    var tokens = timeString.split(':');
    if (tokens.length !== 2) {
        throw new Error('Time string format incorrect, expecting HH:mm, actual: ' + timeString);
    }
    var h = +tokens[0];
    var m = +tokens[1];

    return h * 3600 + m * 60;
};

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _xDayEpoch = __webpack_require__(1);

var _xDayEpoch2 = _interopRequireDefault(_xDayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  return (0, _xDayEpoch2.default)(0);
};

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dateToDateString = __webpack_require__(0);

var _dateToDateString2 = _interopRequireDefault(_dateToDateString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    return (0, _dateToDateString2.default)(new Date());
};

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    return new Date().toISOString().slice(0, 10);
};

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (m) {
	return new Date(new Date().setMonth(new Date().getMonth() + m));
};

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dateToDateString = __webpack_require__(0);

var _dateToDateString2 = _interopRequireDefault(_dateToDateString);

var _yesterdayEpoch = __webpack_require__(11);

var _yesterdayEpoch2 = _interopRequireDefault(_yesterdayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    return (0, _dateToDateString2.default)(new Date((0, _yesterdayEpoch2.default)() * 1000));
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _yesterdayEpoch = __webpack_require__(11);

var _yesterdayEpoch2 = _interopRequireDefault(_yesterdayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    return new Date((0, _yesterdayEpoch2.default)() * 1000).toISOString().slice(0, 10);
};

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (handler) {
    document.addEventListener('fullscreenchange', function () {
        return handler(document.fullscreen);
    });
    document.addEventListener('webkitfullscreenchange', function () {
        return handler(document.webkitIsFullScreen);
    });
    document.addEventListener('mozfullscreenchange', function () {
        return handler(document.mozFullScreen);
    });
    document.addEventListener('MSFullscreenChange', function () {
        return handler(document.msFullscreenElement);
    });
};

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    if (document.exitFullscreen) {
        document.exitFullscreen();
    } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
    } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
    }
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (handler) {
    document.removeEventListener('fullscreenchange', handler);
    document.removeEventListener('webkitfullscreenchange', handler);
    document.removeEventListener('mozfullscreenchange', handler);
    document.removeEventListener('MSFullscreenChange', handler);
};

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (elem) {
    if (elem.requestFullscreen) {
        elem.requestFullscreen();
    } else if (elem.msRequestFullscreen) {
        elem.msRequestFullscreen();
    } else if (elem.mozRequestFullScreen) {
        elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) {
        elem.webkitRequestFullscreen();
    }
};

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = typeof alert !== 'undefined' ? alert : function () {};

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = typeof alert !== 'undefined' ? alert : function () {};

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    if (typeof window === 'undefined') return;
    setTimeout(function () {
        return window.dispatchEvent(new Event('resize'));
    }, 100);
};

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (unit) {
    return {
        t: 'Ticks',
        s: 'Seconds',
        m: 'Minutes',
        h: 'Hours',
        d: 'Days'
    }[unit];
};

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extractDurationHelper = __webpack_require__(12);

var _extractDurationHelper2 = _interopRequireDefault(_extractDurationHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contracts, type) {
    var contractsOfType = contracts.filter(function (c) {
        return c.contract_type === type;
    });
    var nonForwardStartingContracts = contractsOfType.filter(function (c) {
        return !c.forward_starting_options;
    });

    if (nonForwardStartingContracts.length === 0) {
        return undefined;
    }

    return (0, _extractDurationHelper2.default)(nonForwardStartingContracts, type);
};

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _arrayToObject = __webpack_require__(16);

var _arrayToObject2 = _interopRequireDefault(_arrayToObject);

var _groupByKey = __webpack_require__(4);

var _groupByKey2 = _interopRequireDefault(_groupByKey);

var _extractDurationHelper = __webpack_require__(12);

var _extractDurationHelper2 = _interopRequireDefault(_extractDurationHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contracts, type) {
    var forwardStartingContracts = contracts.filter(function (c) {
        return !!c.forward_starting_options && c.contract_type === type;
    });
    if (forwardStartingContracts.length === 0) {
        return undefined;
    }

    if (forwardStartingContracts.length > 1) {
        throw new Error('Can not have more than one contract with forward starting options');
    }

    var forwardOptions = forwardStartingContracts[0].forward_starting_options;
    var groupByDate = (0, _groupByKey2.default)(forwardOptions || [], 'date');
    var forwardStartingRange = [];
    Object.keys(groupByDate).sort(function (a, b) {
        return +a - +b;
    }).forEach(function (date) {
        var timesPerDateArr = groupByDate[date].map(function (obj) {
            var open = new Date(obj.open * 1000);
            var close = new Date(obj.close * 1000);
            return { open: open, close: close };
        });
        var timesPerDateObj = (0, _arrayToObject2.default)(timesPerDateArr);
        forwardStartingRange.push(_extends({ date: new Date(date * 1000) }, timesPerDateObj));
    });

    var forwardStartingDurations = (0, _extractDurationHelper2.default)(forwardStartingContracts, type);
    return {
        range: forwardStartingRange,
        options: forwardStartingDurations
    };
};

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isDurationTick = __webpack_require__(24);

var _isDurationTick2 = _interopRequireDefault(_isDurationTick);

var _durationToSecs = __webpack_require__(3);

var _durationToSecs2 = _interopRequireDefault(_durationToSecs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (duration, durationUnit) {
    return (0, _isDurationTick2.default)(durationUnit) || (0, _durationToSecs2.default)(duration, durationUnit) < 120;
};

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (duration, durationUnit, ranges) {
    var relatedBlock = ranges.find(function (r) {
        return r.unit === durationUnit;
    });

    if (!relatedBlock) {
        return false;
    }

    return duration <= relatedBlock.max && duration >= relatedBlock.min;
};

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});


var nullFunc = function nullFunc() {};

var analytics = function analytics(ga) {
    return ga || typeof window !== 'undefined' && window.ga || nullFunc;
};

var trackUserId = exports.trackUserId = function trackUserId(userId, ga) {
    return analytics(ga)('set', 'userId', userId);
};

var trackRoute = exports.trackRoute = function trackRoute(route, ga) {
    return analytics(ga)('send', 'pageview', route);
};

var trackEvent = exports.trackEvent = function trackEvent(category, action, label, ga) {
    return analytics(ga)('send', {
        hitType: 'event',
        eventCategory: category,
        eventAction: action,
        eventLabel: label
    });
};

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (percentage) {
    return "rgba(42, 48, 82, " + percentage + ")";
};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (value) {
    return value < 0 && 'number-negative' || value > 0 && 'number-positive' || '';
};

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (text) {
    return text.split(')').length > 1 ? text.split(')')[1] : text;
};

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var uniqueId = 0;

exports.default = function () {
  return uniqueId++;
};

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    return typeof window !== 'undefined' && /Mobile/.test(window.navigator.userAgent);
};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (email) {
    return (/\S+@\S+\.\S+/.test(email)
    );
};

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (password) {
    return (/^[ -~]{6,25}$/.test(password)
    );
};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getLastDigit = __webpack_require__(26);

var _getLastDigit2 = _interopRequireDefault(_getLastDigit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (ticks, pips) {
    return ticks.reduce(function (acc, x) {
        var digit = (0, _getLastDigit2.default)(x.quote, pips);
        acc[digit]++;
        return acc;
    }, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]).map(function (x) {
        return ticks.length && x / ticks.length * 100;
    });
};

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (digits) {
    return Math.pow(10, -digits);
};

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (n) {
    var numStr = n.toString();
    return numStr.includes('.') ? numStr.split('.')[1].length : 0;
};

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (n) {
    return n > 0 ? '+' + n : n.toString();
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (pipSize) {
    if (isNaN(pipSize)) {
        return '0.01';
    }
    var zeros = Array(pipSize).join('0');
    return '0.' + zeros + 1;
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (pips) {
    return Math.abs(Math.log10(pips));
};

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (value) {
    return (+value).toFixed(2);
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (obj, predicate) {
    return Object.keys(obj).reduce(function (acc, key) {
        if (predicate(obj[key])) {
            acc[key] = obj[key];
        }
        return acc;
    }, {});
};

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Find if certain value is true in the object
 * @param obj
 * @param predicate     (object, index) => true|false
 * @returns {boolean}
 */
var findDeep = function findDeep(obj, predicate) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null || obj === undefined) {
        return false;
    }

    var allChildren = Object.keys(obj).map(function (k) {
        return obj[k];
    });
    var childrenMeetPredicate = allChildren.map(function (child, k) {
        return predicate(child, k);
    });
    if (childrenMeetPredicate.indexOf(true) > -1) {
        return true;
    }
    var childrenResult = allChildren.map(function (child) {
        return findDeep(child, predicate);
    });
    return childrenResult.indexOf(true) > -1;
};

exports.default = findDeep;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var toPlainJS = exports.toPlainJS = function toPlainJS(obj) {
    return obj && (typeof obj.toJS === 'undefined' ? obj : obj.toJS());
};

exports.default = function (obj) {
    return obj && Object.keys(obj).reduce(function (acc, key) {
        acc[key] = toPlainJS(obj[key]);
        return acc;
    }, {});
};

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr1, arr2) {
    return arr1.length === arr2.length && arr1.every(function (x, idx) {
        return x === arr2[idx];
    });
};

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (ohlc1, ohlc2) {
    var o1Len = ohlc1.length;
    var o2Len = ohlc2.length;

    if (o1Len !== o2Len) {
        return false;
    }

    if (o1Len === 0) {
        return true;
    }

    var o1Last = ohlc1[o1Len - 1];
    var o2Last = ohlc2[o2Len - 1];

    return o1Last.epoch === o2Last.epoch && o1Last.close === o2Last.close;
};

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (ticks1, ticks2) {
    return ticks1.length === ticks2.length && (ticks1.length === 0 || ticks1[ticks1.length - 1].epoch === ticks2[ticks2.length - 1].epoch);
};

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _doCandleEqual = __webpack_require__(27);

var _doCandleEqual2 = _interopRequireDefault(_doCandleEqual);

var _doArrayDifferJustOneEntry = __webpack_require__(13);

var _doArrayDifferJustOneEntry2 = _interopRequireDefault(_doArrayDifferJustOneEntry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (candles1, candles2) {
    return (0, _doArrayDifferJustOneEntry2.default)(candles1, candles2, _doCandleEqual2.default);
};

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _doTicksEqual = __webpack_require__(28);

var _doTicksEqual2 = _interopRequireDefault(_doTicksEqual);

var _doArrayDifferJustOneEntry = __webpack_require__(13);

var _doArrayDifferJustOneEntry2 = _interopRequireDefault(_doArrayDifferJustOneEntry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (ticks1, ticks2) {
    return (0, _doArrayDifferJustOneEntry2.default)(ticks1, ticks2, _doTicksEqual2.default);
};

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (candles) {
    return candles && (candles.length === 0 ? undefined : +candles[candles.length - 1].close);
};

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (ticks) {
    return ticks && ticks.length > 0 ? ticks[ticks.length - 1].quote : undefined;
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

// a zip + map, but I do not find we need it much, so no need to generalize
exports.default = function (history) {
    return history.times.map(function (t, idx) {
        return {
            epoch: +t,
            quote: +history.prices[idx]
        };
    });
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

// open_time is used when data is stream
exports.default = function (candle) {
    return [+(candle.open_time || candle.epoch) * 1000, +candle.open, +candle.high, +candle.low, +candle.close];
};

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (candles) {
    return candles.map(function (data) {
        return { quote: +data.open, epoch: +data.epoch };
    });
};

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (tick) {
    return [+tick.epoch * 1000, +tick.quote];
};

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (proposal) {
    return proposal && +proposal.ask_price;
};

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _nowAsEpoch = __webpack_require__(9);

var _nowAsEpoch2 = _interopRequireDefault(_nowAsEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract) {
    var nowEpoch = (0, _nowAsEpoch2.default)();
    if (contract.tick_count) {
        var _start = +contract.date_start - 5;
        var exitTime = +contract.exit_tick_time + 5;
        var _end = exitTime || nowEpoch;
        return { start: _start, end: _end };
    }

    var bufferSize = 0.05; // 5 % buffer
    var contractStart = +contract.date_start;
    var contractEnd = +contract.exit_tick_time || +contract.date_expiry;

    if (contractEnd <= contractStart) {
        var e = new RangeError('Contract ends time is earlier than start time');
        e.name = 'ContractEndsBeforeStart';
        throw e;
    }

    var buffer = (contractEnd - contractStart) * bufferSize;
    var bufferedExitTime = contractEnd + buffer;

    var start = buffer ? contractStart - buffer : contractStart;
    var end = contractEnd ? bufferedExitTime : nowEpoch;

    return {
        end: Math.round(end),
        start: Math.round(start)
    };
};

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (category) {
    return {
        callput: 'Up/Down',
        risefall: 'Rise/Fall',
        higherlower: 'Higher/Lower',
        asian: 'Asians',
        digits: 'Digits',
        endsinout: 'Ends In/Out',
        staysinout: 'Stays In/Out',
        touchnotouch: 'Touch/No Touch',
        spreads: 'Spreads'
    }[category];
};

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (code) {
	return {
		contract_id: 'Contract ID',
		purchase_time: 'Purchase Time',
		ask_price: 'Ask Price',
		bid_price: 'Bid Price',
		date_start: 'Start Time',
		date_expiry: 'Expiry Time',
		date_settlement: 'Settlement Time',
		expiry_time: 'Expiry Time',

		current_spot: 'Current Spot',
		current_spot_time: 'Current Spot Time',
		entry_spot: 'Entry Spot',
		entry_tick_time: 'Entry Spot Time',
		sell_price: 'Sell Price',
		payout: 'Potential Payout',
		buy_price: 'Purchase Price',

		barrier: 'Barrier',
		low_barrier: 'Low Barrier',
		high_barrier: 'High Barrier',

		sell_time: 'Sell Time',

		exit_tick_time: 'Exit Spot Time', // to be confirmed
		exit_tick: 'Exit Spot', // to show both or not?

		sell_spot_time: 'DO NOT USE',
		entry_tick: 'DO NOT USE',
		sell_spot: 'DO NOT USE'
	}[code];
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (contracts) {
    return {
        amountPerPoint: contracts[0].amount_per_point,
        stopType: contracts[0].stop_type,
        stopLoss: contracts[0].stop_loss,
        stopProfit: contracts[0].stop_profit
    };
};

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _durationToSecs = __webpack_require__(3);

var _durationToSecs2 = _interopRequireDefault(_durationToSecs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (duration, unit) {
    return (0, _durationToSecs2.default)(duration, unit) < 60 * 60 * 24;
};

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _groupByKey = __webpack_require__(4);

var _groupByKey2 = _interopRequireDefault(_groupByKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contracts) {
    var extraRemoved = contracts.map(function (contract) {
        return {
            amount_per_point: contract.amount_per_point,
            barrier: contract.barrier,
            barriers: contract.barriers,
            contract_category: contract.contract_category,
            contract_category_display: contract.contract_category_display,
            contract_display: contract.contract_display,
            contract_type: contract.contract_type,
            expiry_type: contract.expiry_type,
            forward_starting_options: contract.forward_starting_options,
            high_barrier: contract.high_barrier,
            last_digit_range: contract.last_digit_range,
            low_barrier: contract.low_barrier,
            min_contract_duration: contract.min_contract_duration,
            max_contract_duration: contract.max_contract_duration,
            stop_type: contract.stop_type,
            stop_loss: contract.stop_loss,
            stop_profit: contract.stop_profit
        };
    });

    var groupByCategory = (0, _groupByKey2.default)(extraRemoved, 'contract_category');
    var allCategory = Object.keys(groupByCategory);
    allCategory.forEach(function (c) {
        var relatedContracts = groupByCategory[c];
        var groupByType = (0, _groupByKey2.default)(relatedContracts, 'contract_type');
        groupByCategory[c] = groupByType;
    });

    return groupByCategory;
};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tradeTypeCodeToText = __webpack_require__(29);

var _tradeTypeCodeToText2 = _interopRequireDefault(_tradeTypeCodeToText);

var _typeHasBarrier = __webpack_require__(30);

var _typeHasBarrier2 = _interopRequireDefault(_typeHasBarrier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (code, barrier) {
    return (0, _tradeTypeCodeToText2.default)(code) + ((0, _typeHasBarrier2.default)(code) ? ' ' + barrier : '');
};

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tradeTypes = __webpack_require__(5);

var _tradeTypes2 = _interopRequireDefault(_tradeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (text) {
    var tradeType = _tradeTypes2.default.find(function (x) {
        return x.text === text;
    });
    if (!tradeType) throw new Error('Unknown trade type text');
    return tradeType.value;
};

/***/ }),
/* 131 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global, process) {var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) Microsoft, All rights reserved. See License.txt in the project root for license information.

;(function (undefined) {

  var objectTypes = {
    'function': true,
    'object': true
  };

  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global === 'object' && global);
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);
  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);
  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();

  var Rx = {
    internals: {},
    config: {
      Promise: root.Promise
    },
    helpers: { }
  };

  // Defaults
  var noop = Rx.helpers.noop = function () { },
    identity = Rx.helpers.identity = function (x) { return x; },
    defaultNow = Rx.helpers.defaultNow = Date.now,
    defaultComparer = Rx.helpers.defaultComparer = function (x, y) { return isEqual(x, y); },
    defaultSubComparer = Rx.helpers.defaultSubComparer = function (x, y) { return x > y ? 1 : (x < y ? -1 : 0); },
    defaultKeySerializer = Rx.helpers.defaultKeySerializer = function (x) { return x.toString(); },
    defaultError = Rx.helpers.defaultError = function (err) { throw err; },
    isPromise = Rx.helpers.isPromise = function (p) { return !!p && typeof p.subscribe !== 'function' && typeof p.then === 'function'; },
    isFunction = Rx.helpers.isFunction = (function () {

      var isFn = function (value) {
        return typeof value == 'function' || false;
      };

      // fallback for older versions of Chrome and Safari
      if (isFn(/x/)) {
        isFn = function(value) {
          return typeof value == 'function' && toString.call(value) == '[object Function]';
        };
      }

      return isFn;
    }());

    function cloneArray(arr) {
      var len = arr.length, a = new Array(len);
      for(var i = 0; i < len; i++) { a[i] = arr[i]; }
      return a;
    }

  var errorObj = {e: {}};
  
  function tryCatcherGen(tryCatchTarget) {
    return function tryCatcher() {
      try {
        return tryCatchTarget.apply(this, arguments);
      } catch (e) {
        errorObj.e = e;
        return errorObj;
      }
    };
  }

  var tryCatch = Rx.internals.tryCatch = function tryCatch(fn) {
    if (!isFunction(fn)) { throw new TypeError('fn must be a function'); }
    return tryCatcherGen(fn);
  };

  function thrower(e) {
    throw e;
  }

  Rx.config.longStackSupport = false;
  var hasStacks = false, stacks = tryCatch(function () { throw new Error(); })();
  hasStacks = !!stacks.e && !!stacks.e.stack;

  // All code after this point will be filtered from stack traces reported by RxJS
  var rStartingLine = captureLine(), rFileName;

  var STACK_JUMP_SEPARATOR = 'From previous event:';

  function makeStackTraceLong(error, observable) {
    // If possible, transform the error stack trace by removing Node and RxJS
    // cruft, then concatenating with the stack trace of `observable`.
    if (hasStacks &&
        observable.stack &&
        typeof error === 'object' &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
      var stacks = [];
      for (var o = observable; !!o; o = o.source) {
        if (o.stack) {
          stacks.unshift(o.stack);
        }
      }
      stacks.unshift(error.stack);

      var concatedStacks = stacks.join('\n' + STACK_JUMP_SEPARATOR + '\n');
      error.stack = filterStackString(concatedStacks);
    }
  }

  function filterStackString(stackString) {
    var lines = stackString.split('\n'), desiredLines = [];
    for (var i = 0, len = lines.length; i < len; i++) {
      var line = lines[i];

      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
        desiredLines.push(line);
      }
    }
    return desiredLines.join('\n');
  }

  function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
    if (!fileNameAndLineNumber) {
      return false;
    }
    var fileName = fileNameAndLineNumber[0], lineNumber = fileNameAndLineNumber[1];

    return fileName === rFileName &&
      lineNumber >= rStartingLine &&
      lineNumber <= rEndingLine;
  }

  function isNodeFrame(stackLine) {
    return stackLine.indexOf('(module.js:') !== -1 ||
      stackLine.indexOf('(node.js:') !== -1;
  }

  function captureLine() {
    if (!hasStacks) { return; }

    try {
      throw new Error();
    } catch (e) {
      var lines = e.stack.split('\n');
      var firstLine = lines[0].indexOf('@') > 0 ? lines[1] : lines[2];
      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
      if (!fileNameAndLineNumber) { return; }

      rFileName = fileNameAndLineNumber[0];
      return fileNameAndLineNumber[1];
    }
  }

  function getFileNameAndLineNumber(stackLine) {
    // Named functions: 'at functionName (filename:lineNumber:columnNumber)'
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) { return [attempt1[1], Number(attempt1[2])]; }

    // Anonymous functions: 'at filename:lineNumber:columnNumber'
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) { return [attempt2[1], Number(attempt2[2])]; }

    // Firefox style: 'function@filename:lineNumber or @filename:lineNumber'
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) { return [attempt3[1], Number(attempt3[2])]; }
  }

  var EmptyError = Rx.EmptyError = function() {
    this.message = 'Sequence contains no elements.';
    Error.call(this);
  };
  EmptyError.prototype = Object.create(Error.prototype);
  EmptyError.prototype.name = 'EmptyError';

  var ObjectDisposedError = Rx.ObjectDisposedError = function() {
    this.message = 'Object has been disposed';
    Error.call(this);
  };
  ObjectDisposedError.prototype = Object.create(Error.prototype);
  ObjectDisposedError.prototype.name = 'ObjectDisposedError';

  var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function () {
    this.message = 'Argument out of range';
    Error.call(this);
  };
  ArgumentOutOfRangeError.prototype = Object.create(Error.prototype);
  ArgumentOutOfRangeError.prototype.name = 'ArgumentOutOfRangeError';

  var NotSupportedError = Rx.NotSupportedError = function (message) {
    this.message = message || 'This operation is not supported';
    Error.call(this);
  };
  NotSupportedError.prototype = Object.create(Error.prototype);
  NotSupportedError.prototype.name = 'NotSupportedError';

  var NotImplementedError = Rx.NotImplementedError = function (message) {
    this.message = message || 'This operation is not implemented';
    Error.call(this);
  };
  NotImplementedError.prototype = Object.create(Error.prototype);
  NotImplementedError.prototype.name = 'NotImplementedError';

  var notImplemented = Rx.helpers.notImplemented = function () {
    throw new NotImplementedError();
  };

  var notSupported = Rx.helpers.notSupported = function () {
    throw new NotSupportedError();
  };

  // Shim in iterator support
  var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) ||
    '_es6shim_iterator_';
  // Bug for mozilla version
  if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
    $iterator$ = '@@iterator';
  }

  var doneEnumerator = Rx.doneEnumerator = { done: true, value: undefined };

  var isIterable = Rx.helpers.isIterable = function (o) {
    return o && o[$iterator$] !== undefined;
  };

  var isArrayLike = Rx.helpers.isArrayLike = function (o) {
    return o && o.length !== undefined;
  };

  Rx.helpers.iterator = $iterator$;

  var bindCallback = Rx.internals.bindCallback = function (func, thisArg, argCount) {
    if (typeof thisArg === 'undefined') { return func; }
    switch(argCount) {
      case 0:
        return function() {
          return func.call(thisArg)
        };
      case 1:
        return function(arg) {
          return func.call(thisArg, arg);
        };
      case 2:
        return function(value, index) {
          return func.call(thisArg, value, index);
        };
      case 3:
        return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
    }

    return function() {
      return func.apply(thisArg, arguments);
    };
  };

  /** Used to determine if values are of the language type Object */
  var dontEnums = ['toString',
    'toLocaleString',
    'valueOf',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'constructor'],
  dontEnumsLength = dontEnums.length;

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dateTag] = typedArrayTags[errorTag] =
typedArrayTags[funcTag] = typedArrayTags[mapTag] =
typedArrayTags[numberTag] = typedArrayTags[objectTag] =
typedArrayTags[regexpTag] = typedArrayTags[setTag] =
typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

var objectProto = Object.prototype,
    hasOwnProperty = objectProto.hasOwnProperty,
    objToString = objectProto.toString,
    MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

var keys = Object.keys || (function() {
    var hasOwnProperty = Object.prototype.hasOwnProperty,
        hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),
        dontEnums = [
          'toString',
          'toLocaleString',
          'valueOf',
          'hasOwnProperty',
          'isPrototypeOf',
          'propertyIsEnumerable',
          'constructor'
        ],
        dontEnumsLength = dontEnums.length;

    return function(obj) {
      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
        throw new TypeError('Object.keys called on non-object');
      }

      var result = [], prop, i;

      for (prop in obj) {
        if (hasOwnProperty.call(obj, prop)) {
          result.push(prop);
        }
      }

      if (hasDontEnumBug) {
        for (i = 0; i < dontEnumsLength; i++) {
          if (hasOwnProperty.call(obj, dontEnums[i])) {
            result.push(dontEnums[i]);
          }
        }
      }
      return result;
    };
  }());

function equalObjects(object, other, equalFunc, isLoose, stackA, stackB) {
  var objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength !== othLength && !isLoose) {
    return false;
  }
  var index = objLength, key;
  while (index--) {
    key = objProps[index];
    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  var skipCtor = isLoose;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key],
        result;

    if (!(result === undefined ? equalFunc(objValue, othValue, isLoose, stackA, stackB) : result)) {
      return false;
    }
    skipCtor || (skipCtor = key === 'constructor');
  }
  if (!skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    if (objCtor !== othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor === 'function' && objCtor instanceof objCtor &&
          typeof othCtor === 'function' && othCtor instanceof othCtor)) {
      return false;
    }
  }
  return true;
}

function equalByTag(object, other, tag) {
  switch (tag) {
    case boolTag:
    case dateTag:
      return +object === +other;

    case errorTag:
      return object.name === other.name && object.message === other.message;

    case numberTag:
      return (object !== +object) ?
        other !== +other :
        object === +other;

    case regexpTag:
    case stringTag:
      return object === (other + '');
  }
  return false;
}

var isObject = Rx.internals.isObject = function(value) {
  var type = typeof value;
  return !!value && (type === 'object' || type === 'function');
};

function isObjectLike(value) {
  return !!value && typeof value === 'object';
}

function isLength(value) {
  return typeof value === 'number' && value > -1 && value % 1 === 0 && value <= MAX_SAFE_INTEGER;
}

var isHostObject = (function() {
  try {
    Object({ 'toString': 0 } + '');
  } catch(e) {
    return function() { return false; };
  }
  return function(value) {
    return typeof value.toString !== 'function' && typeof (value + '') === 'string';
  };
}());

function isTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
}

var isArray = Array.isArray || function(value) {
  return isObjectLike(value) && isLength(value.length) && objToString.call(value) === arrayTag;
};

function arraySome (array, predicate) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

function equalArrays(array, other, equalFunc, isLoose, stackA, stackB) {
  var index = -1,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength !== othLength && !(isLoose && othLength > arrLength)) {
    return false;
  }
  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index],
        result;

    if (result !== undefined) {
      if (result) {
        continue;
      }
      return false;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (isLoose) {
      if (!arraySome(other, function(othValue) {
            return arrValue === othValue || equalFunc(arrValue, othValue, isLoose, stackA, stackB);
          })) {
        return false;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, isLoose, stackA, stackB))) {
      return false;
    }
  }
  return true;
}

function baseIsEqualDeep(object, other, equalFunc, isLoose, stackA, stackB) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = objToString.call(object);
    if (objTag === argsTag) {
      objTag = objectTag;
    } else if (objTag !== objectTag) {
      objIsArr = isTypedArray(object);
    }
  }
  if (!othIsArr) {
    othTag = objToString.call(other);
    if (othTag === argsTag) {
      othTag = objectTag;
    }
  }
  var objIsObj = objTag === objectTag && !isHostObject(object),
      othIsObj = othTag === objectTag && !isHostObject(other),
      isSameTag = objTag === othTag;

  if (isSameTag && !(objIsArr || objIsObj)) {
    return equalByTag(object, other, objTag);
  }
  if (!isLoose) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, isLoose, stackA, stackB);
    }
  }
  if (!isSameTag) {
    return false;
  }
  // Assume cyclic values are equal.
  // For more information on detecting circular references see https://es5.github.io/#JO.
  stackA || (stackA = []);
  stackB || (stackB = []);

  var length = stackA.length;
  while (length--) {
    if (stackA[length] === object) {
      return stackB[length] === other;
    }
  }
  // Add `object` and `other` to the stack of traversed objects.
  stackA.push(object);
  stackB.push(other);

  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, isLoose, stackA, stackB);

  stackA.pop();
  stackB.pop();

  return result;
}

function baseIsEqual(value, other, isLoose, stackA, stackB) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, isLoose, stackA, stackB);
}

var isEqual = Rx.internals.isEqual = function (value, other) {
  return baseIsEqual(value, other);
};

  var hasProp = {}.hasOwnProperty,
      slice = Array.prototype.slice;

  var inherits = Rx.internals.inherits = function (child, parent) {
    function __() { this.constructor = child; }
    __.prototype = parent.prototype;
    child.prototype = new __();
  };

  var addProperties = Rx.internals.addProperties = function (obj) {
    for(var sources = [], i = 1, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
    for (var idx = 0, ln = sources.length; idx < ln; idx++) {
      var source = sources[idx];
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    }
  };

  // Rx Utils
  var addRef = Rx.internals.addRef = function (xs, r) {
    return new AnonymousObservable(function (observer) {
      return new BinaryDisposable(r.getDisposable(), xs.subscribe(observer));
    });
  };

  function arrayInitialize(count, factory) {
    var a = new Array(count);
    for (var i = 0; i < count; i++) {
      a[i] = factory();
    }
    return a;
  }

  /**
   * Represents a group of disposable resources that are disposed together.
   * @constructor
   */
  var CompositeDisposable = Rx.CompositeDisposable = function () {
    var args = [], i, len;
    if (Array.isArray(arguments[0])) {
      args = arguments[0];
    } else {
      len = arguments.length;
      args = new Array(len);
      for(i = 0; i < len; i++) { args[i] = arguments[i]; }
    }
    this.disposables = args;
    this.isDisposed = false;
    this.length = args.length;
  };

  var CompositeDisposablePrototype = CompositeDisposable.prototype;

  /**
   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
   * @param {Mixed} item Disposable to add.
   */
  CompositeDisposablePrototype.add = function (item) {
    if (this.isDisposed) {
      item.dispose();
    } else {
      this.disposables.push(item);
      this.length++;
    }
  };

  /**
   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
   * @param {Mixed} item Disposable to remove.
   * @returns {Boolean} true if found; false otherwise.
   */
  CompositeDisposablePrototype.remove = function (item) {
    var shouldDispose = false;
    if (!this.isDisposed) {
      var idx = this.disposables.indexOf(item);
      if (idx !== -1) {
        shouldDispose = true;
        this.disposables.splice(idx, 1);
        this.length--;
        item.dispose();
      }
    }
    return shouldDispose;
  };

  /**
   *  Disposes all disposables in the group and removes them from the group.
   */
  CompositeDisposablePrototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var len = this.disposables.length, currentDisposables = new Array(len);
      for(var i = 0; i < len; i++) { currentDisposables[i] = this.disposables[i]; }
      this.disposables = [];
      this.length = 0;

      for (i = 0; i < len; i++) {
        currentDisposables[i].dispose();
      }
    }
  };

  /**
   * Provides a set of static methods for creating Disposables.
   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
   */
  var Disposable = Rx.Disposable = function (action) {
    this.isDisposed = false;
    this.action = action || noop;
  };

  /** Performs the task of cleaning up resources. */
  Disposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.action();
      this.isDisposed = true;
    }
  };

  /**
   * Creates a disposable object that invokes the specified action when disposed.
   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
   * @return {Disposable} The disposable object that runs the given action upon disposal.
   */
  var disposableCreate = Disposable.create = function (action) { return new Disposable(action); };

  /**
   * Gets the disposable that does nothing when disposed.
   */
  var disposableEmpty = Disposable.empty = { dispose: noop };

  /**
   * Validates whether the given object is a disposable
   * @param {Object} Object to test whether it has a dispose method
   * @returns {Boolean} true if a disposable object, else false.
   */
  var isDisposable = Disposable.isDisposable = function (d) {
    return d && isFunction(d.dispose);
  };

  var checkDisposed = Disposable.checkDisposed = function (disposable) {
    if (disposable.isDisposed) { throw new ObjectDisposedError(); }
  };

  var disposableFixup = Disposable._fixup = function (result) {
    return isDisposable(result) ? result : disposableEmpty;
  };

  // Single assignment
  var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = function () {
    this.isDisposed = false;
    this.current = null;
  };
  SingleAssignmentDisposable.prototype.getDisposable = function () {
    return this.current;
  };
  SingleAssignmentDisposable.prototype.setDisposable = function (value) {
    if (this.current) { throw new Error('Disposable has already been assigned'); }
    var shouldDispose = this.isDisposed;
    !shouldDispose && (this.current = value);
    shouldDispose && value && value.dispose();
  };
  SingleAssignmentDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var old = this.current;
      this.current = null;
      old && old.dispose();
    }
  };

  // Multiple assignment disposable
  var SerialDisposable = Rx.SerialDisposable = function () {
    this.isDisposed = false;
    this.current = null;
  };
  SerialDisposable.prototype.getDisposable = function () {
    return this.current;
  };
  SerialDisposable.prototype.setDisposable = function (value) {
    var shouldDispose = this.isDisposed;
    if (!shouldDispose) {
      var old = this.current;
      this.current = value;
    }
    old && old.dispose();
    shouldDispose && value && value.dispose();
  };
  SerialDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var old = this.current;
      this.current = null;
    }
    old && old.dispose();
  };

  var BinaryDisposable = Rx.BinaryDisposable = function (first, second) {
    this._first = first;
    this._second = second;
    this.isDisposed = false;
  };

  BinaryDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      var old1 = this._first;
      this._first = null;
      old1 && old1.dispose();
      var old2 = this._second;
      this._second = null;
      old2 && old2.dispose();
    }
  };

  var NAryDisposable = Rx.NAryDisposable = function (disposables) {
    this._disposables = disposables;
    this.isDisposed = false;
  };

  NAryDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      for (var i = 0, len = this._disposables.length; i < len; i++) {
        this._disposables[i].dispose();
      }
      this._disposables.length = 0;
    }
  };

  /**
   * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
   */
  var RefCountDisposable = Rx.RefCountDisposable = (function () {

    function InnerDisposable(disposable) {
      this.disposable = disposable;
      this.disposable.count++;
      this.isInnerDisposed = false;
    }

    InnerDisposable.prototype.dispose = function () {
      if (!this.disposable.isDisposed && !this.isInnerDisposed) {
        this.isInnerDisposed = true;
        this.disposable.count--;
        if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
          this.disposable.isDisposed = true;
          this.disposable.underlyingDisposable.dispose();
        }
      }
    };

    /**
     * Initializes a new instance of the RefCountDisposable with the specified disposable.
     * @constructor
     * @param {Disposable} disposable Underlying disposable.
      */
    function RefCountDisposable(disposable) {
      this.underlyingDisposable = disposable;
      this.isDisposed = false;
      this.isPrimaryDisposed = false;
      this.count = 0;
    }

    /**
     * Disposes the underlying disposable only when all dependent disposables have been disposed
     */
    RefCountDisposable.prototype.dispose = function () {
      if (!this.isDisposed && !this.isPrimaryDisposed) {
        this.isPrimaryDisposed = true;
        if (this.count === 0) {
          this.isDisposed = true;
          this.underlyingDisposable.dispose();
        }
      }
    };

    /**
     * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
     * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
     */
    RefCountDisposable.prototype.getDisposable = function () {
      return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
    };

    return RefCountDisposable;
  })();

  var ScheduledItem = Rx.internals.ScheduledItem = function (scheduler, state, action, dueTime, comparer) {
    this.scheduler = scheduler;
    this.state = state;
    this.action = action;
    this.dueTime = dueTime;
    this.comparer = comparer || defaultSubComparer;
    this.disposable = new SingleAssignmentDisposable();
  };

  ScheduledItem.prototype.invoke = function () {
    this.disposable.setDisposable(this.invokeCore());
  };

  ScheduledItem.prototype.compareTo = function (other) {
    return this.comparer(this.dueTime, other.dueTime);
  };

  ScheduledItem.prototype.isCancelled = function () {
    return this.disposable.isDisposed;
  };

  ScheduledItem.prototype.invokeCore = function () {
    return disposableFixup(this.action(this.scheduler, this.state));
  };

  /** Provides a set of static properties to access commonly used schedulers. */
  var Scheduler = Rx.Scheduler = (function () {

    function Scheduler() { }

    /** Determines whether the given object is a scheduler */
    Scheduler.isScheduler = function (s) {
      return s instanceof Scheduler;
    };

    var schedulerProto = Scheduler.prototype;

    /**
   * Schedules an action to be executed.
   * @param state State passed to the action to be executed.
   * @param {Function} action Action to be executed.
   * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
   */
    schedulerProto.schedule = function (state, action) {
      throw new NotImplementedError();
    };

  /**
   * Schedules an action to be executed after dueTime.
   * @param state State passed to the action to be executed.
   * @param {Function} action Action to be executed.
   * @param {Number} dueTime Relative time after which to execute the action.
   * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
   */
    schedulerProto.scheduleFuture = function (state, dueTime, action) {
      var dt = dueTime;
      dt instanceof Date && (dt = dt - this.now());
      dt = Scheduler.normalize(dt);

      if (dt === 0) { return this.schedule(state, action); }

      return this._scheduleFuture(state, dt, action);
    };

    schedulerProto._scheduleFuture = function (state, dueTime, action) {
      throw new NotImplementedError();
    };

    /** Gets the current time according to the local machine's system clock. */
    Scheduler.now = defaultNow;

    /** Gets the current time according to the local machine's system clock. */
    Scheduler.prototype.now = defaultNow;

    /**
     * Normalizes the specified TimeSpan value to a positive value.
     * @param {Number} timeSpan The time span value to normalize.
     * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0
     */
    Scheduler.normalize = function (timeSpan) {
      timeSpan < 0 && (timeSpan = 0);
      return timeSpan;
    };

    return Scheduler;
  }());

  var normalizeTime = Scheduler.normalize, isScheduler = Scheduler.isScheduler;

  (function (schedulerProto) {

    function invokeRecImmediate(scheduler, pair) {
      var state = pair[0], action = pair[1], group = new CompositeDisposable();
      action(state, innerAction);
      return group;

      function innerAction(state2) {
        var isAdded = false, isDone = false;

        var d = scheduler.schedule(state2, scheduleWork);
        if (!isDone) {
          group.add(d);
          isAdded = true;
        }

        function scheduleWork(_, state3) {
          if (isAdded) {
            group.remove(d);
          } else {
            isDone = true;
          }
          action(state3, innerAction);
          return disposableEmpty;
        }
      }
    }

    function invokeRecDate(scheduler, pair) {
      var state = pair[0], action = pair[1], group = new CompositeDisposable();
      action(state, innerAction);
      return group;

      function innerAction(state2, dueTime1) {
        var isAdded = false, isDone = false;

        var d = scheduler.scheduleFuture(state2, dueTime1, scheduleWork);
        if (!isDone) {
          group.add(d);
          isAdded = true;
        }

        function scheduleWork(_, state3) {
          if (isAdded) {
            group.remove(d);
          } else {
            isDone = true;
          }
          action(state3, innerAction);
          return disposableEmpty;
        }
      }
    }

    /**
     * Schedules an action to be executed recursively.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursive = function (state, action) {
      return this.schedule([state, action], invokeRecImmediate);
    };

    /**
     * Schedules an action to be executed recursively after a specified relative or absolute due time.
     * @param {Mixed} state State passed to the action to be executed.
     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
     * @param {Number | Date} dueTime Relative or absolute time after which to execute the action for the first time.
     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
     */
    schedulerProto.scheduleRecursiveFuture = function (state, dueTime, action) {
      return this.scheduleFuture([state, action], dueTime, invokeRecDate);
    };

  }(Scheduler.prototype));

  (function (schedulerProto) {

    /**
     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
     * @param {Mixed} state Initial state passed to the action upon the first iteration.
     * @param {Number} period Period for running the work periodically.
     * @param {Function} action Action to be executed, potentially updating the state.
     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
     */
    schedulerProto.schedulePeriodic = function(state, period, action) {
      if (typeof root.setInterval === 'undefined') { throw new NotSupportedError(); }
      period = normalizeTime(period);
      var s = state, id = root.setInterval(function () { s = action(s); }, period);
      return disposableCreate(function () { root.clearInterval(id); });
    };

  }(Scheduler.prototype));

  /** Gets a scheduler that schedules work immediately on the current thread. */
   var ImmediateScheduler = (function (__super__) {
    inherits(ImmediateScheduler, __super__);
    function ImmediateScheduler() {
      __super__.call(this);
    }

    ImmediateScheduler.prototype.schedule = function (state, action) {
      return disposableFixup(action(this, state));
    };

    return ImmediateScheduler;
  }(Scheduler));

  var immediateScheduler = Scheduler.immediate = new ImmediateScheduler();

  /**
   * Gets a scheduler that schedules work as soon as possible on the current thread.
   */
  var CurrentThreadScheduler = (function (__super__) {
    var queue;

    function runTrampoline () {
      while (queue.length > 0) {
        var item = queue.dequeue();
        !item.isCancelled() && item.invoke();
      }
    }

    inherits(CurrentThreadScheduler, __super__);
    function CurrentThreadScheduler() {
      __super__.call(this);
    }

    CurrentThreadScheduler.prototype.schedule = function (state, action) {
      var si = new ScheduledItem(this, state, action, this.now());

      if (!queue) {
        queue = new PriorityQueue(4);
        queue.enqueue(si);

        var result = tryCatch(runTrampoline)();
        queue = null;
        if (result === errorObj) { thrower(result.e); }
      } else {
        queue.enqueue(si);
      }
      return si.disposable;
    };

    CurrentThreadScheduler.prototype.scheduleRequired = function () { return !queue; };

    return CurrentThreadScheduler;
  }(Scheduler));

  var currentThreadScheduler = Scheduler.currentThread = new CurrentThreadScheduler();

  var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function () {
    function createTick(self) {
      return function tick(command, recurse) {
        recurse(0, self._period);
        var state = tryCatch(self._action)(self._state);
        if (state === errorObj) {
          self._cancel.dispose();
          thrower(state.e);
        }
        self._state = state;
      };
    }

    function SchedulePeriodicRecursive(scheduler, state, period, action) {
      this._scheduler = scheduler;
      this._state = state;
      this._period = period;
      this._action = action;
    }

    SchedulePeriodicRecursive.prototype.start = function () {
      var d = new SingleAssignmentDisposable();
      this._cancel = d;
      d.setDisposable(this._scheduler.scheduleRecursiveFuture(0, this._period, createTick(this)));

      return d;
    };

    return SchedulePeriodicRecursive;
  }());

  var scheduleMethod, clearMethod;

  var localTimer = (function () {
    var localSetTimeout, localClearTimeout = noop;
    if (!!root.setTimeout) {
      localSetTimeout = root.setTimeout;
      localClearTimeout = root.clearTimeout;
    } else if (!!root.WScript) {
      localSetTimeout = function (fn, time) {
        root.WScript.Sleep(time);
        fn();
      };
    } else {
      throw new NotSupportedError();
    }

    return {
      setTimeout: localSetTimeout,
      clearTimeout: localClearTimeout
    };
  }());
  var localSetTimeout = localTimer.setTimeout,
    localClearTimeout = localTimer.clearTimeout;

  (function () {

    var nextHandle = 1, tasksByHandle = {}, currentlyRunning = false;

    clearMethod = function (handle) {
      delete tasksByHandle[handle];
    };

    function runTask(handle) {
      if (currentlyRunning) {
        localSetTimeout(function () { runTask(handle); }, 0);
      } else {
        var task = tasksByHandle[handle];
        if (task) {
          currentlyRunning = true;
          var result = tryCatch(task)();
          clearMethod(handle);
          currentlyRunning = false;
          if (result === errorObj) { thrower(result.e); }
        }
      }
    }

    var reNative = new RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' &&
      !reNative.test(setImmediate) && setImmediate;

    function postMessageSupported () {
      // Ensure not in a worker
      if (!root.postMessage || root.importScripts) { return false; }
      var isAsync = false, oldHandler = root.onmessage;
      // Test for async
      root.onmessage = function () { isAsync = true; };
      root.postMessage('', '*');
      root.onmessage = oldHandler;

      return isAsync;
    }

    // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
    if (isFunction(setImmediate)) {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        setImmediate(function () { runTask(id); });

        return id;
      };
    } else if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        process.nextTick(function () { runTask(id); });

        return id;
      };
    } else if (postMessageSupported()) {
      var MSG_PREFIX = 'ms.rx.schedule' + Math.random();

      var onGlobalPostMessage = function (event) {
        // Only if we're a match to avoid any other global events
        if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
          runTask(event.data.substring(MSG_PREFIX.length));
        }
      };

      root.addEventListener('message', onGlobalPostMessage, false);

      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        root.postMessage(MSG_PREFIX + id, '*');
        return id;
      };
    } else if (!!root.MessageChannel) {
      var channel = new root.MessageChannel();

      channel.port1.onmessage = function (e) { runTask(e.data); };

      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        channel.port2.postMessage(id);
        return id;
      };
    } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {

      scheduleMethod = function (action) {
        var scriptElement = root.document.createElement('script');
        var id = nextHandle++;
        tasksByHandle[id] = action;

        scriptElement.onreadystatechange = function () {
          runTask(id);
          scriptElement.onreadystatechange = null;
          scriptElement.parentNode.removeChild(scriptElement);
          scriptElement = null;
        };
        root.document.documentElement.appendChild(scriptElement);
        return id;
      };

    } else {
      scheduleMethod = function (action) {
        var id = nextHandle++;
        tasksByHandle[id] = action;
        localSetTimeout(function () {
          runTask(id);
        }, 0);

        return id;
      };
    }
  }());

  /**
   * Gets a scheduler that schedules work via a timed callback based upon platform.
   */
   var DefaultScheduler = (function (__super__) {
     inherits(DefaultScheduler, __super__);
     function DefaultScheduler() {
       __super__.call(this);
     }

     function scheduleAction(disposable, action, scheduler, state) {
       return function schedule() {
         disposable.setDisposable(Disposable._fixup(action(scheduler, state)));
       };
     }

     function ClearDisposable(id) {
       this._id = id;
       this.isDisposed = false;
     }

     ClearDisposable.prototype.dispose = function () {
       if (!this.isDisposed) {
         this.isDisposed = true;
         clearMethod(this._id);
       }
     };

     function LocalClearDisposable(id) {
       this._id = id;
       this.isDisposed = false;
     }

     LocalClearDisposable.prototype.dispose = function () {
       if (!this.isDisposed) {
         this.isDisposed = true;
         localClearTimeout(this._id);
       }
     };

    DefaultScheduler.prototype.schedule = function (state, action) {
      var disposable = new SingleAssignmentDisposable(),
          id = scheduleMethod(scheduleAction(disposable, action, this, state));
      return new BinaryDisposable(disposable, new ClearDisposable(id));
    };

    DefaultScheduler.prototype._scheduleFuture = function (state, dueTime, action) {
      if (dueTime === 0) { return this.schedule(state, action); }
      var disposable = new SingleAssignmentDisposable(),
          id = localSetTimeout(scheduleAction(disposable, action, this, state), dueTime);
      return new BinaryDisposable(disposable, new LocalClearDisposable(id));
    };

    return DefaultScheduler;
  }(Scheduler));

  var defaultScheduler = Scheduler['default'] = Scheduler.async = new DefaultScheduler();

  function IndexedItem(id, value) {
    this.id = id;
    this.value = value;
  }

  IndexedItem.prototype.compareTo = function (other) {
    var c = this.value.compareTo(other.value);
    c === 0 && (c = this.id - other.id);
    return c;
  };

  var PriorityQueue = Rx.internals.PriorityQueue = function (capacity) {
    this.items = new Array(capacity);
    this.length = 0;
  };

  var priorityProto = PriorityQueue.prototype;
  priorityProto.isHigherPriority = function (left, right) {
    return this.items[left].compareTo(this.items[right]) < 0;
  };

  priorityProto.percolate = function (index) {
    if (index >= this.length || index < 0) { return; }
    var parent = index - 1 >> 1;
    if (parent < 0 || parent === index) { return; }
    if (this.isHigherPriority(index, parent)) {
      var temp = this.items[index];
      this.items[index] = this.items[parent];
      this.items[parent] = temp;
      this.percolate(parent);
    }
  };

  priorityProto.heapify = function (index) {
    +index || (index = 0);
    if (index >= this.length || index < 0) { return; }
    var left = 2 * index + 1,
        right = 2 * index + 2,
        first = index;
    if (left < this.length && this.isHigherPriority(left, first)) {
      first = left;
    }
    if (right < this.length && this.isHigherPriority(right, first)) {
      first = right;
    }
    if (first !== index) {
      var temp = this.items[index];
      this.items[index] = this.items[first];
      this.items[first] = temp;
      this.heapify(first);
    }
  };

  priorityProto.peek = function () { return this.items[0].value; };

  priorityProto.removeAt = function (index) {
    this.items[index] = this.items[--this.length];
    this.items[this.length] = undefined;
    this.heapify();
  };

  priorityProto.dequeue = function () {
    var result = this.peek();
    this.removeAt(0);
    return result;
  };

  priorityProto.enqueue = function (item) {
    var index = this.length++;
    this.items[index] = new IndexedItem(PriorityQueue.count++, item);
    this.percolate(index);
  };

  priorityProto.remove = function (item) {
    for (var i = 0; i < this.length; i++) {
      if (this.items[i].value === item) {
        this.removeAt(i);
        return true;
      }
    }
    return false;
  };
  PriorityQueue.count = 0;

  /**
   *  Represents a notification to an observer.
   */
  var Notification = Rx.Notification = (function () {
    function Notification() {

    }

    Notification.prototype._accept = function (onNext, onError, onCompleted) {
      throw new NotImplementedError();
    };

    Notification.prototype._acceptObserver = function (onNext, onError, onCompleted) {
      throw new NotImplementedError();
    };

    /**
     * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.
     * @param {Function | Observer} observerOrOnNext Function to invoke for an OnNext notification or Observer to invoke the notification on..
     * @param {Function} onError Function to invoke for an OnError notification.
     * @param {Function} onCompleted Function to invoke for an OnCompleted notification.
     * @returns {Any} Result produced by the observation.
     */
    Notification.prototype.accept = function (observerOrOnNext, onError, onCompleted) {
      return observerOrOnNext && typeof observerOrOnNext === 'object' ?
        this._acceptObserver(observerOrOnNext) :
        this._accept(observerOrOnNext, onError, onCompleted);
    };

    /**
     * Returns an observable sequence with a single notification.
     *
     * @memberOf Notifications
     * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.
     * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.
     */
    Notification.prototype.toObservable = function (scheduler) {
      var self = this;
      isScheduler(scheduler) || (scheduler = immediateScheduler);
      return new AnonymousObservable(function (o) {
        return scheduler.schedule(self, function (_, notification) {
          notification._acceptObserver(o);
          notification.kind === 'N' && o.onCompleted();
        });
      });
    };

    return Notification;
  })();

  var OnNextNotification = (function (__super__) {
    inherits(OnNextNotification, __super__);
    function OnNextNotification(value) {
      this.value = value;
      this.kind = 'N';
    }

    OnNextNotification.prototype._accept = function (onNext) {
      return onNext(this.value);
    };

    OnNextNotification.prototype._acceptObserver = function (o) {
      return o.onNext(this.value);
    };

    OnNextNotification.prototype.toString = function () {
      return 'OnNext(' + this.value + ')';
    };

    return OnNextNotification;
  }(Notification));

  var OnErrorNotification = (function (__super__) {
    inherits(OnErrorNotification, __super__);
    function OnErrorNotification(error) {
      this.error = error;
      this.kind = 'E';
    }

    OnErrorNotification.prototype._accept = function (onNext, onError) {
      return onError(this.error);
    };

    OnErrorNotification.prototype._acceptObserver = function (o) {
      return o.onError(this.error);
    };

    OnErrorNotification.prototype.toString = function () {
      return 'OnError(' + this.error + ')';
    };

    return OnErrorNotification;
  }(Notification));

  var OnCompletedNotification = (function (__super__) {
    inherits(OnCompletedNotification, __super__);
    function OnCompletedNotification() {
      this.kind = 'C';
    }

    OnCompletedNotification.prototype._accept = function (onNext, onError, onCompleted) {
      return onCompleted();
    };

    OnCompletedNotification.prototype._acceptObserver = function (o) {
      return o.onCompleted();
    };

    OnCompletedNotification.prototype.toString = function () {
      return 'OnCompleted()';
    };

    return OnCompletedNotification;
  }(Notification));

  /**
   * Creates an object that represents an OnNext notification to an observer.
   * @param {Any} value The value contained in the notification.
   * @returns {Notification} The OnNext notification containing the value.
   */
  var notificationCreateOnNext = Notification.createOnNext = function (value) {
    return new OnNextNotification(value);
  };

  /**
   * Creates an object that represents an OnError notification to an observer.
   * @param {Any} error The exception contained in the notification.
   * @returns {Notification} The OnError notification containing the exception.
   */
  var notificationCreateOnError = Notification.createOnError = function (error) {
    return new OnErrorNotification(error);
  };

  /**
   * Creates an object that represents an OnCompleted notification to an observer.
   * @returns {Notification} The OnCompleted notification.
   */
  var notificationCreateOnCompleted = Notification.createOnCompleted = function () {
    return new OnCompletedNotification();
  };

  /**
   * Supports push-style iteration over an observable sequence.
   */
  var Observer = Rx.Observer = function () { };

  /**
   *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.
   * @param {Function} [onNext] Observer's OnNext action implementation.
   * @param {Function} [onError] Observer's OnError action implementation.
   * @param {Function} [onCompleted] Observer's OnCompleted action implementation.
   * @returns {Observer} The observer object implemented using the given actions.
   */
  var observerCreate = Observer.create = function (onNext, onError, onCompleted) {
    onNext || (onNext = noop);
    onError || (onError = defaultError);
    onCompleted || (onCompleted = noop);
    return new AnonymousObserver(onNext, onError, onCompleted);
  };

  /**
   * Abstract base class for implementations of the Observer class.
   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
   */
  var AbstractObserver = Rx.internals.AbstractObserver = (function (__super__) {
    inherits(AbstractObserver, __super__);

    /**
     * Creates a new observer in a non-stopped state.
     */
    function AbstractObserver() {
      this.isStopped = false;
    }

    // Must be implemented by other observers
    AbstractObserver.prototype.next = notImplemented;
    AbstractObserver.prototype.error = notImplemented;
    AbstractObserver.prototype.completed = notImplemented;

    /**
     * Notifies the observer of a new element in the sequence.
     * @param {Any} value Next element in the sequence.
     */
    AbstractObserver.prototype.onNext = function (value) {
      !this.isStopped && this.next(value);
    };

    /**
     * Notifies the observer that an exception has occurred.
     * @param {Any} error The error that has occurred.
     */
    AbstractObserver.prototype.onError = function (error) {
      if (!this.isStopped) {
        this.isStopped = true;
        this.error(error);
      }
    };

    /**
     * Notifies the observer of the end of the sequence.
     */
    AbstractObserver.prototype.onCompleted = function () {
      if (!this.isStopped) {
        this.isStopped = true;
        this.completed();
      }
    };

    /**
     * Disposes the observer, causing it to transition to the stopped state.
     */
    AbstractObserver.prototype.dispose = function () { this.isStopped = true; };

    AbstractObserver.prototype.fail = function (e) {
      if (!this.isStopped) {
        this.isStopped = true;
        this.error(e);
        return true;
      }

      return false;
    };

    return AbstractObserver;
  }(Observer));

  /**
   * Class to create an Observer instance from delegate-based implementations of the on* methods.
   */
  var AnonymousObserver = Rx.AnonymousObserver = (function (__super__) {
    inherits(AnonymousObserver, __super__);

    /**
     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
     * @param {Any} onNext Observer's OnNext action implementation.
     * @param {Any} onError Observer's OnError action implementation.
     * @param {Any} onCompleted Observer's OnCompleted action implementation.
     */
    function AnonymousObserver(onNext, onError, onCompleted) {
      __super__.call(this);
      this._onNext = onNext;
      this._onError = onError;
      this._onCompleted = onCompleted;
    }

    /**
     * Calls the onNext action.
     * @param {Any} value Next element in the sequence.
     */
    AnonymousObserver.prototype.next = function (value) {
      this._onNext(value);
    };

    /**
     * Calls the onError action.
     * @param {Any} error The error that has occurred.
     */
    AnonymousObserver.prototype.error = function (error) {
      this._onError(error);
    };

    /**
     *  Calls the onCompleted action.
     */
    AnonymousObserver.prototype.completed = function () {
      this._onCompleted();
    };

    return AnonymousObserver;
  }(AbstractObserver));

  var observableProto;

  /**
   * Represents a push-style collection.
   */
  var Observable = Rx.Observable = (function () {

    function makeSubscribe(self, subscribe) {
      return function (o) {
        var oldOnError = o.onError;
        o.onError = function (e) {
          makeStackTraceLong(e, self);
          oldOnError.call(o, e);
        };

        return subscribe.call(self, o);
      };
    }

    function Observable() {
      if (Rx.config.longStackSupport && hasStacks) {
        var oldSubscribe = this._subscribe;
        var e = tryCatch(thrower)(new Error()).e;
        this.stack = e.stack.substring(e.stack.indexOf('\n') + 1);
        this._subscribe = makeSubscribe(this, oldSubscribe);
      }
    }

    observableProto = Observable.prototype;

    /**
    * Determines whether the given object is an Observable
    * @param {Any} An object to determine whether it is an Observable
    * @returns {Boolean} true if an Observable, else false.
    */
    Observable.isObservable = function (o) {
      return o && isFunction(o.subscribe);
    };

    /**
     *  Subscribes an o to the observable sequence.
     *  @param {Mixed} [oOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.
     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.
     *  @returns {Diposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribe = observableProto.forEach = function (oOrOnNext, onError, onCompleted) {
      return this._subscribe(typeof oOrOnNext === 'object' ?
        oOrOnNext :
        observerCreate(oOrOnNext, onError, onCompleted));
    };

    /**
     * Subscribes to the next value in the sequence with an optional "this" argument.
     * @param {Function} onNext The function to invoke on each element in the observable sequence.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnNext = function (onNext, thisArg) {
      return this._subscribe(observerCreate(typeof thisArg !== 'undefined' ? function(x) { onNext.call(thisArg, x); } : onNext));
    };

    /**
     * Subscribes to an exceptional condition in the sequence with an optional "this" argument.
     * @param {Function} onError The function to invoke upon exceptional termination of the observable sequence.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnError = function (onError, thisArg) {
      return this._subscribe(observerCreate(null, typeof thisArg !== 'undefined' ? function(e) { onError.call(thisArg, e); } : onError));
    };

    /**
     * Subscribes to the next value in the sequence with an optional "this" argument.
     * @param {Function} onCompleted The function to invoke upon graceful termination of the observable sequence.
     * @param {Any} [thisArg] Object to use as this when executing callback.
     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
     */
    observableProto.subscribeOnCompleted = function (onCompleted, thisArg) {
      return this._subscribe(observerCreate(null, null, typeof thisArg !== 'undefined' ? function() { onCompleted.call(thisArg); } : onCompleted));
    };

    return Observable;
  })();

  var ScheduledObserver = Rx.internals.ScheduledObserver = (function (__super__) {
    inherits(ScheduledObserver, __super__);

    function ScheduledObserver(scheduler, observer) {
      __super__.call(this);
      this.scheduler = scheduler;
      this.observer = observer;
      this.isAcquired = false;
      this.hasFaulted = false;
      this.queue = [];
      this.disposable = new SerialDisposable();
    }

    function enqueueNext(observer, x) { return function () { observer.onNext(x); }; }
    function enqueueError(observer, e) { return function () { observer.onError(e); }; }
    function enqueueCompleted(observer) { return function () { observer.onCompleted(); }; }

    ScheduledObserver.prototype.next = function (x) {
      this.queue.push(enqueueNext(this.observer, x));
    };

    ScheduledObserver.prototype.error = function (e) {
      this.queue.push(enqueueError(this.observer, e));
    };

    ScheduledObserver.prototype.completed = function () {
      this.queue.push(enqueueCompleted(this.observer));
    };


    function scheduleMethod(state, recurse) {
      var work;
      if (state.queue.length > 0) {
        work = state.queue.shift();
      } else {
        state.isAcquired = false;
        return;
      }
      var res = tryCatch(work)();
      if (res === errorObj) {
        state.queue = [];
        state.hasFaulted = true;
        return thrower(res.e);
      }
      recurse(state);
    }

    ScheduledObserver.prototype.ensureActive = function () {
      var isOwner = false;
      if (!this.hasFaulted && this.queue.length > 0) {
        isOwner = !this.isAcquired;
        this.isAcquired = true;
      }
      isOwner &&
        this.disposable.setDisposable(this.scheduler.scheduleRecursive(this, scheduleMethod));
    };

    ScheduledObserver.prototype.dispose = function () {
      __super__.prototype.dispose.call(this);
      this.disposable.dispose();
    };

    return ScheduledObserver;
  }(AbstractObserver));

  var ObservableBase = Rx.ObservableBase = (function (__super__) {
    inherits(ObservableBase, __super__);

    function fixSubscriber(subscriber) {
      return subscriber && isFunction(subscriber.dispose) ? subscriber :
        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
    }

    function setDisposable(s, state) {
      var ado = state[0], self = state[1];
      var sub = tryCatch(self.subscribeCore).call(self, ado);
      if (sub === errorObj && !ado.fail(errorObj.e)) { thrower(errorObj.e); }
      ado.setDisposable(fixSubscriber(sub));
    }

    function ObservableBase() {
      __super__.call(this);
    }

    ObservableBase.prototype._subscribe = function (o) {
      var ado = new AutoDetachObserver(o), state = [ado, this];

      if (currentThreadScheduler.scheduleRequired()) {
        currentThreadScheduler.schedule(state, setDisposable);
      } else {
        setDisposable(null, state);
      }
      return ado;
    };

    ObservableBase.prototype.subscribeCore = notImplemented;

    return ObservableBase;
  }(Observable));

var FlatMapObservable = Rx.FlatMapObservable = (function(__super__) {

    inherits(FlatMapObservable, __super__);

    function FlatMapObservable(source, selector, resultSelector, thisArg) {
      this.resultSelector = isFunction(resultSelector) ? resultSelector : null;
      this.selector = bindCallback(isFunction(selector) ? selector : function() { return selector; }, thisArg, 3);
      this.source = source;
      __super__.call(this);
    }

    FlatMapObservable.prototype.subscribeCore = function(o) {
      return this.source.subscribe(new InnerObserver(o, this.selector, this.resultSelector, this));
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(observer, selector, resultSelector, source) {
      this.i = 0;
      this.selector = selector;
      this.resultSelector = resultSelector;
      this.source = source;
      this.o = observer;
      AbstractObserver.call(this);
    }

    InnerObserver.prototype._wrapResult = function(result, x, i) {
      return this.resultSelector ?
        result.map(function(y, i2) { return this.resultSelector(x, y, i, i2); }, this) :
        result;
    };

    InnerObserver.prototype.next = function(x) {
      var i = this.i++;
      var result = tryCatch(this.selector)(x, i, this.source);
      if (result === errorObj) { return this.o.onError(result.e); }

      isPromise(result) && (result = observableFromPromise(result));
      (isArrayLike(result) || isIterable(result)) && (result = Observable.from(result));
      this.o.onNext(this._wrapResult(result, x, i));
    };

    InnerObserver.prototype.error = function(e) { this.o.onError(e); };

    InnerObserver.prototype.completed = function() { this.o.onCompleted(); };

    return FlatMapObservable;

}(ObservableBase));

  var Enumerable = Rx.internals.Enumerable = function () { };

  function IsDisposedDisposable(state) {
    this._s = state;
    this.isDisposed = false;
  }

  IsDisposedDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this.isDisposed = true;
      this._s.isDisposed = true;
    }
  };

  var ConcatEnumerableObservable = (function(__super__) {
    inherits(ConcatEnumerableObservable, __super__);
    function ConcatEnumerableObservable(sources) {
      this.sources = sources;
      __super__.call(this);
    }

    function scheduleMethod(state, recurse) {
      if (state.isDisposed) { return; }
      var currentItem = tryCatch(state.e.next).call(state.e);
      if (currentItem === errorObj) { return state.o.onError(currentItem.e); }
      if (currentItem.done) { return state.o.onCompleted(); }

      // Check if promise
      var currentValue = currentItem.value;
      isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

      var d = new SingleAssignmentDisposable();
      state.subscription.setDisposable(d);
      d.setDisposable(currentValue.subscribe(new InnerObserver(state, recurse)));
    }

    ConcatEnumerableObservable.prototype.subscribeCore = function (o) {
      var subscription = new SerialDisposable();
      var state = {
        isDisposed: false,
        o: o,
        subscription: subscription,
        e: this.sources[$iterator$]()
      };

      var cancelable = currentThreadScheduler.scheduleRecursive(state, scheduleMethod);
      return new NAryDisposable([subscription, cancelable, new IsDisposedDisposable(state)]);
    };

    function InnerObserver(state, recurse) {
      this._state = state;
      this._recurse = recurse;
      AbstractObserver.call(this);
    }

    inherits(InnerObserver, AbstractObserver);

    InnerObserver.prototype.next = function (x) { this._state.o.onNext(x); };
    InnerObserver.prototype.error = function (e) { this._state.o.onError(e); };
    InnerObserver.prototype.completed = function () { this._recurse(this._state); };

    return ConcatEnumerableObservable;
  }(ObservableBase));

  Enumerable.prototype.concat = function () {
    return new ConcatEnumerableObservable(this);
  };

  var CatchErrorObservable = (function(__super__) {
    function CatchErrorObservable(sources) {
      this.sources = sources;
      __super__.call(this);
    }

    inherits(CatchErrorObservable, __super__);

    function scheduleMethod(state, recurse) {
      if (state.isDisposed) { return; }
      var currentItem = tryCatch(state.e.next).call(state.e);
      if (currentItem === errorObj) { return state.o.onError(currentItem.e); }
      if (currentItem.done) { return state.lastError !== null ? state.o.onError(state.lastError) : state.o.onCompleted(); }

      var currentValue = currentItem.value;
      isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

      var d = new SingleAssignmentDisposable();
      state.subscription.setDisposable(d);
      d.setDisposable(currentValue.subscribe(new InnerObserver(state, recurse)));
    }

    CatchErrorObservable.prototype.subscribeCore = function (o) {
      var subscription = new SerialDisposable();
      var state = {
        isDisposed: false,
        e: this.sources[$iterator$](),
        subscription: subscription,
        lastError: null,
        o: o
      };

      var cancelable = currentThreadScheduler.scheduleRecursive(state, scheduleMethod);
      return new NAryDisposable([subscription, cancelable, new IsDisposedDisposable(state)]);
    };

    function InnerObserver(state, recurse) {
      this._state = state;
      this._recurse = recurse;
      AbstractObserver.call(this);
    }

    inherits(InnerObserver, AbstractObserver);

    InnerObserver.prototype.next = function (x) { this._state.o.onNext(x); };
    InnerObserver.prototype.error = function (e) { this._state.lastError = e; this._recurse(this._state); };
    InnerObserver.prototype.completed = function () { this._state.o.onCompleted(); };

    return CatchErrorObservable;
  }(ObservableBase));

  Enumerable.prototype.catchError = function () {
    return new CatchErrorObservable(this);
  };

  var RepeatEnumerable = (function (__super__) {
    inherits(RepeatEnumerable, __super__);
    function RepeatEnumerable(v, c) {
      this.v = v;
      this.c = c == null ? -1 : c;
    }

    RepeatEnumerable.prototype[$iterator$] = function () {
      return new RepeatEnumerator(this);
    };

    function RepeatEnumerator(p) {
      this.v = p.v;
      this.l = p.c;
    }

    RepeatEnumerator.prototype.next = function () {
      if (this.l === 0) { return doneEnumerator; }
      if (this.l > 0) { this.l--; }
      return { done: false, value: this.v };
    };

    return RepeatEnumerable;
  }(Enumerable));

  var enumerableRepeat = Enumerable.repeat = function (value, repeatCount) {
    return new RepeatEnumerable(value, repeatCount);
  };

  var OfEnumerable = (function(__super__) {
    inherits(OfEnumerable, __super__);
    function OfEnumerable(s, fn, thisArg) {
      this.s = s;
      this.fn = fn ? bindCallback(fn, thisArg, 3) : null;
    }
    OfEnumerable.prototype[$iterator$] = function () {
      return new OfEnumerator(this);
    };

    function OfEnumerator(p) {
      this.i = -1;
      this.s = p.s;
      this.l = this.s.length;
      this.fn = p.fn;
    }

    OfEnumerator.prototype.next = function () {
     return ++this.i < this.l ?
       { done: false, value: !this.fn ? this.s[this.i] : this.fn(this.s[this.i], this.i, this.s) } :
       doneEnumerator;
    };

    return OfEnumerable;
  }(Enumerable));

  var enumerableOf = Enumerable.of = function (source, selector, thisArg) {
    return new OfEnumerable(source, selector, thisArg);
  };

  var ToArrayObservable = (function(__super__) {
    inherits(ToArrayObservable, __super__);
    function ToArrayObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    ToArrayObservable.prototype.subscribeCore = function(o) {
      return this.source.subscribe(new InnerObserver(o));
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(o) {
      this.o = o;
      this.a = [];
      AbstractObserver.call(this);
    }
    
    InnerObserver.prototype.next = function (x) { this.a.push(x); };
    InnerObserver.prototype.error = function (e) { this.o.onError(e);  };
    InnerObserver.prototype.completed = function () { this.o.onNext(this.a); this.o.onCompleted(); };

    return ToArrayObservable;
  }(ObservableBase));

  /**
  * Creates an array from an observable sequence.
  * @returns {Observable} An observable sequence containing a single element with a list containing all the elements of the source sequence.
  */
  observableProto.toArray = function () {
    return new ToArrayObservable(this);
  };

  /**
   *  Creates an observable sequence from a specified subscribe method implementation.
   * @example
   *  var res = Rx.Observable.create(function (observer) { return function () { } );
   *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } );
   *  var res = Rx.Observable.create(function (observer) { } );
   * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.
   * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.
   */
  Observable.create = function (subscribe, parent) {
    return new AnonymousObservable(subscribe, parent);
  };

  var Defer = (function(__super__) {
    inherits(Defer, __super__);
    function Defer(factory) {
      this._f = factory;
      __super__.call(this);
    }

    Defer.prototype.subscribeCore = function (o) {
      var result = tryCatch(this._f)();
      if (result === errorObj) { return observableThrow(result.e).subscribe(o);}
      isPromise(result) && (result = observableFromPromise(result));
      return result.subscribe(o);
    };

    return Defer;
  }(ObservableBase));

  /**
   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
   *
   * @example
   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });
   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.
   */
  var observableDefer = Observable.defer = function (observableFactory) {
    return new Defer(observableFactory);
  };

  var EmptyObservable = (function(__super__) {
    inherits(EmptyObservable, __super__);
    function EmptyObservable(scheduler) {
      this.scheduler = scheduler;
      __super__.call(this);
    }

    EmptyObservable.prototype.subscribeCore = function (observer) {
      var sink = new EmptySink(observer, this.scheduler);
      return sink.run();
    };

    function EmptySink(observer, scheduler) {
      this.observer = observer;
      this.scheduler = scheduler;
    }

    function scheduleItem(s, state) {
      state.onCompleted();
      return disposableEmpty;
    }

    EmptySink.prototype.run = function () {
      var state = this.observer;
      return this.scheduler === immediateScheduler ?
        scheduleItem(null, state) :
        this.scheduler.schedule(state, scheduleItem);
    };

    return EmptyObservable;
  }(ObservableBase));

  var EMPTY_OBSERVABLE = new EmptyObservable(immediateScheduler);

  /**
   *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
   *
   * @example
   *  var res = Rx.Observable.empty();
   *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);
   * @param {Scheduler} [scheduler] Scheduler to send the termination call on.
   * @returns {Observable} An observable sequence with no elements.
   */
  var observableEmpty = Observable.empty = function (scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    return scheduler === immediateScheduler ? EMPTY_OBSERVABLE : new EmptyObservable(scheduler);
  };

  var FromObservable = (function(__super__) {
    inherits(FromObservable, __super__);
    function FromObservable(iterable, fn, scheduler) {
      this._iterable = iterable;
      this._fn = fn;
      this._scheduler = scheduler;
      __super__.call(this);
    }

    function createScheduleMethod(o, it, fn) {
      return function loopRecursive(i, recurse) {
        var next = tryCatch(it.next).call(it);
        if (next === errorObj) { return o.onError(next.e); }
        if (next.done) { return o.onCompleted(); }

        var result = next.value;

        if (isFunction(fn)) {
          result = tryCatch(fn)(result, i);
          if (result === errorObj) { return o.onError(result.e); }
        }

        o.onNext(result);
        recurse(i + 1);
      };
    }

    FromObservable.prototype.subscribeCore = function (o) {
      var list = Object(this._iterable),
          it = getIterable(list);

      return this._scheduler.scheduleRecursive(0, createScheduleMethod(o, it, this._fn));
    };

    return FromObservable;
  }(ObservableBase));

  var maxSafeInteger = Math.pow(2, 53) - 1;

  function StringIterable(s) {
    this._s = s;
  }

  StringIterable.prototype[$iterator$] = function () {
    return new StringIterator(this._s);
  };

  function StringIterator(s) {
    this._s = s;
    this._l = s.length;
    this._i = 0;
  }

  StringIterator.prototype[$iterator$] = function () {
    return this;
  };

  StringIterator.prototype.next = function () {
    return this._i < this._l ? { done: false, value: this._s.charAt(this._i++) } : doneEnumerator;
  };

  function ArrayIterable(a) {
    this._a = a;
  }

  ArrayIterable.prototype[$iterator$] = function () {
    return new ArrayIterator(this._a);
  };

  function ArrayIterator(a) {
    this._a = a;
    this._l = toLength(a);
    this._i = 0;
  }

  ArrayIterator.prototype[$iterator$] = function () {
    return this;
  };

  ArrayIterator.prototype.next = function () {
    return this._i < this._l ? { done: false, value: this._a[this._i++] } : doneEnumerator;
  };

  function numberIsFinite(value) {
    return typeof value === 'number' && root.isFinite(value);
  }

  function isNan(n) {
    return n !== n;
  }

  function getIterable(o) {
    var i = o[$iterator$], it;
    if (!i && typeof o === 'string') {
      it = new StringIterable(o);
      return it[$iterator$]();
    }
    if (!i && o.length !== undefined) {
      it = new ArrayIterable(o);
      return it[$iterator$]();
    }
    if (!i) { throw new TypeError('Object is not iterable'); }
    return o[$iterator$]();
  }

  function sign(value) {
    var number = +value;
    if (number === 0) { return number; }
    if (isNaN(number)) { return number; }
    return number < 0 ? -1 : 1;
  }

  function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) { return 0; }
    if (len === 0 || !numberIsFinite(len)) { return len; }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) { return 0; }
    if (len > maxSafeInteger) { return maxSafeInteger; }
    return len;
  }

  /**
  * This method creates a new Observable sequence from an array-like or iterable object.
  * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.
  * @param {Function} [mapFn] Map function to call on every element of the array.
  * @param {Any} [thisArg] The context to use calling the mapFn if provided.
  * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.
  */
  var observableFrom = Observable.from = function (iterable, mapFn, thisArg, scheduler) {
    if (iterable == null) {
      throw new Error('iterable cannot be null.')
    }
    if (mapFn && !isFunction(mapFn)) {
      throw new Error('mapFn when provided must be a function');
    }
    if (mapFn) {
      var mapper = bindCallback(mapFn, thisArg, 2);
    }
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new FromObservable(iterable, mapper, scheduler);
  }

  var FromArrayObservable = (function(__super__) {
    inherits(FromArrayObservable, __super__);
    function FromArrayObservable(args, scheduler) {
      this._args = args;
      this._scheduler = scheduler;
      __super__.call(this);
    }

    function scheduleMethod(o, args) {
      var len = args.length;
      return function loopRecursive (i, recurse) {
        if (i < len) {
          o.onNext(args[i]);
          recurse(i + 1);
        } else {
          o.onCompleted();
        }
      };
    }

    FromArrayObservable.prototype.subscribeCore = function (o) {
      return this._scheduler.scheduleRecursive(0, scheduleMethod(o, this._args));
    };

    return FromArrayObservable;
  }(ObservableBase));

  /**
  *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.
  * @deprecated use Observable.from or Observable.of
  * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
  * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.
  */
  var observableFromArray = Observable.fromArray = function (array, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new FromArrayObservable(array, scheduler)
  };

  var NeverObservable = (function(__super__) {
    inherits(NeverObservable, __super__);
    function NeverObservable() {
      __super__.call(this);
    }

    NeverObservable.prototype.subscribeCore = function (observer) {
      return disposableEmpty;
    };

    return NeverObservable;
  }(ObservableBase));

  var NEVER_OBSERVABLE = new NeverObservable();

  /**
   * Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
   * @returns {Observable} An observable sequence whose observers will never get called.
   */
  var observableNever = Observable.never = function () {
    return NEVER_OBSERVABLE;
  };

  function observableOf (scheduler, array) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new FromArrayObservable(array, scheduler);
  }

  /**
  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
  */
  Observable.of = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return new FromArrayObservable(args, currentThreadScheduler);
  };

  /**
  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
  * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.
  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
  */
  Observable.ofWithScheduler = function (scheduler) {
    var len = arguments.length, args = new Array(len - 1);
    for(var i = 1; i < len; i++) { args[i - 1] = arguments[i]; }
    return new FromArrayObservable(args, scheduler);
  };

  var PairsObservable = (function(__super__) {
    inherits(PairsObservable, __super__);
    function PairsObservable(o, scheduler) {
      this._o = o;
      this._keys = Object.keys(o);
      this._scheduler = scheduler;
      __super__.call(this);
    }

    function scheduleMethod(o, obj, keys) {
      return function loopRecursive(i, recurse) {
        if (i < keys.length) {
          var key = keys[i];
          o.onNext([key, obj[key]]);
          recurse(i + 1);
        } else {
          o.onCompleted();
        }
      };
    }

    PairsObservable.prototype.subscribeCore = function (o) {
      return this._scheduler.scheduleRecursive(0, scheduleMethod(o, this._o, this._keys));
    };

    return PairsObservable;
  }(ObservableBase));

  /**
   * Convert an object into an observable sequence of [key, value] pairs.
   * @param {Object} obj The object to inspect.
   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
   * @returns {Observable} An observable sequence of [key, value] pairs from the object.
   */
  Observable.pairs = function (obj, scheduler) {
    scheduler || (scheduler = currentThreadScheduler);
    return new PairsObservable(obj, scheduler);
  };

    var RangeObservable = (function(__super__) {
    inherits(RangeObservable, __super__);
    function RangeObservable(start, count, scheduler) {
      this.start = start;
      this.rangeCount = count;
      this.scheduler = scheduler;
      __super__.call(this);
    }

    function loopRecursive(start, count, o) {
      return function loop (i, recurse) {
        if (i < count) {
          o.onNext(start + i);
          recurse(i + 1);
        } else {
          o.onCompleted();
        }
      };
    }

    RangeObservable.prototype.subscribeCore = function (o) {
      return this.scheduler.scheduleRecursive(
        0,
        loopRecursive(this.start, this.rangeCount, o)
      );
    };

    return RangeObservable;
  }(ObservableBase));

  /**
  *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
  * @param {Number} start The value of the first integer in the sequence.
  * @param {Number} count The number of sequential integers to generate.
  * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
  * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.
  */
  Observable.range = function (start, count, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new RangeObservable(start, count, scheduler);
  };

  var RepeatObservable = (function(__super__) {
    inherits(RepeatObservable, __super__);
    function RepeatObservable(value, repeatCount, scheduler) {
      this.value = value;
      this.repeatCount = repeatCount == null ? -1 : repeatCount;
      this.scheduler = scheduler;
      __super__.call(this);
    }

    RepeatObservable.prototype.subscribeCore = function (observer) {
      var sink = new RepeatSink(observer, this);
      return sink.run();
    };

    return RepeatObservable;
  }(ObservableBase));

  function RepeatSink(observer, parent) {
    this.observer = observer;
    this.parent = parent;
  }

  RepeatSink.prototype.run = function () {
    var observer = this.observer, value = this.parent.value;
    function loopRecursive(i, recurse) {
      if (i === -1 || i > 0) {
        observer.onNext(value);
        i > 0 && i--;
      }
      if (i === 0) { return observer.onCompleted(); }
      recurse(i);
    }

    return this.parent.scheduler.scheduleRecursive(this.parent.repeatCount, loopRecursive);
  };

  /**
   *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
   * @param {Mixed} value Element to repeat.
   * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.
   * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.
   * @returns {Observable} An observable sequence that repeats the given element the specified number of times.
   */
  Observable.repeat = function (value, repeatCount, scheduler) {
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    return new RepeatObservable(value, repeatCount, scheduler);
  };

  var JustObservable = (function(__super__) {
    inherits(JustObservable, __super__);
    function JustObservable(value, scheduler) {
      this._value = value;
      this._scheduler = scheduler;
      __super__.call(this);
    }

    JustObservable.prototype.subscribeCore = function (o) {
      var state = [this._value, o];
      return this._scheduler === immediateScheduler ?
        scheduleItem(null, state) :
        this._scheduler.schedule(state, scheduleItem);
    };

    function scheduleItem(s, state) {
      var value = state[0], observer = state[1];
      observer.onNext(value);
      observer.onCompleted();
      return disposableEmpty;
    }

    return JustObservable;
  }(ObservableBase));

  /**
   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
   *  There is an alias called 'just' or browsers <IE9.
   * @param {Mixed} value Single element in the resulting observable sequence.
   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.
   * @returns {Observable} An observable sequence containing the single specified element.
   */
  var observableReturn = Observable['return'] = Observable.just = function (value, scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    return new JustObservable(value, scheduler);
  };

  var ThrowObservable = (function(__super__) {
    inherits(ThrowObservable, __super__);
    function ThrowObservable(error, scheduler) {
      this._error = error;
      this._scheduler = scheduler;
      __super__.call(this);
    }

    ThrowObservable.prototype.subscribeCore = function (o) {
      var state = [this._error, o];
      return this._scheduler === immediateScheduler ?
        scheduleItem(null, state) :
        this._scheduler.schedule(state, scheduleItem);
    };

    function scheduleItem(s, state) {
      var e = state[0], o = state[1];
      o.onError(e);
      return disposableEmpty;
    }

    return ThrowObservable;
  }(ObservableBase));

  /**
   *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.
   *  There is an alias to this method called 'throwError' for browsers <IE9.
   * @param {Mixed} error An object used for the sequence's termination.
   * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.
   * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.
   */
  var observableThrow = Observable['throw'] = function (error, scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    return new ThrowObservable(error, scheduler);
  };

  var CatchObservable = (function (__super__) {
    inherits(CatchObservable, __super__);
    function CatchObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    CatchObservable.prototype.subscribeCore = function (o) {
      var d1 = new SingleAssignmentDisposable(), subscription = new SerialDisposable();
      subscription.setDisposable(d1);
      d1.setDisposable(this.source.subscribe(new CatchObserver(o, subscription, this._fn)));
      return subscription;
    };

    return CatchObservable;
  }(ObservableBase));

  var CatchObserver = (function(__super__) {
    inherits(CatchObserver, __super__);
    function CatchObserver(o, s, fn) {
      this._o = o;
      this._s = s;
      this._fn = fn;
      __super__.call(this);
    }

    CatchObserver.prototype.next = function (x) { this._o.onNext(x); };
    CatchObserver.prototype.completed = function () { return this._o.onCompleted(); };
    CatchObserver.prototype.error = function (e) {
      var result = tryCatch(this._fn)(e);
      if (result === errorObj) { return this._o.onError(result.e); }
      isPromise(result) && (result = observableFromPromise(result));

      var d = new SingleAssignmentDisposable();
      this._s.setDisposable(d);
      d.setDisposable(result.subscribe(this._o));
    };

    return CatchObserver;
  }(AbstractObserver));

  /**
   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.
   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.
   */
  observableProto['catch'] = function (handlerOrSecond) {
    return isFunction(handlerOrSecond) ? new CatchObservable(this, handlerOrSecond) : observableCatch([this, handlerOrSecond]);
  };

  /**
   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
   * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.
   * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.
   */
  var observableCatch = Observable['catch'] = function () {
    var items;
    if (Array.isArray(arguments[0])) {
      items = arguments[0];
    } else {
      var len = arguments.length;
      items = new Array(len);
      for(var i = 0; i < len; i++) { items[i] = arguments[i]; }
    }
    return enumerableOf(items).catchError();
  };

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
   * This can be in the form of an argument list of observables or an array.
   *
   * @example
   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  observableProto.combineLatest = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    if (Array.isArray(args[0])) {
      args[0].unshift(this);
    } else {
      args.unshift(this);
    }
    return combineLatest.apply(this, args);
  };

  function falseFactory() { return false; }
  function argumentsToArray() {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return args;
  }

  var CombineLatestObservable = (function(__super__) {
    inherits(CombineLatestObservable, __super__);
    function CombineLatestObservable(params, cb) {
      this._params = params;
      this._cb = cb;
      __super__.call(this);
    }

    CombineLatestObservable.prototype.subscribeCore = function(observer) {
      var len = this._params.length,
          subscriptions = new Array(len);

      var state = {
        hasValue: arrayInitialize(len, falseFactory),
        hasValueAll: false,
        isDone: arrayInitialize(len, falseFactory),
        values: new Array(len)
      };

      for (var i = 0; i < len; i++) {
        var source = this._params[i], sad = new SingleAssignmentDisposable();
        subscriptions[i] = sad;
        isPromise(source) && (source = observableFromPromise(source));
        sad.setDisposable(source.subscribe(new CombineLatestObserver(observer, i, this._cb, state)));
      }

      return new NAryDisposable(subscriptions);
    };

    return CombineLatestObservable;
  }(ObservableBase));

  var CombineLatestObserver = (function (__super__) {
    inherits(CombineLatestObserver, __super__);
    function CombineLatestObserver(o, i, cb, state) {
      this._o = o;
      this._i = i;
      this._cb = cb;
      this._state = state;
      __super__.call(this);
    }

    function notTheSame(i) {
      return function (x, j) {
        return j !== i;
      };
    }

    CombineLatestObserver.prototype.next = function (x) {
      this._state.values[this._i] = x;
      this._state.hasValue[this._i] = true;
      if (this._state.hasValueAll || (this._state.hasValueAll = this._state.hasValue.every(identity))) {
        var res = tryCatch(this._cb).apply(null, this._state.values);
        if (res === errorObj) { return this._o.onError(res.e); }
        this._o.onNext(res);
      } else if (this._state.isDone.filter(notTheSame(this._i)).every(identity)) {
        this._o.onCompleted();
      }
    };

    CombineLatestObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    CombineLatestObserver.prototype.completed = function () {
      this._state.isDone[this._i] = true;
      this._state.isDone.every(identity) && this._o.onCompleted();
    };

    return CombineLatestObserver;
  }(AbstractObserver));

  /**
  * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
  *
  * @example
  * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
  * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
  * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
  */
  var combineLatest = Observable.combineLatest = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
    Array.isArray(args[0]) && (args = args[0]);
    return new CombineLatestObservable(args, resultSelector);
  };

  /**
   * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.
   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
   */
  observableProto.concat = function () {
    for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
    args.unshift(this);
    return observableConcat.apply(null, args);
  };

  var ConcatObserver = (function(__super__) {
    inherits(ConcatObserver, __super__);
    function ConcatObserver(s, fn) {
      this._s = s;
      this._fn = fn;
      __super__.call(this);
    }

    ConcatObserver.prototype.next = function (x) { this._s.o.onNext(x); };
    ConcatObserver.prototype.error = function (e) { this._s.o.onError(e); };
    ConcatObserver.prototype.completed = function () { this._s.i++; this._fn(this._s); };

    return ConcatObserver;
  }(AbstractObserver));

  var ConcatObservable = (function(__super__) {
    inherits(ConcatObservable, __super__);
    function ConcatObservable(sources) {
      this._sources = sources;
      __super__.call(this);
    }

    function scheduleRecursive (state, recurse) {
      if (state.disposable.isDisposed) { return; }
      if (state.i === state.sources.length) { return state.o.onCompleted(); }

      // Check if promise
      var currentValue = state.sources[state.i];
      isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

      var d = new SingleAssignmentDisposable();
      state.subscription.setDisposable(d);
      d.setDisposable(currentValue.subscribe(new ConcatObserver(state, recurse)));
    }

    ConcatObservable.prototype.subscribeCore = function(o) {
      var subscription = new SerialDisposable();
      var disposable = disposableCreate(noop);
      var state = {
        o: o,
        i: 0,
        subscription: subscription,
        disposable: disposable,
        sources: this._sources
      };

      var cancelable = immediateScheduler.scheduleRecursive(state, scheduleRecursive);
      return new NAryDisposable([subscription, disposable, cancelable]);
    };

    return ConcatObservable;
  }(ObservableBase));

  /**
   * Concatenates all the observable sequences.
   * @param {Array | Arguments} args Arguments or an array to concat to the observable sequence.
   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
   */
  var observableConcat = Observable.concat = function () {
    var args;
    if (Array.isArray(arguments[0])) {
      args = arguments[0];
    } else {
      args = new Array(arguments.length);
      for(var i = 0, len = arguments.length; i < len; i++) { args[i] = arguments[i]; }
    }
    return new ConcatObservable(args);
  };

  /**
   * Concatenates an observable sequence of observable sequences.
   * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order.
   */
  observableProto.concatAll = function () {
    return this.merge(1);
  };

  var MergeObservable = (function (__super__) {
    inherits(MergeObservable, __super__);

    function MergeObservable(source, maxConcurrent) {
      this.source = source;
      this.maxConcurrent = maxConcurrent;
      __super__.call(this);
    }

    MergeObservable.prototype.subscribeCore = function(observer) {
      var g = new CompositeDisposable();
      g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));
      return g;
    };

    return MergeObservable;

  }(ObservableBase));

  var MergeObserver = (function (__super__) {
    function MergeObserver(o, max, g) {
      this.o = o;
      this.max = max;
      this.g = g;
      this.done = false;
      this.q = [];
      this.activeCount = 0;
      __super__.call(this);
    }

    inherits(MergeObserver, __super__);

    MergeObserver.prototype.handleSubscribe = function (xs) {
      var sad = new SingleAssignmentDisposable();
      this.g.add(sad);
      isPromise(xs) && (xs = observableFromPromise(xs));
      sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));
    };

    MergeObserver.prototype.next = function (innerSource) {
      if(this.activeCount < this.max) {
        this.activeCount++;
        this.handleSubscribe(innerSource);
      } else {
        this.q.push(innerSource);
      }
    };
    MergeObserver.prototype.error = function (e) { this.o.onError(e); };
    MergeObserver.prototype.completed = function () { this.done = true; this.activeCount === 0 && this.o.onCompleted(); };

    function InnerObserver(parent, sad) {
      this.parent = parent;
      this.sad = sad;
      __super__.call(this);
    }

    inherits(InnerObserver, __super__);

    InnerObserver.prototype.next = function (x) { this.parent.o.onNext(x); };
    InnerObserver.prototype.error = function (e) { this.parent.o.onError(e); };
    InnerObserver.prototype.completed = function () {
      this.parent.g.remove(this.sad);
      if (this.parent.q.length > 0) {
        this.parent.handleSubscribe(this.parent.q.shift());
      } else {
        this.parent.activeCount--;
        this.parent.done && this.parent.activeCount === 0 && this.parent.o.onCompleted();
      }
    };

    return MergeObserver;
  }(AbstractObserver));

  /**
  * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
  * Or merges two observable sequences into a single observable sequence.
  * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.
  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
  */
  observableProto.merge = function (maxConcurrentOrOther) {
    return typeof maxConcurrentOrOther !== 'number' ?
      observableMerge(this, maxConcurrentOrOther) :
      new MergeObservable(this, maxConcurrentOrOther);
  };

  /**
   * Merges all the observable sequences into a single observable sequence.
   * The scheduler is optional and if not specified, the immediate scheduler is used.
   * @returns {Observable} The observable sequence that merges the elements of the observable sequences.
   */
  var observableMerge = Observable.merge = function () {
    var scheduler, sources = [], i, len = arguments.length;
    if (!arguments[0]) {
      scheduler = immediateScheduler;
      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
    } else if (isScheduler(arguments[0])) {
      scheduler = arguments[0];
      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
    } else {
      scheduler = immediateScheduler;
      for(i = 0; i < len; i++) { sources.push(arguments[i]); }
    }
    if (Array.isArray(sources[0])) {
      sources = sources[0];
    }
    return observableOf(scheduler, sources).mergeAll();
  };

  var CompositeError = Rx.CompositeError = function(errors) {
    this.innerErrors = errors;
    this.message = 'This contains multiple errors. Check the innerErrors';
    Error.call(this);
  };
  CompositeError.prototype = Object.create(Error.prototype);
  CompositeError.prototype.name = 'CompositeError';

  var MergeDelayErrorObservable = (function(__super__) {
    inherits(MergeDelayErrorObservable, __super__);
    function MergeDelayErrorObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    MergeDelayErrorObservable.prototype.subscribeCore = function (o) {
      var group = new CompositeDisposable(),
        m = new SingleAssignmentDisposable(),
        state = { isStopped: false, errors: [], o: o };

      group.add(m);
      m.setDisposable(this.source.subscribe(new MergeDelayErrorObserver(group, state)));

      return group;
    };

    return MergeDelayErrorObservable;
  }(ObservableBase));

  var MergeDelayErrorObserver = (function(__super__) {
    inherits(MergeDelayErrorObserver, __super__);
    function MergeDelayErrorObserver(group, state) {
      this._group = group;
      this._state = state;
      __super__.call(this);
    }

    function setCompletion(o, errors) {
      if (errors.length === 0) {
        o.onCompleted();
      } else if (errors.length === 1) {
        o.onError(errors[0]);
      } else {
        o.onError(new CompositeError(errors));
      }
    }

    MergeDelayErrorObserver.prototype.next = function (x) {
      var inner = new SingleAssignmentDisposable();
      this._group.add(inner);

      // Check for promises support
      isPromise(x) && (x = observableFromPromise(x));
      inner.setDisposable(x.subscribe(new InnerObserver(inner, this._group, this._state)));
    };

    MergeDelayErrorObserver.prototype.error = function (e) {
      this._state.errors.push(e);
      this._state.isStopped = true;
      this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
    };

    MergeDelayErrorObserver.prototype.completed = function () {
      this._state.isStopped = true;
      this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
    };

    inherits(InnerObserver, __super__);
    function InnerObserver(inner, group, state) {
      this._inner = inner;
      this._group = group;
      this._state = state;
      __super__.call(this);
    }

    InnerObserver.prototype.next = function (x) { this._state.o.onNext(x); };
    InnerObserver.prototype.error = function (e) {
      this._state.errors.push(e);
      this._group.remove(this._inner);
      this._state.isStopped && this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
    };
    InnerObserver.prototype.completed = function () {
      this._group.remove(this._inner);
      this._state.isStopped && this._group.length === 1 && setCompletion(this._state.o, this._state.errors);
    };

    return MergeDelayErrorObserver;
  }(AbstractObserver));

  /**
  * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to
  * receive all successfully emitted items from all of the source Observables without being interrupted by
  * an error notification from one of them.
  *
  * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an
  * error via the Observer's onError, mergeDelayError will refrain from propagating that
  * error notification until all of the merged Observables have finished emitting items.
  * @param {Array | Arguments} args Arguments or an array to merge.
  * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable
  */
  Observable.mergeDelayError = function() {
    var args;
    if (Array.isArray(arguments[0])) {
      args = arguments[0];
    } else {
      var len = arguments.length;
      args = new Array(len);
      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    }
    var source = observableOf(null, args);
    return new MergeDelayErrorObservable(source);
  };

  var MergeAllObservable = (function (__super__) {
    inherits(MergeAllObservable, __super__);

    function MergeAllObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    MergeAllObservable.prototype.subscribeCore = function (o) {
      var g = new CompositeDisposable(), m = new SingleAssignmentDisposable();
      g.add(m);
      m.setDisposable(this.source.subscribe(new MergeAllObserver(o, g)));
      return g;
    };

    return MergeAllObservable;
  }(ObservableBase));

  var MergeAllObserver = (function (__super__) {
    function MergeAllObserver(o, g) {
      this.o = o;
      this.g = g;
      this.done = false;
      __super__.call(this);
    }

    inherits(MergeAllObserver, __super__);

    MergeAllObserver.prototype.next = function(innerSource) {
      var sad = new SingleAssignmentDisposable();
      this.g.add(sad);
      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
      sad.setDisposable(innerSource.subscribe(new InnerObserver(this, sad)));
    };

    MergeAllObserver.prototype.error = function (e) {
      this.o.onError(e);
    };

    MergeAllObserver.prototype.completed = function () {
      this.done = true;
      this.g.length === 1 && this.o.onCompleted();
    };

    function InnerObserver(parent, sad) {
      this.parent = parent;
      this.sad = sad;
      __super__.call(this);
    }

    inherits(InnerObserver, __super__);

    InnerObserver.prototype.next = function (x) {
      this.parent.o.onNext(x);
    };
    InnerObserver.prototype.error = function (e) {
      this.parent.o.onError(e);
    };
    InnerObserver.prototype.completed = function () {
      this.parent.g.remove(this.sad);
      this.parent.done && this.parent.g.length === 1 && this.parent.o.onCompleted();
    };

    return MergeAllObserver;
  }(AbstractObserver));

  /**
  * Merges an observable sequence of observable sequences into an observable sequence.
  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
  */
  observableProto.mergeAll = function () {
    return new MergeAllObservable(this);
  };

  var SkipUntilObservable = (function(__super__) {
    inherits(SkipUntilObservable, __super__);

    function SkipUntilObservable(source, other) {
      this._s = source;
      this._o = isPromise(other) ? observableFromPromise(other) : other;
      this._open = false;
      __super__.call(this);
    }

    SkipUntilObservable.prototype.subscribeCore = function(o) {
      var leftSubscription = new SingleAssignmentDisposable();
      leftSubscription.setDisposable(this._s.subscribe(new SkipUntilSourceObserver(o, this)));

      isPromise(this._o) && (this._o = observableFromPromise(this._o));

      var rightSubscription = new SingleAssignmentDisposable();
      rightSubscription.setDisposable(this._o.subscribe(new SkipUntilOtherObserver(o, this, rightSubscription)));

      return new BinaryDisposable(leftSubscription, rightSubscription);
    };

    return SkipUntilObservable;
  }(ObservableBase));

  var SkipUntilSourceObserver = (function(__super__) {
    inherits(SkipUntilSourceObserver, __super__);
    function SkipUntilSourceObserver(o, p) {
      this._o = o;
      this._p = p;
      __super__.call(this);
    }

    SkipUntilSourceObserver.prototype.next = function (x) {
      this._p._open && this._o.onNext(x);
    };

    SkipUntilSourceObserver.prototype.error = function (err) {
      this._o.onError(err);
    };

    SkipUntilSourceObserver.prototype.onCompleted = function () {
      this._p._open && this._o.onCompleted();
    };

    return SkipUntilSourceObserver;
  }(AbstractObserver));

  var SkipUntilOtherObserver = (function(__super__) {
    inherits(SkipUntilOtherObserver, __super__);
    function SkipUntilOtherObserver(o, p, r) {
      this._o = o;
      this._p = p;
      this._r = r;
      __super__.call(this);
    }

    SkipUntilOtherObserver.prototype.next = function () {
      this._p._open = true;
      this._r.dispose();
    };

    SkipUntilOtherObserver.prototype.error = function (err) {
      this._o.onError(err);
    };

    SkipUntilOtherObserver.prototype.onCompleted = function () {
      this._r.dispose();
    };

    return SkipUntilOtherObserver;
  }(AbstractObserver));

  /**
   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.
   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.
   */
  observableProto.skipUntil = function (other) {
    return new SkipUntilObservable(this, other);
  };

  var SwitchObservable = (function(__super__) {
    inherits(SwitchObservable, __super__);
    function SwitchObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    SwitchObservable.prototype.subscribeCore = function (o) {
      var inner = new SerialDisposable(), s = this.source.subscribe(new SwitchObserver(o, inner));
      return new BinaryDisposable(s, inner);
    };

    inherits(SwitchObserver, AbstractObserver);
    function SwitchObserver(o, inner) {
      this.o = o;
      this.inner = inner;
      this.stopped = false;
      this.latest = 0;
      this.hasLatest = false;
      AbstractObserver.call(this);
    }

    SwitchObserver.prototype.next = function (innerSource) {
      var d = new SingleAssignmentDisposable(), id = ++this.latest;
      this.hasLatest = true;
      this.inner.setDisposable(d);
      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
      d.setDisposable(innerSource.subscribe(new InnerObserver(this, id)));
    };

    SwitchObserver.prototype.error = function (e) {
      this.o.onError(e);
    };

    SwitchObserver.prototype.completed = function () {
      this.stopped = true;
      !this.hasLatest && this.o.onCompleted();
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(parent, id) {
      this.parent = parent;
      this.id = id;
      AbstractObserver.call(this);
    }
    InnerObserver.prototype.next = function (x) {
      this.parent.latest === this.id && this.parent.o.onNext(x);
    };

    InnerObserver.prototype.error = function (e) {
      this.parent.latest === this.id && this.parent.o.onError(e);
    };

    InnerObserver.prototype.completed = function () {
      if (this.parent.latest === this.id) {
        this.parent.hasLatest = false;
        this.parent.stopped && this.parent.o.onCompleted();
      }
    };

    return SwitchObservable;
  }(ObservableBase));

  /**
  * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
  * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.
  */
  observableProto['switch'] = observableProto.switchLatest = function () {
    return new SwitchObservable(this);
  };

  var TakeUntilObservable = (function(__super__) {
    inherits(TakeUntilObservable, __super__);

    function TakeUntilObservable(source, other) {
      this.source = source;
      this.other = isPromise(other) ? observableFromPromise(other) : other;
      __super__.call(this);
    }

    TakeUntilObservable.prototype.subscribeCore = function(o) {
      return new BinaryDisposable(
        this.source.subscribe(o),
        this.other.subscribe(new TakeUntilObserver(o))
      );
    };

    return TakeUntilObservable;
  }(ObservableBase));

  var TakeUntilObserver = (function(__super__) {
    inherits(TakeUntilObserver, __super__);
    function TakeUntilObserver(o) {
      this._o = o;
      __super__.call(this);
    }

    TakeUntilObserver.prototype.next = function () {
      this._o.onCompleted();
    };

    TakeUntilObserver.prototype.error = function (err) {
      this._o.onError(err);
    };

    TakeUntilObserver.prototype.onCompleted = noop;

    return TakeUntilObserver;
  }(AbstractObserver));

  /**
   * Returns the values from the source observable sequence until the other observable sequence produces a value.
   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.
   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.
   */
  observableProto.takeUntil = function (other) {
    return new TakeUntilObservable(this, other);
  };

  function falseFactory() { return false; }
  function argumentsToArray() {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return args;
  }

  var WithLatestFromObservable = (function(__super__) {
    inherits(WithLatestFromObservable, __super__);
    function WithLatestFromObservable(source, sources, resultSelector) {
      this._s = source;
      this._ss = sources;
      this._cb = resultSelector;
      __super__.call(this);
    }

    WithLatestFromObservable.prototype.subscribeCore = function (o) {
      var len = this._ss.length;
      var state = {
        hasValue: arrayInitialize(len, falseFactory),
        hasValueAll: false,
        values: new Array(len)
      };

      var n = this._ss.length, subscriptions = new Array(n + 1);
      for (var i = 0; i < n; i++) {
        var other = this._ss[i], sad = new SingleAssignmentDisposable();
        isPromise(other) && (other = observableFromPromise(other));
        sad.setDisposable(other.subscribe(new WithLatestFromOtherObserver(o, i, state)));
        subscriptions[i] = sad;
      }

      var outerSad = new SingleAssignmentDisposable();
      outerSad.setDisposable(this._s.subscribe(new WithLatestFromSourceObserver(o, this._cb, state)));
      subscriptions[n] = outerSad;

      return new NAryDisposable(subscriptions);
    };

    return WithLatestFromObservable;
  }(ObservableBase));

  var WithLatestFromOtherObserver = (function (__super__) {
    inherits(WithLatestFromOtherObserver, __super__);
    function WithLatestFromOtherObserver(o, i, state) {
      this._o = o;
      this._i = i;
      this._state = state;
      __super__.call(this);
    }

    WithLatestFromOtherObserver.prototype.next = function (x) {
      this._state.values[this._i] = x;
      this._state.hasValue[this._i] = true;
      this._state.hasValueAll = this._state.hasValue.every(identity);
    };

    WithLatestFromOtherObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    WithLatestFromOtherObserver.prototype.completed = noop;

    return WithLatestFromOtherObserver;
  }(AbstractObserver));

  var WithLatestFromSourceObserver = (function (__super__) {
    inherits(WithLatestFromSourceObserver, __super__);
    function WithLatestFromSourceObserver(o, cb, state) {
      this._o = o;
      this._cb = cb;
      this._state = state;
      __super__.call(this);
    }

    WithLatestFromSourceObserver.prototype.next = function (x) {
      var allValues = [x].concat(this._state.values);
      if (!this._state.hasValueAll) { return; }
      var res = tryCatch(this._cb).apply(null, allValues);
      if (res === errorObj) { return this._o.onError(res.e); }
      this._o.onNext(res);
    };

    WithLatestFromSourceObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    WithLatestFromSourceObserver.prototype.completed = function () {
      this._o.onCompleted();
    };

    return WithLatestFromSourceObserver;
  }(AbstractObserver));

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  observableProto.withLatestFrom = function () {
    if (arguments.length === 0) { throw new Error('invalid arguments'); }

    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
    Array.isArray(args[0]) && (args = args[0]);

    return new WithLatestFromObservable(this, args, resultSelector);
  };

  function falseFactory() { return false; }
  function emptyArrayFactory() { return []; }

  var ZipObservable = (function(__super__) {
    inherits(ZipObservable, __super__);
    function ZipObservable(sources, resultSelector) {
      this._s = sources;
      this._cb = resultSelector;
      __super__.call(this);
    }

    ZipObservable.prototype.subscribeCore = function(observer) {
      var n = this._s.length,
          subscriptions = new Array(n),
          done = arrayInitialize(n, falseFactory),
          q = arrayInitialize(n, emptyArrayFactory);

      for (var i = 0; i < n; i++) {
        var source = this._s[i], sad = new SingleAssignmentDisposable();
        subscriptions[i] = sad;
        isPromise(source) && (source = observableFromPromise(source));
        sad.setDisposable(source.subscribe(new ZipObserver(observer, i, this, q, done)));
      }

      return new NAryDisposable(subscriptions);
    };

    return ZipObservable;
  }(ObservableBase));

  var ZipObserver = (function (__super__) {
    inherits(ZipObserver, __super__);
    function ZipObserver(o, i, p, q, d) {
      this._o = o;
      this._i = i;
      this._p = p;
      this._q = q;
      this._d = d;
      __super__.call(this);
    }

    function notEmpty(x) { return x.length > 0; }
    function shiftEach(x) { return x.shift(); }
    function notTheSame(i) {
      return function (x, j) {
        return j !== i;
      };
    }

    ZipObserver.prototype.next = function (x) {
      this._q[this._i].push(x);
      if (this._q.every(notEmpty)) {
        var queuedValues = this._q.map(shiftEach);
        var res = tryCatch(this._p._cb).apply(null, queuedValues);
        if (res === errorObj) { return this._o.onError(res.e); }
        this._o.onNext(res);
      } else if (this._d.filter(notTheSame(this._i)).every(identity)) {
        this._o.onCompleted();
      }
    };

    ZipObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    ZipObserver.prototype.completed = function () {
      this._d[this._i] = true;
      this._d.every(identity) && this._o.onCompleted();
    };

    return ZipObserver;
  }(AbstractObserver));

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
   * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
   */
  observableProto.zip = function () {
    if (arguments.length === 0) { throw new Error('invalid arguments'); }

    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;
    Array.isArray(args[0]) && (args = args[0]);

    var parent = this;
    args.unshift(parent);

    return new ZipObservable(args, resultSelector);
  };

  /**
   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
   * @param arguments Observable sources.
   * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.
   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
   */
  Observable.zip = function () {
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    if (Array.isArray(args[0])) {
      args = isFunction(args[1]) ? args[0].concat(args[1]) : args[0];
    }
    var first = args.shift();
    return first.zip.apply(first, args);
  };

function falseFactory() { return false; }
function emptyArrayFactory() { return []; }
function argumentsToArray() {
  var len = arguments.length, args = new Array(len);
  for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
  return args;
}

var ZipIterableObservable = (function(__super__) {
  inherits(ZipIterableObservable, __super__);
  function ZipIterableObservable(sources, cb) {
    this.sources = sources;
    this._cb = cb;
    __super__.call(this);
  }

  ZipIterableObservable.prototype.subscribeCore = function (o) {
    var sources = this.sources, len = sources.length, subscriptions = new Array(len);

    var state = {
      q: arrayInitialize(len, emptyArrayFactory),
      done: arrayInitialize(len, falseFactory),
      cb: this._cb,
      o: o
    };

    for (var i = 0; i < len; i++) {
      (function (i) {
        var source = sources[i], sad = new SingleAssignmentDisposable();
        (isArrayLike(source) || isIterable(source)) && (source = observableFrom(source));

        subscriptions[i] = sad;
        sad.setDisposable(source.subscribe(new ZipIterableObserver(state, i)));
      }(i));
    }

    return new NAryDisposable(subscriptions);
  };

  return ZipIterableObservable;
}(ObservableBase));

var ZipIterableObserver = (function (__super__) {
  inherits(ZipIterableObserver, __super__);
  function ZipIterableObserver(s, i) {
    this._s = s;
    this._i = i;
    __super__.call(this);
  }

  function notEmpty(x) { return x.length > 0; }
  function shiftEach(x) { return x.shift(); }
  function notTheSame(i) {
    return function (x, j) {
      return j !== i;
    };
  }

  ZipIterableObserver.prototype.next = function (x) {
    this._s.q[this._i].push(x);
    if (this._s.q.every(notEmpty)) {
      var queuedValues = this._s.q.map(shiftEach),
          res = tryCatch(this._s.cb).apply(null, queuedValues);
      if (res === errorObj) { return this._s.o.onError(res.e); }
      this._s.o.onNext(res);
    } else if (this._s.done.filter(notTheSame(this._i)).every(identity)) {
      this._s.o.onCompleted();
    }
  };

  ZipIterableObserver.prototype.error = function (e) { this._s.o.onError(e); };

  ZipIterableObserver.prototype.completed = function () {
    this._s.done[this._i] = true;
    this._s.done.every(identity) && this._s.o.onCompleted();
  };

  return ZipIterableObserver;
}(AbstractObserver));

/**
 * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
 * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
 * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
 */
observableProto.zipIterable = function () {
  if (arguments.length === 0) { throw new Error('invalid arguments'); }

  var len = arguments.length, args = new Array(len);
  for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
  var resultSelector = isFunction(args[len - 1]) ? args.pop() : argumentsToArray;

  var parent = this;
  args.unshift(parent);
  return new ZipIterableObservable(args, resultSelector);
};

  function asObservable(source) {
    return function subscribe(o) { return source.subscribe(o); };
  }

  /**
   *  Hides the identity of an observable sequence.
   * @returns {Observable} An observable sequence that hides the identity of the source sequence.
   */
  observableProto.asObservable = function () {
    return new AnonymousObservable(asObservable(this), this);
  };

  var DematerializeObservable = (function (__super__) {
    inherits(DematerializeObservable, __super__);
    function DematerializeObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    DematerializeObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new DematerializeObserver(o));
    };

    return DematerializeObservable;
  }(ObservableBase));

  var DematerializeObserver = (function (__super__) {
    inherits(DematerializeObserver, __super__);

    function DematerializeObserver(o) {
      this._o = o;
      __super__.call(this);
    }

    DematerializeObserver.prototype.next = function (x) { x.accept(this._o); };
    DematerializeObserver.prototype.error = function (e) { this._o.onError(e); };
    DematerializeObserver.prototype.completed = function () { this._o.onCompleted(); };

    return DematerializeObserver;
  }(AbstractObserver));

  /**
   * Dematerializes the explicit notification values of an observable sequence as implicit notifications.
   * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.
   */
  observableProto.dematerialize = function () {
    return new DematerializeObservable(this);
  };

  var DistinctUntilChangedObservable = (function(__super__) {
    inherits(DistinctUntilChangedObservable, __super__);
    function DistinctUntilChangedObservable(source, keyFn, comparer) {
      this.source = source;
      this.keyFn = keyFn;
      this.comparer = comparer;
      __super__.call(this);
    }

    DistinctUntilChangedObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new DistinctUntilChangedObserver(o, this.keyFn, this.comparer));
    };

    return DistinctUntilChangedObservable;
  }(ObservableBase));

  var DistinctUntilChangedObserver = (function(__super__) {
    inherits(DistinctUntilChangedObserver, __super__);
    function DistinctUntilChangedObserver(o, keyFn, comparer) {
      this.o = o;
      this.keyFn = keyFn;
      this.comparer = comparer;
      this.hasCurrentKey = false;
      this.currentKey = null;
      __super__.call(this);
    }

    DistinctUntilChangedObserver.prototype.next = function (x) {
      var key = x, comparerEquals;
      if (isFunction(this.keyFn)) {
        key = tryCatch(this.keyFn)(x);
        if (key === errorObj) { return this.o.onError(key.e); }
      }
      if (this.hasCurrentKey) {
        comparerEquals = tryCatch(this.comparer)(this.currentKey, key);
        if (comparerEquals === errorObj) { return this.o.onError(comparerEquals.e); }
      }
      if (!this.hasCurrentKey || !comparerEquals) {
        this.hasCurrentKey = true;
        this.currentKey = key;
        this.o.onNext(x);
      }
    };
    DistinctUntilChangedObserver.prototype.error = function(e) {
      this.o.onError(e);
    };
    DistinctUntilChangedObserver.prototype.completed = function () {
      this.o.onCompleted();
    };

    return DistinctUntilChangedObserver;
  }(AbstractObserver));

  /**
  *  Returns an observable sequence that contains only distinct contiguous elements according to the keyFn and the comparer.
  * @param {Function} [keyFn] A function to compute the comparison key for each element. If not provided, it projects the value.
  * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
  * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.
  */
  observableProto.distinctUntilChanged = function (keyFn, comparer) {
    comparer || (comparer = defaultComparer);
    return new DistinctUntilChangedObservable(this, keyFn, comparer);
  };

  var TapObservable = (function(__super__) {
    inherits(TapObservable,__super__);
    function TapObservable(source, observerOrOnNext, onError, onCompleted) {
      this.source = source;
      this._oN = observerOrOnNext;
      this._oE = onError;
      this._oC = onCompleted;
      __super__.call(this);
    }

    TapObservable.prototype.subscribeCore = function(o) {
      return this.source.subscribe(new InnerObserver(o, this));
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(o, p) {
      this.o = o;
      this.t = !p._oN || isFunction(p._oN) ?
        observerCreate(p._oN || noop, p._oE || noop, p._oC || noop) :
        p._oN;
      this.isStopped = false;
      AbstractObserver.call(this);
    }
    InnerObserver.prototype.next = function(x) {
      var res = tryCatch(this.t.onNext).call(this.t, x);
      if (res === errorObj) { this.o.onError(res.e); }
      this.o.onNext(x);
    };
    InnerObserver.prototype.error = function(err) {
      var res = tryCatch(this.t.onError).call(this.t, err);
      if (res === errorObj) { return this.o.onError(res.e); }
      this.o.onError(err);
    };
    InnerObserver.prototype.completed = function() {
      var res = tryCatch(this.t.onCompleted).call(this.t);
      if (res === errorObj) { return this.o.onError(res.e); }
      this.o.onCompleted();
    };

    return TapObservable;
  }(ObservableBase));

  /**
  *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
  * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an o.
  * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
  * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
  * @returns {Observable} The source sequence with the side-effecting behavior applied.
  */
  observableProto['do'] = observableProto.tap = observableProto.doAction = function (observerOrOnNext, onError, onCompleted) {
    return new TapObservable(this, observerOrOnNext, onError, onCompleted);
  };

  /**
  *  Invokes an action for each element in the observable sequence.
  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
  * @param {Function} onNext Action to invoke for each element in the observable sequence.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} The source sequence with the side-effecting behavior applied.
  */
  observableProto.doOnNext = observableProto.tapOnNext = function (onNext, thisArg) {
    return this.tap(typeof thisArg !== 'undefined' ? function (x) { onNext.call(thisArg, x); } : onNext);
  };

  /**
  *  Invokes an action upon exceptional termination of the observable sequence.
  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
  * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} The source sequence with the side-effecting behavior applied.
  */
  observableProto.doOnError = observableProto.tapOnError = function (onError, thisArg) {
    return this.tap(noop, typeof thisArg !== 'undefined' ? function (e) { onError.call(thisArg, e); } : onError);
  };

  /**
  *  Invokes an action upon graceful termination of the observable sequence.
  *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
  * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} The source sequence with the side-effecting behavior applied.
  */
  observableProto.doOnCompleted = observableProto.tapOnCompleted = function (onCompleted, thisArg) {
    return this.tap(noop, null, typeof thisArg !== 'undefined' ? function () { onCompleted.call(thisArg); } : onCompleted);
  };

  var FinallyObservable = (function (__super__) {
    inherits(FinallyObservable, __super__);
    function FinallyObservable(source, fn, thisArg) {
      this.source = source;
      this._fn = bindCallback(fn, thisArg, 0);
      __super__.call(this);
    }

    FinallyObservable.prototype.subscribeCore = function (o) {
      var d = tryCatch(this.source.subscribe).call(this.source, o);
      if (d === errorObj) {
        this._fn();
        thrower(d.e);
      }

      return new FinallyDisposable(d, this._fn);
    };

    function FinallyDisposable(s, fn) {
      this.isDisposed = false;
      this._s = s;
      this._fn = fn;
    }
    FinallyDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        var res = tryCatch(this._s.dispose).call(this._s);
        this._fn();
        res === errorObj && thrower(res.e);
      }
    };

    return FinallyObservable;

  }(ObservableBase));

  /**
   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.
   * @returns {Observable} Source sequence with the action-invoking termination behavior applied.
   */
  observableProto['finally'] = function (action, thisArg) {
    return new FinallyObservable(this, action, thisArg);
  };

  var IgnoreElementsObservable = (function(__super__) {
    inherits(IgnoreElementsObservable, __super__);

    function IgnoreElementsObservable(source) {
      this.source = source;
      __super__.call(this);
    }

    IgnoreElementsObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new InnerObserver(o));
    };

    function InnerObserver(o) {
      this.o = o;
      this.isStopped = false;
    }
    InnerObserver.prototype.onNext = noop;
    InnerObserver.prototype.onError = function (err) {
      if(!this.isStopped) {
        this.isStopped = true;
        this.o.onError(err);
      }
    };
    InnerObserver.prototype.onCompleted = function () {
      if(!this.isStopped) {
        this.isStopped = true;
        this.o.onCompleted();
      }
    };
    InnerObserver.prototype.dispose = function() { this.isStopped = true; };
    InnerObserver.prototype.fail = function (e) {
      if (!this.isStopped) {
        this.isStopped = true;
        this.observer.onError(e);
        return true;
      }

      return false;
    };

    return IgnoreElementsObservable;
  }(ObservableBase));

  /**
   *  Ignores all elements in an observable sequence leaving only the termination messages.
   * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.
   */
  observableProto.ignoreElements = function () {
    return new IgnoreElementsObservable(this);
  };

  var MaterializeObservable = (function (__super__) {
    inherits(MaterializeObservable, __super__);
    function MaterializeObservable(source, fn) {
      this.source = source;
      __super__.call(this);
    }

    MaterializeObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new MaterializeObserver(o));
    };

    return MaterializeObservable;
  }(ObservableBase));

  var MaterializeObserver = (function (__super__) {
    inherits(MaterializeObserver, __super__);

    function MaterializeObserver(o) {
      this._o = o;
      __super__.call(this);
    }

    MaterializeObserver.prototype.next = function (x) { this._o.onNext(notificationCreateOnNext(x)) };
    MaterializeObserver.prototype.error = function (e) { this._o.onNext(notificationCreateOnError(e)); this._o.onCompleted(); };
    MaterializeObserver.prototype.completed = function () { this._o.onNext(notificationCreateOnCompleted()); this._o.onCompleted(); };

    return MaterializeObserver;
  }(AbstractObserver));

  /**
   *  Materializes the implicit notifications of an observable sequence as explicit notification values.
   * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.
   */
  observableProto.materialize = function () {
    return new MaterializeObservable(this);
  };

  /**
   *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.
   * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.
   * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.
   */
  observableProto.repeat = function (repeatCount) {
    return enumerableRepeat(this, repeatCount).concat();
  };

  /**
   *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.
   *  Note if you encounter an error and want it to retry once, then you must use .retry(2);
   *
   * @example
   *  var res = retried = retry.repeat();
   *  var res = retried = retry.repeat(2);
   * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.
   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
   */
  observableProto.retry = function (retryCount) {
    return enumerableRepeat(this, retryCount).catchError();
  };

  function repeat(value) {
    return {
      '@@iterator': function () {
        return {
          next: function () {
            return { done: false, value: value };
          }
        };
      }
    };
  }

  var RetryWhenObservable = (function(__super__) {
    function createDisposable(state) {
      return {
        isDisposed: false,
        dispose: function () {
          if (!this.isDisposed) {
            this.isDisposed = true;
            state.isDisposed = true;
          }
        }
      };
    }

    function RetryWhenObservable(source, notifier) {
      this.source = source;
      this._notifier = notifier;
      __super__.call(this);
    }

    inherits(RetryWhenObservable, __super__);

    RetryWhenObservable.prototype.subscribeCore = function (o) {
      var exceptions = new Subject(),
        notifier = new Subject(),
        handled = this._notifier(exceptions),
        notificationDisposable = handled.subscribe(notifier);

      var e = this.source['@@iterator']();

      var state = { isDisposed: false },
        lastError,
        subscription = new SerialDisposable();
      var cancelable = currentThreadScheduler.scheduleRecursive(null, function (_, recurse) {
        if (state.isDisposed) { return; }
        var currentItem = e.next();

        if (currentItem.done) {
          if (lastError) {
            o.onError(lastError);
          } else {
            o.onCompleted();
          }
          return;
        }

        // Check if promise
        var currentValue = currentItem.value;
        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

        var outer = new SingleAssignmentDisposable();
        var inner = new SingleAssignmentDisposable();
        subscription.setDisposable(new BinaryDisposable(inner, outer));
        outer.setDisposable(currentValue.subscribe(
          function(x) { o.onNext(x); },
          function (exn) {
            inner.setDisposable(notifier.subscribe(recurse, function(ex) {
              o.onError(ex);
            }, function() {
              o.onCompleted();
            }));

            exceptions.onNext(exn);
            outer.dispose();
          },
          function() { o.onCompleted(); }));
      });

      return new NAryDisposable([notificationDisposable, subscription, cancelable, createDisposable(state)]);
    };

    return RetryWhenObservable;
  }(ObservableBase));

  observableProto.retryWhen = function (notifier) {
    return new RetryWhenObservable(repeat(this), notifier);
  };

  function repeat(value) {
    return {
      '@@iterator': function () {
        return {
          next: function () {
            return { done: false, value: value };
          }
        };
      }
    };
  }

  var RepeatWhenObservable = (function(__super__) {
    function createDisposable(state) {
      return {
        isDisposed: false,
        dispose: function () {
          if (!this.isDisposed) {
            this.isDisposed = true;
            state.isDisposed = true;
          }
        }
      };
    }

    function RepeatWhenObservable(source, notifier) {
      this.source = source;
      this._notifier = notifier;
      __super__.call(this);
    }

    inherits(RepeatWhenObservable, __super__);

    RepeatWhenObservable.prototype.subscribeCore = function (o) {
      var completions = new Subject(),
        notifier = new Subject(),
        handled = this._notifier(completions),
        notificationDisposable = handled.subscribe(notifier);

      var e = this.source['@@iterator']();

      var state = { isDisposed: false },
        lastError,
        subscription = new SerialDisposable();
      var cancelable = currentThreadScheduler.scheduleRecursive(null, function (_, recurse) {
        if (state.isDisposed) { return; }
        var currentItem = e.next();

        if (currentItem.done) {
          if (lastError) {
            o.onError(lastError);
          } else {
            o.onCompleted();
          }
          return;
        }

        // Check if promise
        var currentValue = currentItem.value;
        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

        var outer = new SingleAssignmentDisposable();
        var inner = new SingleAssignmentDisposable();
        subscription.setDisposable(new BinaryDisposable(inner, outer));
        outer.setDisposable(currentValue.subscribe(
          function(x) { o.onNext(x); },
          function (exn) { o.onError(exn); },
          function() {
            inner.setDisposable(notifier.subscribe(recurse, function(ex) {
              o.onError(ex);
            }, function() {
              o.onCompleted();
            }));

            completions.onNext(null);
            outer.dispose();
          }));
      });

      return new NAryDisposable([notificationDisposable, subscription, cancelable, createDisposable(state)]);
    };

    return RepeatWhenObservable;
  }(ObservableBase));

  observableProto.repeatWhen = function (notifier) {
    return new RepeatWhenObservable(repeat(this), notifier);
  };

  var ScanObservable = (function(__super__) {
    inherits(ScanObservable, __super__);
    function ScanObservable(source, accumulator, hasSeed, seed) {
      this.source = source;
      this.accumulator = accumulator;
      this.hasSeed = hasSeed;
      this.seed = seed;
      __super__.call(this);
    }

    ScanObservable.prototype.subscribeCore = function(o) {
      return this.source.subscribe(new ScanObserver(o,this));
    };

    return ScanObservable;
  }(ObservableBase));

  var ScanObserver = (function (__super__) {
    inherits(ScanObserver, __super__);
    function ScanObserver(o, parent) {
      this._o = o;
      this._p = parent;
      this._fn = parent.accumulator;
      this._hs = parent.hasSeed;
      this._s = parent.seed;
      this._ha = false;
      this._a = null;
      this._hv = false;
      this._i = 0;
      __super__.call(this);
    }

    ScanObserver.prototype.next = function (x) {
      !this._hv && (this._hv = true);
      if (this._ha) {
        this._a = tryCatch(this._fn)(this._a, x, this._i, this._p);
      } else {
        this._a = this._hs ? tryCatch(this._fn)(this._s, x, this._i, this._p) : x;
        this._ha = true;
      }
      if (this._a === errorObj) { return this._o.onError(this._a.e); }
      this._o.onNext(this._a);
      this._i++;
    };

    ScanObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    ScanObserver.prototype.completed = function () {
      !this._hv && this._hs && this._o.onNext(this._s);
      this._o.onCompleted();
    };

    return ScanObserver;
  }(AbstractObserver));

  /**
  *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
  *  For aggregation behavior with no intermediate results, see Observable.aggregate.
  * @param {Mixed} [seed] The initial accumulator value.
  * @param {Function} accumulator An accumulator function to be invoked on each element.
  * @returns {Observable} An observable sequence containing the accumulated values.
  */
  observableProto.scan = function () {
    var hasSeed = false, seed, accumulator = arguments[0];
    if (arguments.length === 2) {
      hasSeed = true;
      seed = arguments[1];
    }
    return new ScanObservable(this, accumulator, hasSeed, seed);
  };

  var SkipLastObservable = (function (__super__) {
    inherits(SkipLastObservable, __super__);
    function SkipLastObservable(source, c) {
      this.source = source;
      this._c = c;
      __super__.call(this);
    }

    SkipLastObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new SkipLastObserver(o, this._c));
    };

    return SkipLastObservable;
  }(ObservableBase));

  var SkipLastObserver = (function (__super__) {
    inherits(SkipLastObserver, __super__);
    function SkipLastObserver(o, c) {
      this._o = o;
      this._c = c;
      this._q = [];
      __super__.call(this);
    }

    SkipLastObserver.prototype.next = function (x) {
      this._q.push(x);
      this._q.length > this._c && this._o.onNext(this._q.shift());
    };

    SkipLastObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    SkipLastObserver.prototype.completed = function () {
      this._o.onCompleted();
    };

    return SkipLastObserver;
  }(AbstractObserver));

  /**
   *  Bypasses a specified number of elements at the end of an observable sequence.
   * @description
   *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are
   *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
   * @param count Number of elements to bypass at the end of the source sequence.
   * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.
   */
  observableProto.skipLast = function (count) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    return new SkipLastObservable(this, count);
  };

  /**
   *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.
   *  @example
   *  var res = source.startWith(1, 2, 3);
   *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);
   * @param {Arguments} args The specified values to prepend to the observable sequence
   * @returns {Observable} The source sequence prepended with the specified values.
   */
  observableProto.startWith = function () {
    var values, scheduler, start = 0;
    if (!!arguments.length && isScheduler(arguments[0])) {
      scheduler = arguments[0];
      start = 1;
    } else {
      scheduler = immediateScheduler;
    }
    for(var args = [], i = start, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
    return enumerableOf([observableFromArray(args, scheduler), this]).concat();
  };

  var TakeLastObserver = (function (__super__) {
    inherits(TakeLastObserver, __super__);
    function TakeLastObserver(o, c) {
      this._o = o;
      this._c = c;
      this._q = [];
      __super__.call(this);
    }

    TakeLastObserver.prototype.next = function (x) {
      this._q.push(x);
      this._q.length > this._c && this._q.shift();
    };

    TakeLastObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    TakeLastObserver.prototype.completed = function () {
      while (this._q.length > 0) { this._o.onNext(this._q.shift()); }
      this._o.onCompleted();
    };

    return TakeLastObserver;
  }(AbstractObserver));

  /**
   *  Returns a specified number of contiguous elements from the end of an observable sequence.
   * @description
   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
   * @param {Number} count Number of elements to take from the end of the source sequence.
   * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.
   */
  observableProto.takeLast = function (count) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    var source = this;
    return new AnonymousObservable(function (o) {
      return source.subscribe(new TakeLastObserver(o, count));
    }, source);
  };

observableProto.flatMapConcat = observableProto.concatMap = function(selector, resultSelector, thisArg) {
    return new FlatMapObservable(this, selector, resultSelector, thisArg).merge(1);
};
  var MapObservable = (function (__super__) {
    inherits(MapObservable, __super__);

    function MapObservable(source, selector, thisArg) {
      this.source = source;
      this.selector = bindCallback(selector, thisArg, 3);
      __super__.call(this);
    }

    function innerMap(selector, self) {
      return function (x, i, o) { return selector.call(this, self.selector(x, i, o), i, o); };
    }

    MapObservable.prototype.internalMap = function (selector, thisArg) {
      return new MapObservable(this.source, innerMap(selector, this), thisArg);
    };

    MapObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new InnerObserver(o, this.selector, this));
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(o, selector, source) {
      this.o = o;
      this.selector = selector;
      this.source = source;
      this.i = 0;
      AbstractObserver.call(this);
    }

    InnerObserver.prototype.next = function(x) {
      var result = tryCatch(this.selector)(x, this.i++, this.source);
      if (result === errorObj) { return this.o.onError(result.e); }
      this.o.onNext(result);
    };

    InnerObserver.prototype.error = function (e) {
      this.o.onError(e);
    };

    InnerObserver.prototype.completed = function () {
      this.o.onCompleted();
    };

    return MapObservable;

  }(ObservableBase));

  /**
  * Projects each element of an observable sequence into a new form by incorporating the element's index.
  * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source.
  */
  observableProto.map = observableProto.select = function (selector, thisArg) {
    var selectorFn = typeof selector === 'function' ? selector : function () { return selector; };
    return this instanceof MapObservable ?
      this.internalMap(selectorFn, thisArg) :
      new MapObservable(this, selectorFn, thisArg);
  };

  function plucker(args, len) {
    return function mapper(x) {
      var currentProp = x;
      for (var i = 0; i < len; i++) {
        var p = currentProp[args[i]];
        if (typeof p !== 'undefined') {
          currentProp = p;
        } else {
          return undefined;
        }
      }
      return currentProp;
    };
  }

  /**
   * Retrieves the value of a specified nested property from all elements in
   * the Observable sequence.
   * @param {Arguments} arguments The nested properties to pluck.
   * @returns {Observable} Returns a new Observable sequence of property values.
   */
  observableProto.pluck = function () {
    var len = arguments.length, args = new Array(len);
    if (len === 0) { throw new Error('List of properties cannot be empty.'); }
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return this.map(plucker(args, len));
  };

observableProto.flatMap = observableProto.selectMany = function(selector, resultSelector, thisArg) {
    return new FlatMapObservable(this, selector, resultSelector, thisArg).mergeAll();
};

Rx.Observable.prototype.flatMapLatest = function(selector, resultSelector, thisArg) {
    return new FlatMapObservable(this, selector, resultSelector, thisArg).switchLatest();
};
  var SkipObservable = (function(__super__) {
    inherits(SkipObservable, __super__);
    function SkipObservable(source, count) {
      this.source = source;
      this._count = count;
      __super__.call(this);
    }

    SkipObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new SkipObserver(o, this._count));
    };

    function SkipObserver(o, c) {
      this._o = o;
      this._r = c;
      AbstractObserver.call(this);
    }

    inherits(SkipObserver, AbstractObserver);

    SkipObserver.prototype.next = function (x) {
      if (this._r <= 0) {
        this._o.onNext(x);
      } else {
        this._r--;
      }
    };
    SkipObserver.prototype.error = function(e) { this._o.onError(e); };
    SkipObserver.prototype.completed = function() { this._o.onCompleted(); };

    return SkipObservable;
  }(ObservableBase));

  /**
   * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
   * @param {Number} count The number of elements to skip before returning the remaining elements.
   * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.
   */
  observableProto.skip = function (count) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    return new SkipObservable(this, count);
  };

  var SkipWhileObservable = (function (__super__) {
    inherits(SkipWhileObservable, __super__);
    function SkipWhileObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    SkipWhileObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new SkipWhileObserver(o, this));
    };

    return SkipWhileObservable;
  }(ObservableBase));

  var SkipWhileObserver = (function (__super__) {
    inherits(SkipWhileObserver, __super__);

    function SkipWhileObserver(o, p) {
      this._o = o;
      this._p = p;
      this._i = 0;
      this._r = false;
      __super__.call(this);
    }

    SkipWhileObserver.prototype.next = function (x) {
      if (!this._r) {
        var res = tryCatch(this._p._fn)(x, this._i++, this._p);
        if (res === errorObj) { return this._o.onError(res.e); }
        this._r = !res;
      }
      this._r && this._o.onNext(x);
    };
    SkipWhileObserver.prototype.error = function (e) { this._o.onError(e); };
    SkipWhileObserver.prototype.completed = function () { this._o.onCompleted(); };

    return SkipWhileObserver;
  }(AbstractObserver));

  /**
   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
   *  The element's index is used in the logic of the predicate function.
   *
   *  var res = source.skipWhile(function (value) { return value < 10; });
   *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });
   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.
   */
  observableProto.skipWhile = function (predicate, thisArg) {
    var fn = bindCallback(predicate, thisArg, 3);
    return new SkipWhileObservable(this, fn);
  };

  var TakeObservable = (function(__super__) {
    inherits(TakeObservable, __super__);
    function TakeObservable(source, count) {
      this.source = source;
      this._count = count;
      __super__.call(this);
    }

    TakeObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new TakeObserver(o, this._count));
    };

    function TakeObserver(o, c) {
      this._o = o;
      this._c = c;
      this._r = c;
      AbstractObserver.call(this);
    }

    inherits(TakeObserver, AbstractObserver);

    TakeObserver.prototype.next = function (x) {
      if (this._r-- > 0) {
        this._o.onNext(x);
        this._r <= 0 && this._o.onCompleted();
      }
    };

    TakeObserver.prototype.error = function (e) { this._o.onError(e); };
    TakeObserver.prototype.completed = function () { this._o.onCompleted(); };

    return TakeObservable;
  }(ObservableBase));

  /**
   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
   * @param {Number} count The number of elements to return.
   * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
   * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.
   */
  observableProto.take = function (count, scheduler) {
    if (count < 0) { throw new ArgumentOutOfRangeError(); }
    if (count === 0) { return observableEmpty(scheduler); }
    return new TakeObservable(this, count);
  };

  var TakeWhileObservable = (function (__super__) {
    inherits(TakeWhileObservable, __super__);
    function TakeWhileObservable(source, fn) {
      this.source = source;
      this._fn = fn;
      __super__.call(this);
    }

    TakeWhileObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new TakeWhileObserver(o, this));
    };

    return TakeWhileObservable;
  }(ObservableBase));

  var TakeWhileObserver = (function (__super__) {
    inherits(TakeWhileObserver, __super__);

    function TakeWhileObserver(o, p) {
      this._o = o;
      this._p = p;
      this._i = 0;
      this._r = true;
      __super__.call(this);
    }

    TakeWhileObserver.prototype.next = function (x) {
      if (this._r) {
        this._r = tryCatch(this._p._fn)(x, this._i++, this._p);
        if (this._r === errorObj) { return this._o.onError(this._r.e); }
      }
      if (this._r) {
        this._o.onNext(x);
      } else {
        this._o.onCompleted();
      }
    };
    TakeWhileObserver.prototype.error = function (e) { this._o.onError(e); };
    TakeWhileObserver.prototype.completed = function () { this._o.onCompleted(); };

    return TakeWhileObserver;
  }(AbstractObserver));

  /**
   *  Returns elements from an observable sequence as long as a specified condition is true.
   *  The element's index is used in the logic of the predicate function.
   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
   * @param {Any} [thisArg] Object to use as this when executing callback.
   * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.
   */
  observableProto.takeWhile = function (predicate, thisArg) {
    var fn = bindCallback(predicate, thisArg, 3);
    return new TakeWhileObservable(this, fn);
  };

  var FilterObservable = (function (__super__) {
    inherits(FilterObservable, __super__);

    function FilterObservable(source, predicate, thisArg) {
      this.source = source;
      this.predicate = bindCallback(predicate, thisArg, 3);
      __super__.call(this);
    }

    FilterObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new InnerObserver(o, this.predicate, this));
    };

    function innerPredicate(predicate, self) {
      return function(x, i, o) { return self.predicate(x, i, o) && predicate.call(this, x, i, o); }
    }

    FilterObservable.prototype.internalFilter = function(predicate, thisArg) {
      return new FilterObservable(this.source, innerPredicate(predicate, this), thisArg);
    };

    inherits(InnerObserver, AbstractObserver);
    function InnerObserver(o, predicate, source) {
      this.o = o;
      this.predicate = predicate;
      this.source = source;
      this.i = 0;
      AbstractObserver.call(this);
    }

    InnerObserver.prototype.next = function(x) {
      var shouldYield = tryCatch(this.predicate)(x, this.i++, this.source);
      if (shouldYield === errorObj) {
        return this.o.onError(shouldYield.e);
      }
      shouldYield && this.o.onNext(x);
    };

    InnerObserver.prototype.error = function (e) {
      this.o.onError(e);
    };

    InnerObserver.prototype.completed = function () {
      this.o.onCompleted();
    };

    return FilterObservable;

  }(ObservableBase));

  /**
  *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
  * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
  * @param {Any} [thisArg] Object to use as this when executing callback.
  * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.
  */
  observableProto.filter = observableProto.where = function (predicate, thisArg) {
    return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) :
      new FilterObservable(this, predicate, thisArg);
  };

function createCbObservable(fn, ctx, selector, args) {
  var o = new AsyncSubject();

  args.push(createCbHandler(o, ctx, selector));
  fn.apply(ctx, args);

  return o.asObservable();
}

function createCbHandler(o, ctx, selector) {
  return function handler () {
    var len = arguments.length, results = new Array(len);
    for(var i = 0; i < len; i++) { results[i] = arguments[i]; }

    if (isFunction(selector)) {
      results = tryCatch(selector).apply(ctx, results);
      if (results === errorObj) { return o.onError(results.e); }
      o.onNext(results);
    } else {
      if (results.length <= 1) {
        o.onNext(results[0]);
      } else {
        o.onNext(results);
      }
    }

    o.onCompleted();
  };
}

/**
 * Converts a callback function to an observable sequence.
 *
 * @param {Function} fn Function with a callback as the last parameter to convert to an Observable sequence.
 * @param {Mixed} [ctx] The context for the func parameter to be executed.  If not specified, defaults to undefined.
 * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
 * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
 */
Observable.fromCallback = function (fn, ctx, selector) {
  return function () {
    typeof ctx === 'undefined' && (ctx = this); 

    var len = arguments.length, args = new Array(len)
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return createCbObservable(fn, ctx, selector, args);
  };
};

function createNodeObservable(fn, ctx, selector, args) {
  var o = new AsyncSubject();

  args.push(createNodeHandler(o, ctx, selector));
  fn.apply(ctx, args);

  return o.asObservable();
}

function createNodeHandler(o, ctx, selector) {
  return function handler () {
    var err = arguments[0];
    if (err) { return o.onError(err); }

    var len = arguments.length, results = [];
    for(var i = 1; i < len; i++) { results[i - 1] = arguments[i]; }

    if (isFunction(selector)) {
      var results = tryCatch(selector).apply(ctx, results);
      if (results === errorObj) { return o.onError(results.e); }
      o.onNext(results);
    } else {
      if (results.length <= 1) {
        o.onNext(results[0]);
      } else {
        o.onNext(results);
      }
    }

    o.onCompleted();
  };
}

/**
 * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
 * @param {Function} fn The function to call
 * @param {Mixed} [ctx] The context for the func parameter to be executed.  If not specified, defaults to undefined.
 * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.
 * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.
 */
Observable.fromNodeCallback = function (fn, ctx, selector) {
  return function () {
    typeof ctx === 'undefined' && (ctx = this); 
    var len = arguments.length, args = new Array(len);
    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
    return createNodeObservable(fn, ctx, selector, args);
  };
};

  function isNodeList(el) {
    if (root.StaticNodeList) {
      // IE8 Specific
      // instanceof is slower than Object#toString, but Object#toString will not work as intended in IE8
      return el instanceof root.StaticNodeList || el instanceof root.NodeList;
    } else {
      return Object.prototype.toString.call(el) === '[object NodeList]';
    }
  }

  function ListenDisposable(e, n, fn) {
    this._e = e;
    this._n = n;
    this._fn = fn;
    this._e.addEventListener(this._n, this._fn, false);
    this.isDisposed = false;
  }
  ListenDisposable.prototype.dispose = function () {
    if (!this.isDisposed) {
      this._e.removeEventListener(this._n, this._fn, false);
      this.isDisposed = true;
    }
  };

  function createEventListener (el, eventName, handler) {
    var disposables = new CompositeDisposable();

    // Asume NodeList or HTMLCollection
    var elemToString = Object.prototype.toString.call(el);
    if (isNodeList(el) || elemToString === '[object HTMLCollection]') {
      for (var i = 0, len = el.length; i < len; i++) {
        disposables.add(createEventListener(el.item(i), eventName, handler));
      }
    } else if (el) {
      disposables.add(new ListenDisposable(el, eventName, handler));
    }

    return disposables;
  }

  /**
   * Configuration option to determine whether to use native events only
   */
  Rx.config.useNativeEvents = false;

  var EventObservable = (function(__super__) {
    inherits(EventObservable, __super__);
    function EventObservable(el, name, fn) {
      this._el = el;
      this._n = name;
      this._fn = fn;
      __super__.call(this);
    }

    function createHandler(o, fn) {
      return function handler () {
        var results = arguments[0];
        if (isFunction(fn)) {
          results = tryCatch(fn).apply(null, arguments);
          if (results === errorObj) { return o.onError(results.e); }
        }
        o.onNext(results);
      };
    }

    EventObservable.prototype.subscribeCore = function (o) {
      return createEventListener(
        this._el,
        this._n,
        createHandler(o, this._fn));
    };

    return EventObservable;
  }(ObservableBase));

  /**
   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
   * @param {Object} element The DOMElement or NodeList to attach a listener.
   * @param {String} eventName The event name to attach the observable sequence.
   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
   */
  Observable.fromEvent = function (element, eventName, selector) {
    // Node.js specific
    if (element.addListener) {
      return fromEventPattern(
        function (h) { element.addListener(eventName, h); },
        function (h) { element.removeListener(eventName, h); },
        selector);
    }

    // Use only if non-native events are allowed
    if (!Rx.config.useNativeEvents) {
      // Handles jq, Angular.js, Zepto, Marionette, Ember.js
      if (typeof element.on === 'function' && typeof element.off === 'function') {
        return fromEventPattern(
          function (h) { element.on(eventName, h); },
          function (h) { element.off(eventName, h); },
          selector);
      }
    }

    return new EventObservable(element, eventName, selector).publish().refCount();
  };

  var EventPatternObservable = (function(__super__) {
    inherits(EventPatternObservable, __super__);
    function EventPatternObservable(add, del, fn) {
      this._add = add;
      this._del = del;
      this._fn = fn;
      __super__.call(this);
    }

    function createHandler(o, fn) {
      return function handler () {
        var results = arguments[0];
        if (isFunction(fn)) {
          results = tryCatch(fn).apply(null, arguments);
          if (results === errorObj) { return o.onError(results.e); }
        }
        o.onNext(results);
      };
    }

    EventPatternObservable.prototype.subscribeCore = function (o) {
      var fn = createHandler(o, this._fn);
      var returnValue = this._add(fn);
      return new EventPatternDisposable(this._del, fn, returnValue);
    };

    function EventPatternDisposable(del, fn, ret) {
      this._del = del;
      this._fn = fn;
      this._ret = ret;
      this.isDisposed = false;
    }

    EventPatternDisposable.prototype.dispose = function () {
      if(!this.isDisposed) {
        isFunction(this._del) && this._del(this._fn, this._ret);
        this.isDisposed = true;
      }
    };

    return EventPatternObservable;
  }(ObservableBase));

  /**
   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
   * @param {Function} addHandler The function to add a handler to the emitter.
   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.
   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
   * @returns {Observable} An observable sequence which wraps an event from an event emitter
   */
  var fromEventPattern = Observable.fromEventPattern = function (addHandler, removeHandler, selector) {
    return new EventPatternObservable(addHandler, removeHandler, selector).publish().refCount();
  };

  var FromPromiseObservable = (function(__super__) {
    inherits(FromPromiseObservable, __super__);
    function FromPromiseObservable(p, s) {
      this._p = p;
      this._s = s;
      __super__.call(this);
    }

    function scheduleNext(s, state) {
      var o = state[0], data = state[1];
      o.onNext(data);
      o.onCompleted();
    }

    function scheduleError(s, state) {
      var o = state[0], err = state[1];
      o.onError(err);
    }

    FromPromiseObservable.prototype.subscribeCore = function(o) {
      var sad = new SingleAssignmentDisposable(), self = this;

      this._p
        .then(function (data) {
          sad.setDisposable(self._s.schedule([o, data], scheduleNext));
        }, function (err) {
          sad.setDisposable(self._s.schedule([o, err], scheduleError));
        });

      return sad;
    };

    return FromPromiseObservable;
  }(ObservableBase));

  /**
  * Converts a Promise to an Observable sequence
  * @param {Promise} An ES6 Compliant promise.
  * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.
  */
  var observableFromPromise = Observable.fromPromise = function (promise, scheduler) {
    scheduler || (scheduler = defaultScheduler);
    return new FromPromiseObservable(promise, scheduler);
  };

  /*
   * Converts an existing observable sequence to an ES6 Compatible Promise
   * @example
   * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);
   *
   * // With config
   * Rx.config.Promise = RSVP.Promise;
   * var promise = Rx.Observable.return(42).toPromise();
   * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.
   * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.
   */
  observableProto.toPromise = function (promiseCtor) {
    promiseCtor || (promiseCtor = Rx.config.Promise);
    if (!promiseCtor) { throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise'); }
    var source = this;
    return new promiseCtor(function (resolve, reject) {
      // No cancellation can be done
      var value;
      source.subscribe(function (v) {
        value = v;
      }, reject, function () {
        resolve(value);
      });
    });
  };

  /**
   * Invokes the asynchronous function, surfacing the result through an observable sequence.
   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.
   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
   */
  Observable.startAsync = function (functionAsync) {
    var promise = tryCatch(functionAsync)();
    if (promise === errorObj) { return observableThrow(promise.e); }
    return observableFromPromise(promise);
  };

  var MulticastObservable = (function (__super__) {
    inherits(MulticastObservable, __super__);
    function MulticastObservable(source, fn1, fn2) {
      this.source = source;
      this._fn1 = fn1;
      this._fn2 = fn2;
      __super__.call(this);
    }

    MulticastObservable.prototype.subscribeCore = function (o) {
      var connectable = this.source.multicast(this._fn1());
      return new BinaryDisposable(this._fn2(connectable).subscribe(o), connectable.connect());
    };

    return MulticastObservable;
  }(ObservableBase));

  /**
   * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
   * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
   * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
   *
   * @example
   * 1 - res = source.multicast(observable);
   * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });
   *
   * @param {Function|Subject} subjectOrSubjectSelector
   * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
   * Or:
   * Subject to push source elements into.
   *
   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name="subjectOrSubjectSelector" is a factory function.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.multicast = function (subjectOrSubjectSelector, selector) {
    return isFunction(subjectOrSubjectSelector) ?
      new MulticastObservable(this, subjectOrSubjectSelector, selector) :
      new ConnectableObservable(this, subjectOrSubjectSelector);
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
   * This operator is a specialization of Multicast using a regular Subject.
   *
   * @example
   * var resres = source.publish();
   * var res = source.publish(function (x) { return x; });
   *
   * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.publish = function (selector) {
    return selector && isFunction(selector) ?
      this.multicast(function () { return new Subject(); }, selector) :
      this.multicast(new Subject());
  };

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence.
   * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
   */
  observableProto.share = function () {
    return this.publish().refCount();
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
   * This operator is a specialization of Multicast using a AsyncSubject.
   *
   * @example
   * var res = source.publishLast();
   * var res = source.publishLast(function (x) { return x; });
   *
   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.publishLast = function (selector) {
    return selector && isFunction(selector) ?
      this.multicast(function () { return new AsyncSubject(); }, selector) :
      this.multicast(new AsyncSubject());
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
   * This operator is a specialization of Multicast using a BehaviorSubject.
   *
   * @example
   * var res = source.publishValue(42);
   * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);
   *
   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.
   * @param {Mixed} initialValue Initial value received by observers upon subscription.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.publishValue = function (initialValueOrSelector, initialValue) {
    return arguments.length === 2 ?
      this.multicast(function () {
        return new BehaviorSubject(initialValue);
      }, initialValueOrSelector) :
      this.multicast(new BehaviorSubject(initialValueOrSelector));
  };

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
   * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
   * @param {Mixed} initialValue Initial value received by observers upon subscription.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
   */
  observableProto.shareValue = function (initialValue) {
    return this.publishValue(initialValue).refCount();
  };

  /**
   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
   * This operator is a specialization of Multicast using a ReplaySubject.
   *
   * @example
   * var res = source.replay(null, 3);
   * var res = source.replay(null, 3, 500);
   * var res = source.replay(null, 3, 500, scheduler);
   * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);
   *
   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.
   * @param bufferSize [Optional] Maximum element count of the replay buffer.
   * @param windowSize [Optional] Maximum time length of the replay buffer.
   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
   */
  observableProto.replay = function (selector, bufferSize, windowSize, scheduler) {
    return selector && isFunction(selector) ?
      this.multicast(function () { return new ReplaySubject(bufferSize, windowSize, scheduler); }, selector) :
      this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));
  };

  /**
   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
   *
   * @example
   * var res = source.shareReplay(3);
   * var res = source.shareReplay(3, 500);
   * var res = source.shareReplay(3, 500, scheduler);
   *

   * @param bufferSize [Optional] Maximum element count of the replay buffer.
   * @param window [Optional] Maximum time length of the replay buffer.
   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
   */
  observableProto.shareReplay = function (bufferSize, windowSize, scheduler) {
    return this.replay(null, bufferSize, windowSize, scheduler).refCount();
  };

  var RefCountObservable = (function (__super__) {
    inherits(RefCountObservable, __super__);
    function RefCountObservable(source) {
      this.source = source;
      this._count = 0;
      this._connectableSubscription = null;
      __super__.call(this);
    }

    RefCountObservable.prototype.subscribeCore = function (o) {
      var subscription = this.source.subscribe(o);
      ++this._count === 1 && (this._connectableSubscription = this.source.connect());
      return new RefCountDisposable(this, subscription);
    };

    function RefCountDisposable(p, s) {
      this._p = p;
      this._s = s;
      this.isDisposed = false;
    }

    RefCountDisposable.prototype.dispose = function () {
      if (!this.isDisposed) {
        this.isDisposed = true;
        this._s.dispose();
        --this._p._count === 0 && this._p._connectableSubscription.dispose();
      }
    };

    return RefCountObservable;
  }(ObservableBase));

  var ConnectableObservable = Rx.ConnectableObservable = (function (__super__) {
    inherits(ConnectableObservable, __super__);
    function ConnectableObservable(source, subject) {
      this.source = source;
      this._connection = null;
      this._source = source.asObservable();
      this._subject = subject;
      __super__.call(this);
    }

    function ConnectDisposable(parent, subscription) {
      this._p = parent;
      this._s = subscription;
    }

    ConnectDisposable.prototype.dispose = function () {
      if (this._s) {
        this._s.dispose();
        this._s = null;
        this._p._connection = null;
      }
    };

    ConnectableObservable.prototype.connect = function () {
      if (!this._connection) {
        var subscription = this._source.subscribe(this._subject);
        this._connection = new ConnectDisposable(this, subscription);
      }
      return this._connection;
    };

    ConnectableObservable.prototype._subscribe = function (o) {
      return this._subject.subscribe(o);
    };

    ConnectableObservable.prototype.refCount = function () {
      return new RefCountObservable(this);
    };

    return ConnectableObservable;
  }(Observable));

  var TimerObservable = (function(__super__) {
    inherits(TimerObservable, __super__);
    function TimerObservable(dt, s) {
      this._dt = dt;
      this._s = s;
      __super__.call(this);
    }

    TimerObservable.prototype.subscribeCore = function (o) {
      return this._s.scheduleFuture(o, this._dt, scheduleMethod);
    };

    function scheduleMethod(s, o) {
      o.onNext(0);
      o.onCompleted();
    }

    return TimerObservable;
  }(ObservableBase));

  function _observableTimer(dueTime, scheduler) {
    return new TimerObservable(dueTime, scheduler);
  }

  function observableTimerDateAndPeriod(dueTime, period, scheduler) {
    return new AnonymousObservable(function (observer) {
      var d = dueTime, p = normalizeTime(period);
      return scheduler.scheduleRecursiveFuture(0, d, function (count, self) {
        if (p > 0) {
          var now = scheduler.now();
          d = new Date(d.getTime() + p);
          d.getTime() <= now && (d = new Date(now + p));
        }
        observer.onNext(count);
        self(count + 1, new Date(d));
      });
    });
  }

  function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
    return dueTime === period ?
      new AnonymousObservable(function (observer) {
        return scheduler.schedulePeriodic(0, period, function (count) {
          observer.onNext(count);
          return count + 1;
        });
      }) :
      observableDefer(function () {
        return observableTimerDateAndPeriod(new Date(scheduler.now() + dueTime), period, scheduler);
      });
  }

  /**
   *  Returns an observable sequence that produces a value after each period.
   *
   * @example
   *  1 - res = Rx.Observable.interval(1000);
   *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);
   *
   * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).
   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.
   * @returns {Observable} An observable sequence that produces a value after each period.
   */
  var observableinterval = Observable.interval = function (period, scheduler) {
    return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : defaultScheduler);
  };

  /**
   *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.
   * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.
   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.
   * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.
   */
  var observableTimer = Observable.timer = function (dueTime, periodOrScheduler, scheduler) {
    var period;
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    if (periodOrScheduler != null && typeof periodOrScheduler === 'number') {
      period = periodOrScheduler;
    } else if (isScheduler(periodOrScheduler)) {
      scheduler = periodOrScheduler;
    }
    if ((dueTime instanceof Date || typeof dueTime === 'number') && period === undefined) {
      return _observableTimer(dueTime, scheduler);
    }
    if (dueTime instanceof Date && period !== undefined) {
      return observableTimerDateAndPeriod(dueTime, periodOrScheduler, scheduler);
    }
    return observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
  };

  function observableDelayRelative(source, dueTime, scheduler) {
    return new AnonymousObservable(function (o) {
      var active = false,
        cancelable = new SerialDisposable(),
        exception = null,
        q = [],
        running = false,
        subscription;
      subscription = source.materialize().timestamp(scheduler).subscribe(function (notification) {
        var d, shouldRun;
        if (notification.value.kind === 'E') {
          q = [];
          q.push(notification);
          exception = notification.value.error;
          shouldRun = !running;
        } else {
          q.push({ value: notification.value, timestamp: notification.timestamp + dueTime });
          shouldRun = !active;
          active = true;
        }
        if (shouldRun) {
          if (exception !== null) {
            o.onError(exception);
          } else {
            d = new SingleAssignmentDisposable();
            cancelable.setDisposable(d);
            d.setDisposable(scheduler.scheduleRecursiveFuture(null, dueTime, function (_, self) {
              var e, recurseDueTime, result, shouldRecurse;
              if (exception !== null) {
                return;
              }
              running = true;
              do {
                result = null;
                if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
                  result = q.shift().value;
                }
                if (result !== null) {
                  result.accept(o);
                }
              } while (result !== null);
              shouldRecurse = false;
              recurseDueTime = 0;
              if (q.length > 0) {
                shouldRecurse = true;
                recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
              } else {
                active = false;
              }
              e = exception;
              running = false;
              if (e !== null) {
                o.onError(e);
              } else if (shouldRecurse) {
                self(null, recurseDueTime);
              }
            }));
          }
        }
      });
      return new BinaryDisposable(subscription, cancelable);
    }, source);
  }

  function observableDelayAbsolute(source, dueTime, scheduler) {
    return observableDefer(function () {
      return observableDelayRelative(source, dueTime - scheduler.now(), scheduler);
    });
  }

  function delayWithSelector(source, subscriptionDelay, delayDurationSelector) {
    var subDelay, selector;
    if (isFunction(subscriptionDelay)) {
      selector = subscriptionDelay;
    } else {
      subDelay = subscriptionDelay;
      selector = delayDurationSelector;
    }
    return new AnonymousObservable(function (o) {
      var delays = new CompositeDisposable(), atEnd = false, subscription = new SerialDisposable();

      function start() {
        subscription.setDisposable(source.subscribe(
          function (x) {
            var delay = tryCatch(selector)(x);
            if (delay === errorObj) { return o.onError(delay.e); }
            var d = new SingleAssignmentDisposable();
            delays.add(d);
            d.setDisposable(delay.subscribe(
              function () {
                o.onNext(x);
                delays.remove(d);
                done();
              },
              function (e) { o.onError(e); },
              function () {
                o.onNext(x);
                delays.remove(d);
                done();
              }
            ));
          },
          function (e) { o.onError(e); },
          function () {
            atEnd = true;
            subscription.dispose();
            done();
          }
        ));
      }

      function done () {
        atEnd && delays.length === 0 && o.onCompleted();
      }

      if (!subDelay) {
        start();
      } else {
        subscription.setDisposable(subDelay.subscribe(start, function (e) { o.onError(e); }, start));
      }

      return new BinaryDisposable(subscription, delays);
    }, source);
  }

  /**
   *  Time shifts the observable sequence by dueTime.
   *  The relative time intervals between the values are preserved.
   *
   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.
   * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.
   * @returns {Observable} Time-shifted sequence.
   */
  observableProto.delay = function () {
    var firstArg = arguments[0];
    if (typeof firstArg === 'number' || firstArg instanceof Date) {
      var dueTime = firstArg, scheduler = arguments[1];
      isScheduler(scheduler) || (scheduler = defaultScheduler);
      return dueTime instanceof Date ?
        observableDelayAbsolute(this, dueTime, scheduler) :
        observableDelayRelative(this, dueTime, scheduler);
    } else if (Observable.isObservable(firstArg) || isFunction(firstArg)) {
      return delayWithSelector(this, firstArg, arguments[1]);
    } else {
      throw new Error('Invalid arguments');
    }
  };

  var DebounceObservable = (function (__super__) {
    inherits(DebounceObservable, __super__);
    function DebounceObservable(source, dt, s) {
      isScheduler(s) || (s = defaultScheduler);
      this.source = source;
      this._dt = dt;
      this._s = s;
      __super__.call(this);
    }

    DebounceObservable.prototype.subscribeCore = function (o) {
      var cancelable = new SerialDisposable();
      return new BinaryDisposable(
        this.source.subscribe(new DebounceObserver(o, this._dt, this._s, cancelable)),
        cancelable);
    };

    return DebounceObservable;
  }(ObservableBase));

  var DebounceObserver = (function (__super__) {
    inherits(DebounceObserver, __super__);
    function DebounceObserver(observer, dueTime, scheduler, cancelable) {
      this._o = observer;
      this._d = dueTime;
      this._scheduler = scheduler;
      this._c = cancelable;
      this._v = null;
      this._hv = false;
      this._id = 0;
      __super__.call(this);
    }

    function scheduleFuture(s, state) {
      state.self._hv && state.self._id === state.currentId && state.self._o.onNext(state.x);
      state.self._hv = false;
    }

    DebounceObserver.prototype.next = function (x) {
      this._hv = true;
      this._v = x;
      var currentId = ++this._id, d = new SingleAssignmentDisposable();
      this._c.setDisposable(d);
      d.setDisposable(this._scheduler.scheduleFuture(this, this._d, function (_, self) {
        self._hv && self._id === currentId && self._o.onNext(x);
        self._hv = false;
      }));
    };

    DebounceObserver.prototype.error = function (e) {
      this._c.dispose();
      this._o.onError(e);
      this._hv = false;
      this._id++;
    };

    DebounceObserver.prototype.completed = function () {
      this._c.dispose();
      this._hv && this._o.onNext(this._v);
      this._o.onCompleted();
      this._hv = false;
      this._id++;
    };

    return DebounceObserver;
  }(AbstractObserver));

  function debounceWithSelector(source, durationSelector) {
    return new AnonymousObservable(function (o) {
      var value, hasValue = false, cancelable = new SerialDisposable(), id = 0;
      var subscription = source.subscribe(
        function (x) {
          var throttle = tryCatch(durationSelector)(x);
          if (throttle === errorObj) { return o.onError(throttle.e); }

          isPromise(throttle) && (throttle = observableFromPromise(throttle));

          hasValue = true;
          value = x;
          id++;
          var currentid = id, d = new SingleAssignmentDisposable();
          cancelable.setDisposable(d);
          d.setDisposable(throttle.subscribe(
            function () {
              hasValue && id === currentid && o.onNext(value);
              hasValue = false;
              d.dispose();
            },
            function (e) { o.onError(e); },
            function () {
              hasValue && id === currentid && o.onNext(value);
              hasValue = false;
              d.dispose();
            }
          ));
        },
        function (e) {
          cancelable.dispose();
          o.onError(e);
          hasValue = false;
          id++;
        },
        function () {
          cancelable.dispose();
          hasValue && o.onNext(value);
          o.onCompleted();
          hasValue = false;
          id++;
        }
      );
      return new BinaryDisposable(subscription, cancelable);
    }, source);
  }

  observableProto.debounce = function () {
    if (isFunction (arguments[0])) {
      return debounceWithSelector(this, arguments[0]);
    } else if (typeof arguments[0] === 'number') {
      return new DebounceObservable(this, arguments[0], arguments[1]);
    } else {
      throw new Error('Invalid arguments');
    }
  };

  var TimestampObservable = (function (__super__) {
    inherits(TimestampObservable, __super__);
    function TimestampObservable(source, s) {
      this.source = source;
      this._s = s;
      __super__.call(this);
    }

    TimestampObservable.prototype.subscribeCore = function (o) {
      return this.source.subscribe(new TimestampObserver(o, this._s));
    };

    return TimestampObservable;
  }(ObservableBase));

  var TimestampObserver = (function (__super__) {
    inherits(TimestampObserver, __super__);
    function TimestampObserver(o, s) {
      this._o = o;
      this._s = s;
      __super__.call(this);
    }

    TimestampObserver.prototype.next = function (x) {
      this._o.onNext({ value: x, timestamp: this._s.now() });
    };

    TimestampObserver.prototype.error = function (e) {
      this._o.onError(e);
    };

    TimestampObserver.prototype.completed = function () {
      this._o.onCompleted();
    };

    return TimestampObserver;
  }(AbstractObserver));

  /**
   *  Records the timestamp for each value in an observable sequence.
   *
   * @example
   *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }
   *  2 - res = source.timestamp(Rx.Scheduler.default);
   *
   * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the default scheduler is used.
   * @returns {Observable} An observable sequence with timestamp information on values.
   */
  observableProto.timestamp = function (scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return new TimestampObservable(this, scheduler);
  };

  var SampleObservable = (function(__super__) {
    inherits(SampleObservable, __super__);
    function SampleObservable(source, sampler) {
      this.source = source;
      this._sampler = sampler;
      __super__.call(this);
    }

    SampleObservable.prototype.subscribeCore = function (o) {
      var state = {
        o: o,
        atEnd: false,
        value: null,
        hasValue: false,
        sourceSubscription: new SingleAssignmentDisposable()
      };

      state.sourceSubscription.setDisposable(this.source.subscribe(new SampleSourceObserver(state)));
      return new BinaryDisposable(
        state.sourceSubscription,
        this._sampler.subscribe(new SamplerObserver(state))
      );
    };

    return SampleObservable;
  }(ObservableBase));

  var SamplerObserver = (function(__super__) {
    inherits(SamplerObserver, __super__);
    function SamplerObserver(s) {
      this._s = s;
      __super__.call(this);
    }

    SamplerObserver.prototype._handleMessage = function () {
      if (this._s.hasValue) {
        this._s.hasValue = false;
        this._s.o.onNext(this._s.value);
      }
      this._s.atEnd && this._s.o.onCompleted();
    };

    SamplerObserver.prototype.next = function () { this._handleMessage(); };
    SamplerObserver.prototype.error = function (e) { this._s.onError(e); };
    SamplerObserver.prototype.completed = function () { this._handleMessage(); };

    return SamplerObserver;
  }(AbstractObserver));

  var SampleSourceObserver = (function(__super__) {
    inherits(SampleSourceObserver, __super__);
    function SampleSourceObserver(s) {
      this._s = s;
      __super__.call(this);
    }

    SampleSourceObserver.prototype.next = function (x) {
      this._s.hasValue = true;
      this._s.value = x;
    };
    SampleSourceObserver.prototype.error = function (e) { this._s.o.onError(e); };
    SampleSourceObserver.prototype.completed = function () {
      this._s.atEnd = true;
      this._s.sourceSubscription.dispose();
    };

    return SampleSourceObserver;
  }(AbstractObserver));

  /**
   *  Samples the observable sequence at each interval.
   *
   * @example
   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
   *  2 - res = source.sample(5000); // 5 seconds
   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
   *
   * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
   * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
   * @returns {Observable} Sampled observable sequence.
   */
  observableProto.sample = function (intervalOrSampler, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    return typeof intervalOrSampler === 'number' ?
      new SampleObservable(this, observableinterval(intervalOrSampler, scheduler)) :
      new SampleObservable(this, intervalOrSampler);
  };

  var TimeoutError = Rx.TimeoutError = function(message) {
    this.message = message || 'Timeout has occurred';
    this.name = 'TimeoutError';
    Error.call(this);
  };
  TimeoutError.prototype = Object.create(Error.prototype);

  function timeoutWithSelector(source, firstTimeout, timeoutDurationSelector, other) {
    if (isFunction(firstTimeout)) {
      other = timeoutDurationSelector;
      timeoutDurationSelector = firstTimeout;
      firstTimeout = observableNever();
    }
    Observable.isObservable(other) || (other = observableThrow(new TimeoutError()));
    return new AnonymousObservable(function (o) {
      var subscription = new SerialDisposable(),
        timer = new SerialDisposable(),
        original = new SingleAssignmentDisposable();

      subscription.setDisposable(original);

      var id = 0, switched = false;

      function setTimer(timeout) {
        var myId = id, d = new SingleAssignmentDisposable();

        function timerWins() {
          switched = (myId === id);
          return switched;
        }

        timer.setDisposable(d);
        d.setDisposable(timeout.subscribe(function () {
          timerWins() && subscription.setDisposable(other.subscribe(o));
          d.dispose();
        }, function (e) {
          timerWins() && o.onError(e);
        }, function () {
          timerWins() && subscription.setDisposable(other.subscribe(o));
        }));
      };

      setTimer(firstTimeout);

      function oWins() {
        var res = !switched;
        if (res) { id++; }
        return res;
      }

      original.setDisposable(source.subscribe(function (x) {
        if (oWins()) {
          o.onNext(x);
          var timeout = tryCatch(timeoutDurationSelector)(x);
          if (timeout === errorObj) { return o.onError(timeout.e); }
          setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);
        }
      }, function (e) {
        oWins() && o.onError(e);
      }, function () {
        oWins() && o.onCompleted();
      }));
      return new BinaryDisposable(subscription, timer);
    }, source);
  }

  function timeout(source, dueTime, other, scheduler) {
    if (isScheduler(other)) {
      scheduler = other;
      other = observableThrow(new TimeoutError());
    }
    if (other instanceof Error) { other = observableThrow(other); }
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    Observable.isObservable(other) || (other = observableThrow(new TimeoutError()));
    return new AnonymousObservable(function (o) {
      var id = 0,
        original = new SingleAssignmentDisposable(),
        subscription = new SerialDisposable(),
        switched = false,
        timer = new SerialDisposable();

      subscription.setDisposable(original);

      function createTimer() {
        var myId = id;
        timer.setDisposable(scheduler.scheduleFuture(null, dueTime, function () {
          switched = id === myId;
          if (switched) {
            isPromise(other) && (other = observableFromPromise(other));
            subscription.setDisposable(other.subscribe(o));
          }
        }));
      }

      createTimer();

      original.setDisposable(source.subscribe(function (x) {
        if (!switched) {
          id++;
          o.onNext(x);
          createTimer();
        }
      }, function (e) {
        if (!switched) {
          id++;
          o.onError(e);
        }
      }, function () {
        if (!switched) {
          id++;
          o.onCompleted();
        }
      }));
      return new BinaryDisposable(subscription, timer);
    }, source);
  }

  observableProto.timeout = function () {
    var firstArg = arguments[0];
    if (firstArg instanceof Date || typeof firstArg === 'number') {
      return timeout(this, firstArg, arguments[1], arguments[2]);
    } else if (Observable.isObservable(firstArg) || isFunction(firstArg)) {
      return timeoutWithSelector(this, firstArg, arguments[1], arguments[2]);
    } else {
      throw new Error('Invalid arguments');
    }
  };

  /**
   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.
   * @param {Number} windowDuration time to wait before emitting another item after emitting the last item
   * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.
   * @returns {Observable} An Observable that performs the throttle operation.
   */
  observableProto.throttle = function (windowDuration, scheduler) {
    isScheduler(scheduler) || (scheduler = defaultScheduler);
    var duration = +windowDuration || 0;
    if (duration <= 0) { throw new RangeError('windowDuration cannot be less or equal zero.'); }
    var source = this;
    return new AnonymousObservable(function (o) {
      var lastOnNext = 0;
      return source.subscribe(
        function (x) {
          var now = scheduler.now();
          if (lastOnNext === 0 || now - lastOnNext >= duration) {
            lastOnNext = now;
            o.onNext(x);
          }
        },function (e) { o.onError(e); }, function () { o.onCompleted(); }
      );
    }, source);
  };

  var PausableObservable = (function (__super__) {
    inherits(PausableObservable, __super__);
    function PausableObservable(source, pauser) {
      this.source = source;
      this.controller = new Subject();

      if (pauser && pauser.subscribe) {
        this.pauser = this.controller.merge(pauser);
      } else {
        this.pauser = this.controller;
      }

      __super__.call(this);
    }

    PausableObservable.prototype._subscribe = function (o) {
      var conn = this.source.publish(),
        subscription = conn.subscribe(o),
        connection = disposableEmpty;

      var pausable = this.pauser.distinctUntilChanged().subscribe(function (b) {
        if (b) {
          connection = conn.connect();
        } else {
          connection.dispose();
          connection = disposableEmpty;
        }
      });

      return new NAryDisposable([subscription, connection, pausable]);
    };

    PausableObservable.prototype.pause = function () {
      this.controller.onNext(false);
    };

    PausableObservable.prototype.resume = function () {
      this.controller.onNext(true);
    };

    return PausableObservable;

  }(Observable));

  /**
   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.
   * @example
   * var pauser = new Rx.Subject();
   * var source = Rx.Observable.interval(100).pausable(pauser);
   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
   * @returns {Observable} The observable sequence which is paused based upon the pauser.
   */
  observableProto.pausable = function (pauser) {
    return new PausableObservable(this, pauser);
  };

  function combineLatestSource(source, subject, resultSelector) {
    return new AnonymousObservable(function (o) {
      var hasValue = [false, false],
        hasValueAll = false,
        isDone = false,
        values = new Array(2),
        err;

      function next(x, i) {
        values[i] = x;
        hasValue[i] = true;
        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
          if (err) { return o.onError(err); }
          var res = tryCatch(resultSelector).apply(null, values);
          if (res === errorObj) { return o.onError(res.e); }
          o.onNext(res);
        }
        isDone && values[1] && o.onCompleted();
      }

      return new BinaryDisposable(
        source.subscribe(
          function (x) {
            next(x, 0);
          },
          function (e) {
            if (values[1]) {
              o.onError(e);
            } else {
              err = e;
            }
          },
          function () {
            isDone = true;
            values[1] && o.onCompleted();
          }),
        subject.subscribe(
          function (x) {
            next(x, 1);
          },
          function (e) { o.onError(e); },
          function () {
            isDone = true;
            next(true, 1);
          })
        );
    }, source);
  }

  var PausableBufferedObservable = (function (__super__) {
    inherits(PausableBufferedObservable, __super__);
    function PausableBufferedObservable(source, pauser) {
      this.source = source;
      this.controller = new Subject();

      if (pauser && pauser.subscribe) {
        this.pauser = this.controller.merge(pauser);
      } else {
        this.pauser = this.controller;
      }

      __super__.call(this);
    }

    PausableBufferedObservable.prototype._subscribe = function (o) {
      var q = [], previousShouldFire;

      function drainQueue() { while (q.length > 0) { o.onNext(q.shift()); } }

      var subscription =
        combineLatestSource(
          this.source,
          this.pauser.startWith(false).distinctUntilChanged(),
          function (data, shouldFire) {
            return { data: data, shouldFire: shouldFire };
          })
          .subscribe(
            function (results) {
              if (previousShouldFire !== undefined && results.shouldFire !== previousShouldFire) {
                previousShouldFire = results.shouldFire;
                // change in shouldFire
                if (results.shouldFire) { drainQueue(); }
              } else {
                previousShouldFire = results.shouldFire;
                // new data
                if (results.shouldFire) {
                  o.onNext(results.data);
                } else {
                  q.push(results.data);
                }
              }
            },
            function (err) {
              drainQueue();
              o.onError(err);
            },
            function () {
              drainQueue();
              o.onCompleted();
            }
          );
      return subscription;      
    };

    PausableBufferedObservable.prototype.pause = function () {
      this.controller.onNext(false);
    };

    PausableBufferedObservable.prototype.resume = function () {
      this.controller.onNext(true);
    };

    return PausableBufferedObservable;

  }(Observable));

  /**
   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,
   * and yields the values that were buffered while paused.
   * @example
   * var pauser = new Rx.Subject();
   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);
   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
   * @returns {Observable} The observable sequence which is paused based upon the pauser.
   */
  observableProto.pausableBuffered = function (pauser) {
    return new PausableBufferedObservable(this, pauser);
  };

  var ControlledObservable = (function (__super__) {
    inherits(ControlledObservable, __super__);
    function ControlledObservable (source, enableQueue, scheduler) {
      __super__.call(this);
      this.subject = new ControlledSubject(enableQueue, scheduler);
      this.source = source.multicast(this.subject).refCount();
    }

    ControlledObservable.prototype._subscribe = function (o) {
      return this.source.subscribe(o);
    };

    ControlledObservable.prototype.request = function (numberOfItems) {
      return this.subject.request(numberOfItems == null ? -1 : numberOfItems);
    };

    return ControlledObservable;

  }(Observable));

  var ControlledSubject = (function (__super__) {
    inherits(ControlledSubject, __super__);
    function ControlledSubject(enableQueue, scheduler) {
      enableQueue == null && (enableQueue = true);

      __super__.call(this);
      this.subject = new Subject();
      this.enableQueue = enableQueue;
      this.queue = enableQueue ? [] : null;
      this.requestedCount = 0;
      this.requestedDisposable = null;
      this.error = null;
      this.hasFailed = false;
      this.hasCompleted = false;
      this.scheduler = scheduler || currentThreadScheduler;
    }

    addProperties(ControlledSubject.prototype, Observer, {
      _subscribe: function (o) {
        return this.subject.subscribe(o);
      },
      onCompleted: function () {
        this.hasCompleted = true;
        if (!this.enableQueue || this.queue.length === 0) {
          this.subject.onCompleted();
          this.disposeCurrentRequest();
        } else {
          this.queue.push(Notification.createOnCompleted());
        }
      },
      onError: function (error) {
        this.hasFailed = true;
        this.error = error;
        if (!this.enableQueue || this.queue.length === 0) {
          this.subject.onError(error);
          this.disposeCurrentRequest();
        } else {
          this.queue.push(Notification.createOnError(error));
        }
      },
      onNext: function (value) {
        if (this.requestedCount <= 0) {
          this.enableQueue && this.queue.push(Notification.createOnNext(value));
        } else {
          (this.requestedCount-- === 0) && this.disposeCurrentRequest();
          this.subject.onNext(value);
        }
      },
      _processRequest: function (numberOfItems) {
        if (this.enableQueue) {
          while (this.queue.length > 0 && (numberOfItems > 0 || this.queue[0].kind !== 'N')) {
            var first = this.queue.shift();
            first.accept(this.subject);
            if (first.kind === 'N') {
              numberOfItems--;
            } else {
              this.disposeCurrentRequest();
              this.queue = [];
            }
          }
        }

        return numberOfItems;
      },
      request: function (number) {
        this.disposeCurrentRequest();
        var self = this;

        this.requestedDisposable = this.scheduler.schedule(number,
        function(s, i) {
          var remaining = self._processRequest(i);
          var stopped = self.hasCompleted || self.hasFailed;
          if (!stopped && remaining > 0) {
            self.requestedCount = remaining;

            return disposableCreate(function () {
              self.requestedCount = 0;
            });
              // Scheduled item is still in progress. Return a new
              // disposable to allow the request to be interrupted
              // via dispose.
          }
        });

        return this.requestedDisposable;
      },
      disposeCurrentRequest: function () {
        if (this.requestedDisposable) {
          this.requestedDisposable.dispose();
          this.requestedDisposable = null;
        }
      }
    });

    return ControlledSubject;
  }(Observable));

  /**
   * Attaches a controller to the observable sequence with the ability to queue.
   * @example
   * var source = Rx.Observable.interval(100).controlled();
   * source.request(3); // Reads 3 values
   * @param {bool} enableQueue truthy value to determine if values should be queued pending the next request
   * @param {Scheduler} scheduler determines how the requests will be scheduled
   * @returns {Observable} The observable sequence which only propagates values on request.
   */
  observableProto.controlled = function (enableQueue, scheduler) {

    if (enableQueue && isScheduler(enableQueue)) {
      scheduler = enableQueue;
      enableQueue = true;
    }

    if (enableQueue == null) {  enableQueue = true; }
    return new ControlledObservable(this, enableQueue, scheduler);
  };

  /**
   * Pipes the existing Observable sequence into a Node.js Stream.
   * @param {Stream} dest The destination Node.js stream.
   * @returns {Stream} The destination stream.
   */
  observableProto.pipe = function (dest) {
    var source = this.pausableBuffered();

    function onDrain() {
      source.resume();
    }

    dest.addListener('drain', onDrain);

    source.subscribe(
      function (x) {
        !dest.write(String(x)) && source.pause();
      },
      function (err) {
        dest.emit('error', err);
      },
      function () {
        // Hack check because STDIO is not closable
        !dest._isStdio && dest.end();
        dest.removeListener('drain', onDrain);
      });

    source.resume();

    return dest;
  };

  var TransduceObserver = (function (__super__) {
    inherits(TransduceObserver, __super__);
    function TransduceObserver(o, xform) {
      this._o = o;
      this._xform = xform;
      __super__.call(this);
    }

    TransduceObserver.prototype.next = function (x) {
      var res = tryCatch(this._xform['@@transducer/step']).call(this._xform, this._o, x);
      if (res === errorObj) { this._o.onError(res.e); }
    };

    TransduceObserver.prototype.error = function (e) { this._o.onError(e); };

    TransduceObserver.prototype.completed = function () {
      this._xform['@@transducer/result'](this._o);
    };

    return TransduceObserver;
  }(AbstractObserver));

  function transformForObserver(o) {
    return {
      '@@transducer/init': function() {
        return o;
      },
      '@@transducer/step': function(obs, input) {
        return obs.onNext(input);
      },
      '@@transducer/result': function(obs) {
        return obs.onCompleted();
      }
    };
  }

  /**
   * Executes a transducer to transform the observable sequence
   * @param {Transducer} transducer A transducer to execute
   * @returns {Observable} An Observable sequence containing the results from the transducer.
   */
  observableProto.transduce = function(transducer) {
    var source = this;
    return new AnonymousObservable(function(o) {
      var xform = transducer(transformForObserver(o));
      return source.subscribe(new TransduceObserver(o, xform));
    }, source);
  };

  var AnonymousObservable = Rx.AnonymousObservable = (function (__super__) {
    inherits(AnonymousObservable, __super__);

    // Fix subscriber to check for undefined or function returned to decorate as Disposable
    function fixSubscriber(subscriber) {
      return subscriber && isFunction(subscriber.dispose) ? subscriber :
        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
    }

    function setDisposable(s, state) {
      var ado = state[0], self = state[1];
      var sub = tryCatch(self.__subscribe).call(self, ado);
      if (sub === errorObj && !ado.fail(errorObj.e)) { thrower(errorObj.e); }
      ado.setDisposable(fixSubscriber(sub));
    }

    function AnonymousObservable(subscribe, parent) {
      this.source = parent;
      this.__subscribe = subscribe;
      __super__.call(this);
    }

    AnonymousObservable.prototype._subscribe = function (o) {
      var ado = new AutoDetachObserver(o), state = [ado, this];

      if (currentThreadScheduler.scheduleRequired()) {
        currentThreadScheduler.schedule(state, setDisposable);
      } else {
        setDisposable(null, state);
      }
      return ado;
    };

    return AnonymousObservable;

  }(Observable));

  var AutoDetachObserver = (function (__super__) {
    inherits(AutoDetachObserver, __super__);

    function AutoDetachObserver(observer) {
      __super__.call(this);
      this.observer = observer;
      this.m = new SingleAssignmentDisposable();
    }

    var AutoDetachObserverPrototype = AutoDetachObserver.prototype;

    AutoDetachObserverPrototype.next = function (value) {
      var result = tryCatch(this.observer.onNext).call(this.observer, value);
      if (result === errorObj) {
        this.dispose();
        thrower(result.e);
      }
    };

    AutoDetachObserverPrototype.error = function (err) {
      var result = tryCatch(this.observer.onError).call(this.observer, err);
      this.dispose();
      result === errorObj && thrower(result.e);
    };

    AutoDetachObserverPrototype.completed = function () {
      var result = tryCatch(this.observer.onCompleted).call(this.observer);
      this.dispose();
      result === errorObj && thrower(result.e);
    };

    AutoDetachObserverPrototype.setDisposable = function (value) { this.m.setDisposable(value); };
    AutoDetachObserverPrototype.getDisposable = function () { return this.m.getDisposable(); };

    AutoDetachObserverPrototype.dispose = function () {
      __super__.prototype.dispose.call(this);
      this.m.dispose();
    };

    return AutoDetachObserver;
  }(AbstractObserver));

  var InnerSubscription = function (s, o) {
    this._s = s;
    this._o = o;
  };

  InnerSubscription.prototype.dispose = function () {
    if (!this._s.isDisposed && this._o !== null) {
      var idx = this._s.observers.indexOf(this._o);
      this._s.observers.splice(idx, 1);
      this._o = null;
    }
  };

  /**
   *  Represents an object that is both an observable sequence as well as an observer.
   *  Each notification is broadcasted to all subscribed observers.
   */
  var Subject = Rx.Subject = (function (__super__) {
    inherits(Subject, __super__);
    function Subject() {
      __super__.call(this);
      this.isDisposed = false;
      this.isStopped = false;
      this.observers = [];
      this.hasError = false;
    }

    addProperties(Subject.prototype, Observer.prototype, {
      _subscribe: function (o) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.observers.push(o);
          return new InnerSubscription(this, o);
        }
        if (this.hasError) {
          o.onError(this.error);
          return disposableEmpty;
        }
        o.onCompleted();
        return disposableEmpty;
      },
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
      /**
       * Notifies all subscribed observers about the end of the sequence.
       */
      onCompleted: function () {
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onCompleted();
          }

          this.observers.length = 0;
        }
      },
      /**
       * Notifies all subscribed observers about the exception.
       * @param {Mixed} error The exception to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          this.error = error;
          this.hasError = true;
          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onError(error);
          }

          this.observers.length = 0;
        }
      },
      /**
       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
       * @param {Mixed} value The value to send to all observers.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (!this.isStopped) {
          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onNext(value);
          }
        }
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
      }
    });

    /**
     * Creates a subject from the specified observer and observable.
     * @param {Observer} observer The observer used to send messages to the subject.
     * @param {Observable} observable The observable used to subscribe to messages sent from the subject.
     * @returns {Subject} Subject implemented using the given observer and observable.
     */
    Subject.create = function (observer, observable) {
      return new AnonymousSubject(observer, observable);
    };

    return Subject;
  }(Observable));

  /**
   *  Represents the result of an asynchronous operation.
   *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
   */
  var AsyncSubject = Rx.AsyncSubject = (function (__super__) {
    inherits(AsyncSubject, __super__);

    /**
     * Creates a subject that can only receive one value and that value is cached for all future observations.
     * @constructor
     */
    function AsyncSubject() {
      __super__.call(this);
      this.isDisposed = false;
      this.isStopped = false;
      this.hasValue = false;
      this.observers = [];
      this.hasError = false;
    }

    addProperties(AsyncSubject.prototype, Observer.prototype, {
      _subscribe: function (o) {
        checkDisposed(this);

        if (!this.isStopped) {
          this.observers.push(o);
          return new InnerSubscription(this, o);
        }

        if (this.hasError) {
          o.onError(this.error);
        } else if (this.hasValue) {
          o.onNext(this.value);
          o.onCompleted();
        } else {
          o.onCompleted();
        }

        return disposableEmpty;
      },
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
      /**
       * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
       */
      onCompleted: function () {
        var i, len;
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          var os = cloneArray(this.observers), len = os.length;

          if (this.hasValue) {
            for (i = 0; i < len; i++) {
              var o = os[i];
              o.onNext(this.value);
              o.onCompleted();
            }
          } else {
            for (i = 0; i < len; i++) {
              os[i].onCompleted();
            }
          }

          this.observers.length = 0;
        }
      },
      /**
       * Notifies all subscribed observers about the error.
       * @param {Mixed} error The Error to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.isStopped = true;
          this.hasError = true;
          this.error = error;

          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
            os[i].onError(error);
          }

          this.observers.length = 0;
        }
      },
      /**
       * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
       * @param {Mixed} value The value to store in the subject.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.value = value;
        this.hasValue = true;
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
        this.error = null;
        this.value = null;
      }
    });

    return AsyncSubject;
  }(Observable));

  var AnonymousSubject = Rx.AnonymousSubject = (function (__super__) {
    inherits(AnonymousSubject, __super__);
    function AnonymousSubject(observer, observable) {
      this.observer = observer;
      this.observable = observable;
      __super__.call(this);
    }

    addProperties(AnonymousSubject.prototype, Observer.prototype, {
      _subscribe: function (o) {
        return this.observable.subscribe(o);
      },
      onCompleted: function () {
        this.observer.onCompleted();
      },
      onError: function (error) {
        this.observer.onError(error);
      },
      onNext: function (value) {
        this.observer.onNext(value);
      }
    });

    return AnonymousSubject;
  }(Observable));

  /**
   *  Represents a value that changes over time.
   *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
   */
  var BehaviorSubject = Rx.BehaviorSubject = (function (__super__) {
    inherits(BehaviorSubject, __super__);
    function BehaviorSubject(value) {
      __super__.call(this);
      this.value = value;
      this.observers = [];
      this.isDisposed = false;
      this.isStopped = false;
      this.hasError = false;
    }

    addProperties(BehaviorSubject.prototype, Observer.prototype, {
      _subscribe: function (o) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.observers.push(o);
          o.onNext(this.value);
          return new InnerSubscription(this, o);
        }
        if (this.hasError) {
          o.onError(this.error);
        } else {
          o.onCompleted();
        }
        return disposableEmpty;
      },
      /**
       * Gets the current value or throws an exception.
       * Value is frozen after onCompleted is called.
       * After onError is called always throws the specified exception.
       * An exception is always thrown after dispose is called.
       * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.
       */
      getValue: function () {
        checkDisposed(this);
        if (this.hasError) { thrower(this.error); }
        return this.value;
      },
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
      /**
       * Notifies all subscribed observers about the end of the sequence.
       */
      onCompleted: function () {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          os[i].onCompleted();
        }

        this.observers.length = 0;
      },
      /**
       * Notifies all subscribed observers about the exception.
       * @param {Mixed} error The exception to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        this.hasError = true;
        this.error = error;

        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          os[i].onError(error);
        }

        this.observers.length = 0;
      },
      /**
       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
       * @param {Mixed} value The value to send to all observers.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.value = value;
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          os[i].onNext(value);
        }
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
        this.value = null;
        this.error = null;
      }
    });

    return BehaviorSubject;
  }(Observable));

  /**
   * Represents an object that is both an observable sequence as well as an observer.
   * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
   */
  var ReplaySubject = Rx.ReplaySubject = (function (__super__) {

    var maxSafeInteger = Math.pow(2, 53) - 1;

    function createRemovableDisposable(subject, observer) {
      return disposableCreate(function () {
        observer.dispose();
        !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);
      });
    }

    inherits(ReplaySubject, __super__);

    /**
     *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.
     *  @param {Number} [bufferSize] Maximum element count of the replay buffer.
     *  @param {Number} [windowSize] Maximum time length of the replay buffer.
     *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.
     */
    function ReplaySubject(bufferSize, windowSize, scheduler) {
      this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;
      this.windowSize = windowSize == null ? maxSafeInteger : windowSize;
      this.scheduler = scheduler || currentThreadScheduler;
      this.q = [];
      this.observers = [];
      this.isStopped = false;
      this.isDisposed = false;
      this.hasError = false;
      this.error = null;
      __super__.call(this);
    }

    addProperties(ReplaySubject.prototype, Observer.prototype, {
      _subscribe: function (o) {
        checkDisposed(this);
        var so = new ScheduledObserver(this.scheduler, o), subscription = createRemovableDisposable(this, so);

        this._trim(this.scheduler.now());
        this.observers.push(so);

        for (var i = 0, len = this.q.length; i < len; i++) {
          so.onNext(this.q[i].value);
        }

        if (this.hasError) {
          so.onError(this.error);
        } else if (this.isStopped) {
          so.onCompleted();
        }

        so.ensureActive();
        return subscription;
      },
      /**
       * Indicates whether the subject has observers subscribed to it.
       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
       */
      hasObservers: function () { checkDisposed(this); return this.observers.length > 0; },
      _trim: function (now) {
        while (this.q.length > this.bufferSize) {
          this.q.shift();
        }
        while (this.q.length > 0 && (now - this.q[0].interval) > this.windowSize) {
          this.q.shift();
        }
      },
      /**
       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
       * @param {Mixed} value The value to send to all observers.
       */
      onNext: function (value) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        var now = this.scheduler.now();
        this.q.push({ interval: now, value: value });
        this._trim(now);

        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          var observer = os[i];
          observer.onNext(value);
          observer.ensureActive();
        }
      },
      /**
       * Notifies all subscribed observers about the exception.
       * @param {Mixed} error The exception to send to all observers.
       */
      onError: function (error) {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        this.error = error;
        this.hasError = true;
        var now = this.scheduler.now();
        this._trim(now);
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          var observer = os[i];
          observer.onError(error);
          observer.ensureActive();
        }
        this.observers.length = 0;
      },
      /**
       * Notifies all subscribed observers about the end of the sequence.
       */
      onCompleted: function () {
        checkDisposed(this);
        if (this.isStopped) { return; }
        this.isStopped = true;
        var now = this.scheduler.now();
        this._trim(now);
        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
          var observer = os[i];
          observer.onCompleted();
          observer.ensureActive();
        }
        this.observers.length = 0;
      },
      /**
       * Unsubscribe all observers and release resources.
       */
      dispose: function () {
        this.isDisposed = true;
        this.observers = null;
      }
    });

    return ReplaySubject;
  }(Observable));

  /**
  * Used to pause and resume streams.
  */
  Rx.Pauser = (function (__super__) {
    inherits(Pauser, __super__);
    function Pauser() {
      __super__.call(this);
    }

    /**
     * Pauses the underlying sequence.
     */
    Pauser.prototype.pause = function () { this.onNext(false); };

    /**
    * Resumes the underlying sequence.
    */
    Pauser.prototype.resume = function () { this.onNext(true); };

    return Pauser;
  }(Subject));

  if (true) {
    root.Rx = Rx;

    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return Rx;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = Rx).Rx = Rx;
    } else {
      freeExports.Rx = Rx;
    }
  } else {
    // in a browser or Rhino
    root.Rx = Rx;
  }

  // All code before this point will be filtered from stack traces.
  var rEndingLine = captureLine();

}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(134)(module), __webpack_require__(133), __webpack_require__(131)))

/***/ }),
/* 133 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 134 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(31);


/***/ })
/******/ ]);
});
//# sourceMappingURL=binary-live-api.js.map

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var EventEmitter = __webpack_require__(91).EventEmitter;
var spawn = __webpack_require__(374).spawn;
var readlink = __webpack_require__(355).readlinkSync;
var path = __webpack_require__(376);
var dirname = path.dirname;
var basename = path.basename;
var fs = __webpack_require__(59);

/**
 * Expose the root command.
 */

exports = module.exports = new Command();

/**
 * Expose `Command`.
 */

exports.Command = Command;

/**
 * Expose `Option`.
 */

exports.Option = Option;

/**
 * Initialize a new `Option` with the given `flags` and `description`.
 *
 * @param {String} flags
 * @param {String} description
 * @api public
 */

function Option(flags, description) {
  this.flags = flags;
  this.required = ~flags.indexOf('<');
  this.optional = ~flags.indexOf('[');
  this.bool = !~flags.indexOf('-no-');
  flags = flags.split(/[ ,|]+/);
  if (flags.length > 1 && !/^[[<]/.test(flags[1])) this.short = flags.shift();
  this.long = flags.shift();
  this.description = description || '';
}

/**
 * Return option name.
 *
 * @return {String}
 * @api private
 */

Option.prototype.name = function() {
  return this.long
    .replace('--', '')
    .replace('no-', '');
};

/**
 * Check if `arg` matches the short or long flag.
 *
 * @param {String} arg
 * @return {Boolean}
 * @api private
 */

Option.prototype.is = function(arg) {
  return arg == this.short || arg == this.long;
};

/**
 * Initialize a new `Command`.
 *
 * @param {String} name
 * @api public
 */

function Command(name) {
  this.commands = [];
  this.options = [];
  this._execs = {};
  this._allowUnknownOption = false;
  this._args = [];
  this._name = name || '';
}

/**
 * Inherit from `EventEmitter.prototype`.
 */

Command.prototype.__proto__ = EventEmitter.prototype;

/**
 * Add command `name`.
 *
 * The `.action()` callback is invoked when the
 * command `name` is specified via __ARGV__,
 * and the remaining arguments are applied to the
 * function for access.
 *
 * When the `name` is "*" an un-matched command
 * will be passed as the first arg, followed by
 * the rest of __ARGV__ remaining.
 *
 * Examples:
 *
 *      program
 *        .version('0.0.1')
 *        .option('-C, --chdir <path>', 'change the working directory')
 *        .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')
 *        .option('-T, --no-tests', 'ignore test hook')
 *
 *      program
 *        .command('setup')
 *        .description('run remote setup commands')
 *        .action(function() {
 *          console.log('setup');
 *        });
 *
 *      program
 *        .command('exec <cmd>')
 *        .description('run the given remote command')
 *        .action(function(cmd) {
 *          console.log('exec "%s"', cmd);
 *        });
 *
 *      program
 *        .command('teardown <dir> [otherDirs...]')
 *        .description('run teardown commands')
 *        .action(function(dir, otherDirs) {
 *          console.log('dir "%s"', dir);
 *          if (otherDirs) {
 *            otherDirs.forEach(function (oDir) {
 *              console.log('dir "%s"', oDir);
 *            });
 *          }
 *        });
 *
 *      program
 *        .command('*')
 *        .description('deploy the given env')
 *        .action(function(env) {
 *          console.log('deploying "%s"', env);
 *        });
 *
 *      program.parse(process.argv);
  *
 * @param {String} name
 * @param {String} [desc] for git-style sub-commands
 * @return {Command} the new command
 * @api public
 */

Command.prototype.command = function(name, desc, opts) {
  opts = opts || {};
  var args = name.split(/ +/);
  var cmd = new Command(args.shift());

  if (desc) {
    cmd.description(desc);
    this.executables = true;
    this._execs[cmd._name] = true;
    if (opts.isDefault) this.defaultExecutable = cmd._name;
  }

  cmd._noHelp = !!opts.noHelp;
  this.commands.push(cmd);
  cmd.parseExpectedArgs(args);
  cmd.parent = this;

  if (desc) return this;
  return cmd;
};

/**
 * Define argument syntax for the top-level command.
 *
 * @api public
 */

Command.prototype.arguments = function (desc) {
  return this.parseExpectedArgs(desc.split(/ +/));
};

/**
 * Add an implicit `help [cmd]` subcommand
 * which invokes `--help` for the given command.
 *
 * @api private
 */

Command.prototype.addImplicitHelpCommand = function() {
  this.command('help [cmd]', 'display help for [cmd]');
};

/**
 * Parse expected `args`.
 *
 * For example `["[type]"]` becomes `[{ required: false, name: 'type' }]`.
 *
 * @param {Array} args
 * @return {Command} for chaining
 * @api public
 */

Command.prototype.parseExpectedArgs = function(args) {
  if (!args.length) return;
  var self = this;
  args.forEach(function(arg) {
    var argDetails = {
      required: false,
      name: '',
      variadic: false
    };

    switch (arg[0]) {
      case '<':
        argDetails.required = true;
        argDetails.name = arg.slice(1, -1);
        break;
      case '[':
        argDetails.name = arg.slice(1, -1);
        break;
    }

    if (argDetails.name.length > 3 && argDetails.name.slice(-3) === '...') {
      argDetails.variadic = true;
      argDetails.name = argDetails.name.slice(0, -3);
    }
    if (argDetails.name) {
      self._args.push(argDetails);
    }
  });
  return this;
};

/**
 * Register callback `fn` for the command.
 *
 * Examples:
 *
 *      program
 *        .command('help')
 *        .description('display verbose help')
 *        .action(function() {
 *           // output help here
 *        });
 *
 * @param {Function} fn
 * @return {Command} for chaining
 * @api public
 */

Command.prototype.action = function(fn) {
  var self = this;
  var listener = function(args, unknown) {
    // Parse any so-far unknown options
    args = args || [];
    unknown = unknown || [];

    var parsed = self.parseOptions(unknown);

    // Output help if necessary
    outputHelpIfNecessary(self, parsed.unknown);

    // If there are still any unknown options, then we simply
    // die, unless someone asked for help, in which case we give it
    // to them, and then we die.
    if (parsed.unknown.length > 0) {
      self.unknownOption(parsed.unknown[0]);
    }

    // Leftover arguments need to be pushed back. Fixes issue #56
    if (parsed.args.length) args = parsed.args.concat(args);

    self._args.forEach(function(arg, i) {
      if (arg.required && null == args[i]) {
        self.missingArgument(arg.name);
      } else if (arg.variadic) {
        if (i !== self._args.length - 1) {
          self.variadicArgNotLast(arg.name);
        }

        args[i] = args.splice(i);
      }
    });

    // Always append ourselves to the end of the arguments,
    // to make sure we match the number of arguments the user
    // expects
    if (self._args.length) {
      args[self._args.length] = self;
    } else {
      args.push(self);
    }

    fn.apply(self, args);
  };
  var parent = this.parent || this;
  var name = parent === this ? '*' : this._name;
  parent.on(name, listener);
  if (this._alias) parent.on(this._alias, listener);
  return this;
};

/**
 * Define option with `flags`, `description` and optional
 * coercion `fn`.
 *
 * The `flags` string should contain both the short and long flags,
 * separated by comma, a pipe or space. The following are all valid
 * all will output this way when `--help` is used.
 *
 *    "-p, --pepper"
 *    "-p|--pepper"
 *    "-p --pepper"
 *
 * Examples:
 *
 *     // simple boolean defaulting to false
 *     program.option('-p, --pepper', 'add pepper');
 *
 *     --pepper
 *     program.pepper
 *     // => Boolean
 *
 *     // simple boolean defaulting to true
 *     program.option('-C, --no-cheese', 'remove cheese');
 *
 *     program.cheese
 *     // => true
 *
 *     --no-cheese
 *     program.cheese
 *     // => false
 *
 *     // required argument
 *     program.option('-C, --chdir <path>', 'change the working directory');
 *
 *     --chdir /tmp
 *     program.chdir
 *     // => "/tmp"
 *
 *     // optional argument
 *     program.option('-c, --cheese [type]', 'add cheese [marble]');
 *
 * @param {String} flags
 * @param {String} description
 * @param {Function|Mixed} fn or default
 * @param {Mixed} defaultValue
 * @return {Command} for chaining
 * @api public
 */

Command.prototype.option = function(flags, description, fn, defaultValue) {
  var self = this
    , option = new Option(flags, description)
    , oname = option.name()
    , name = camelcase(oname);

  // default as 3rd arg
  if (typeof fn != 'function') {
    if (fn instanceof RegExp) {
      var regex = fn;
      fn = function(val, def) {
        var m = regex.exec(val);
        return m ? m[0] : def;
      }
    }
    else {
      defaultValue = fn;
      fn = null;
    }
  }

  // preassign default value only for --no-*, [optional], or <required>
  if (false == option.bool || option.optional || option.required) {
    // when --no-* we make sure default is true
    if (false == option.bool) defaultValue = true;
    // preassign only if we have a default
    if (undefined !== defaultValue) self[name] = defaultValue;
  }

  // register the option
  this.options.push(option);

  // when it's passed assign the value
  // and conditionally invoke the callback
  this.on(oname, function(val) {
    // coercion
    if (null !== val && fn) val = fn(val, undefined === self[name]
      ? defaultValue
      : self[name]);

    // unassigned or bool
    if ('boolean' == typeof self[name] || 'undefined' == typeof self[name]) {
      // if no value, bool true, and we have a default, then use it!
      if (null == val) {
        self[name] = option.bool
          ? defaultValue || true
          : false;
      } else {
        self[name] = val;
      }
    } else if (null !== val) {
      // reassign
      self[name] = val;
    }
  });

  return this;
};

/**
 * Allow unknown options on the command line.
 *
 * @param {Boolean} arg if `true` or omitted, no error will be thrown
 * for unknown options.
 * @api public
 */
Command.prototype.allowUnknownOption = function(arg) {
    this._allowUnknownOption = arguments.length === 0 || arg;
    return this;
};

/**
 * Parse `argv`, settings options and invoking commands when defined.
 *
 * @param {Array} argv
 * @return {Command} for chaining
 * @api public
 */

Command.prototype.parse = function(argv) {
  // implicit help
  if (this.executables) this.addImplicitHelpCommand();

  // store raw args
  this.rawArgs = argv;

  // guess name
  this._name = this._name || basename(argv[1], '.js');

  // github-style sub-commands with no sub-command
  if (this.executables && argv.length < 3 && !this.defaultExecutable) {
    // this user needs help
    argv.push('--help');
  }

  // process argv
  var parsed = this.parseOptions(this.normalize(argv.slice(2)));
  var args = this.args = parsed.args;

  var result = this.parseArgs(this.args, parsed.unknown);

  // executable sub-commands
  var name = result.args[0];
  if (this._execs[name] && typeof this._execs[name] != "function") {
    return this.executeSubCommand(argv, args, parsed.unknown);
  } else if (this.defaultExecutable) {
    // use the default subcommand
    args.unshift(name = this.defaultExecutable);
    return this.executeSubCommand(argv, args, parsed.unknown);
  }

  return result;
};

/**
 * Execute a sub-command executable.
 *
 * @param {Array} argv
 * @param {Array} args
 * @param {Array} unknown
 * @api private
 */

Command.prototype.executeSubCommand = function(argv, args, unknown) {
  args = args.concat(unknown);

  if (!args.length) this.help();
  if ('help' == args[0] && 1 == args.length) this.help();

  // <cmd> --help
  if ('help' == args[0]) {
    args[0] = args[1];
    args[1] = '--help';
  }

  // executable
  var f = argv[1];
  // name of the subcommand, link `pm-install`
  var bin = basename(f, '.js') + '-' + args[0];


  // In case of globally installed, get the base dir where executable
  //  subcommand file should be located at
  var baseDir
    , link = readlink(f);

  // when symbolink is relative path
  if (link !== f && link.charAt(0) !== '/') {
    link = path.join(dirname(f), link)
  }
  baseDir = dirname(link);

  // prefer local `./<bin>` to bin in the $PATH
  var localBin = path.join(baseDir, bin);

  // whether bin file is a js script with explicit `.js` extension
  var isExplicitJS = false;
  if (exists(localBin + '.js')) {
    bin = localBin + '.js';
    isExplicitJS = true;
  } else if (exists(localBin)) {
    bin = localBin;
  }

  args = args.slice(1);

  var proc;
  if (process.platform !== 'win32') {
    if (isExplicitJS) {
      args.unshift(localBin);
      // add executable arguments to spawn
      args = (process.execArgv || []).concat(args);

      proc = spawn('node', args, { stdio: 'inherit', customFds: [0, 1, 2] });
    } else {
      proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });
    }
  } else {
    args.unshift(localBin);
    proc = spawn(process.execPath, args, { stdio: 'inherit'});
  }

  proc.on('close', process.exit.bind(process));
  proc.on('error', function(err) {
    if (err.code == "ENOENT") {
      console.error('\n  %s(1) does not exist, try --help\n', bin);
    } else if (err.code == "EACCES") {
      console.error('\n  %s(1) not executable. try chmod or run with root\n', bin);
    }
    process.exit(1);
  });

  // Store the reference to the child process
  this.runningCommand = proc;
};

/**
 * Normalize `args`, splitting joined short flags. For example
 * the arg "-abc" is equivalent to "-a -b -c".
 * This also normalizes equal sign and splits "--abc=def" into "--abc def".
 *
 * @param {Array} args
 * @return {Array}
 * @api private
 */

Command.prototype.normalize = function(args) {
  var ret = []
    , arg
    , lastOpt
    , index;

  for (var i = 0, len = args.length; i < len; ++i) {
    arg = args[i];
    if (i > 0) {
      lastOpt = this.optionFor(args[i-1]);
    }

    if (arg === '--') {
      // Honor option terminator
      ret = ret.concat(args.slice(i));
      break;
    } else if (lastOpt && lastOpt.required) {
      ret.push(arg);
    } else if (arg.length > 1 && '-' == arg[0] && '-' != arg[1]) {
      arg.slice(1).split('').forEach(function(c) {
        ret.push('-' + c);
      });
    } else if (/^--/.test(arg) && ~(index = arg.indexOf('='))) {
      ret.push(arg.slice(0, index), arg.slice(index + 1));
    } else {
      ret.push(arg);
    }
  }

  return ret;
};

/**
 * Parse command `args`.
 *
 * When listener(s) are available those
 * callbacks are invoked, otherwise the "*"
 * event is emitted and those actions are invoked.
 *
 * @param {Array} args
 * @return {Command} for chaining
 * @api private
 */

Command.prototype.parseArgs = function(args, unknown) {
  var name;

  if (args.length) {
    name = args[0];
    if (this.listeners(name).length) {
      this.emit(args.shift(), args, unknown);
    } else {
      this.emit('*', args);
    }
  } else {
    outputHelpIfNecessary(this, unknown);

    // If there were no args and we have unknown options,
    // then they are extraneous and we need to error.
    if (unknown.length > 0) {
      this.unknownOption(unknown[0]);
    }
  }

  return this;
};

/**
 * Return an option matching `arg` if any.
 *
 * @param {String} arg
 * @return {Option}
 * @api private
 */

Command.prototype.optionFor = function(arg) {
  for (var i = 0, len = this.options.length; i < len; ++i) {
    if (this.options[i].is(arg)) {
      return this.options[i];
    }
  }
};

/**
 * Parse options from `argv` returning `argv`
 * void of these options.
 *
 * @param {Array} argv
 * @return {Array}
 * @api public
 */

Command.prototype.parseOptions = function(argv) {
  var args = []
    , len = argv.length
    , literal
    , option
    , arg;

  var unknownOptions = [];

  // parse options
  for (var i = 0; i < len; ++i) {
    arg = argv[i];

    // literal args after --
    if ('--' == arg) {
      literal = true;
      continue;
    }

    if (literal) {
      args.push(arg);
      continue;
    }

    // find matching Option
    option = this.optionFor(arg);

    // option is defined
    if (option) {
      // requires arg
      if (option.required) {
        arg = argv[++i];
        if (null == arg) return this.optionMissingArgument(option);
        this.emit(option.name(), arg);
      // optional arg
      } else if (option.optional) {
        arg = argv[i+1];
        if (null == arg || ('-' == arg[0] && '-' != arg)) {
          arg = null;
        } else {
          ++i;
        }
        this.emit(option.name(), arg);
      // bool
      } else {
        this.emit(option.name());
      }
      continue;
    }

    // looks like an option
    if (arg.length > 1 && '-' == arg[0]) {
      unknownOptions.push(arg);

      // If the next argument looks like it might be
      // an argument for this option, we pass it on.
      // If it isn't, then it'll simply be ignored
      if (argv[i+1] && '-' != argv[i+1][0]) {
        unknownOptions.push(argv[++i]);
      }
      continue;
    }

    // arg
    args.push(arg);
  }

  return { args: args, unknown: unknownOptions };
};

/**
 * Return an object containing options as key-value pairs
 *
 * @return {Object}
 * @api public
 */
Command.prototype.opts = function() {
  var result = {}
    , len = this.options.length;

  for (var i = 0 ; i < len; i++) {
    var key = camelcase(this.options[i].name());
    result[key] = key === 'version' ? this._version : this[key];
  }
  return result;
};

/**
 * Argument `name` is missing.
 *
 * @param {String} name
 * @api private
 */

Command.prototype.missingArgument = function(name) {
  console.error();
  console.error("  error: missing required argument `%s'", name);
  console.error();
  process.exit(1);
};

/**
 * `Option` is missing an argument, but received `flag` or nothing.
 *
 * @param {String} option
 * @param {String} flag
 * @api private
 */

Command.prototype.optionMissingArgument = function(option, flag) {
  console.error();
  if (flag) {
    console.error("  error: option `%s' argument missing, got `%s'", option.flags, flag);
  } else {
    console.error("  error: option `%s' argument missing", option.flags);
  }
  console.error();
  process.exit(1);
};

/**
 * Unknown option `flag`.
 *
 * @param {String} flag
 * @api private
 */

Command.prototype.unknownOption = function(flag) {
  if (this._allowUnknownOption) return;
  console.error();
  console.error("  error: unknown option `%s'", flag);
  console.error();
  process.exit(1);
};

/**
 * Variadic argument with `name` is not the last argument as required.
 *
 * @param {String} name
 * @api private
 */

Command.prototype.variadicArgNotLast = function(name) {
  console.error();
  console.error("  error: variadic arguments must be last `%s'", name);
  console.error();
  process.exit(1);
};

/**
 * Set the program version to `str`.
 *
 * This method auto-registers the "-V, --version" flag
 * which will print the version number when passed.
 *
 * @param {String} str
 * @param {String} flags
 * @return {Command} for chaining
 * @api public
 */

Command.prototype.version = function(str, flags) {
  if (0 == arguments.length) return this._version;
  this._version = str;
  flags = flags || '-V, --version';
  this.option(flags, 'output the version number');
  this.on('version', function() {
    process.stdout.write(str + '\n');
    process.exit(0);
  });
  return this;
};

/**
 * Set the description to `str`.
 *
 * @param {String} str
 * @return {String|Command}
 * @api public
 */

Command.prototype.description = function(str) {
  if (0 === arguments.length) return this._description;
  this._description = str;
  return this;
};

/**
 * Set an alias for the command
 *
 * @param {String} alias
 * @return {String|Command}
 * @api public
 */

Command.prototype.alias = function(alias) {
  if (0 == arguments.length) return this._alias;
  this._alias = alias;
  return this;
};

/**
 * Set / get the command usage `str`.
 *
 * @param {String} str
 * @return {String|Command}
 * @api public
 */

Command.prototype.usage = function(str) {
  var args = this._args.map(function(arg) {
    return humanReadableArgName(arg);
  });

  var usage = '[options]'
    + (this.commands.length ? ' [command]' : '')
    + (this._args.length ? ' ' + args.join(' ') : '');

  if (0 == arguments.length) return this._usage || usage;
  this._usage = str;

  return this;
};

/**
 * Get the name of the command
 *
 * @param {String} name
 * @return {String|Command}
 * @api public
 */

Command.prototype.name = function() {
  return this._name;
};

/**
 * Return the largest option length.
 *
 * @return {Number}
 * @api private
 */

Command.prototype.largestOptionLength = function() {
  return this.options.reduce(function(max, option) {
    return Math.max(max, option.flags.length);
  }, 0);
};

/**
 * Return help for options.
 *
 * @return {String}
 * @api private
 */

Command.prototype.optionHelp = function() {
  var width = this.largestOptionLength();

  // Prepend the help information
  return [pad('-h, --help', width) + '  ' + 'output usage information']
      .concat(this.options.map(function(option) {
        return pad(option.flags, width) + '  ' + option.description;
      }))
      .join('\n');
};

/**
 * Return command help documentation.
 *
 * @return {String}
 * @api private
 */

Command.prototype.commandHelp = function() {
  if (!this.commands.length) return '';

  var commands = this.commands.filter(function(cmd) {
    return !cmd._noHelp;
  }).map(function(cmd) {
    var args = cmd._args.map(function(arg) {
      return humanReadableArgName(arg);
    }).join(' ');

    return [
      cmd._name
        + (cmd._alias ? '|' + cmd._alias : '')
        + (cmd.options.length ? ' [options]' : '')
        + ' ' + args
      , cmd.description()
    ];
  });

  var width = commands.reduce(function(max, command) {
    return Math.max(max, command[0].length);
  }, 0);

  return [
    ''
    , '  Commands:'
    , ''
    , commands.map(function(cmd) {
      var desc = cmd[1] ? '  ' + cmd[1] : '';
      return pad(cmd[0], width) + desc;
    }).join('\n').replace(/^/gm, '    ')
    , ''
  ].join('\n');
};

/**
 * Return program help documentation.
 *
 * @return {String}
 * @api private
 */

Command.prototype.helpInformation = function() {
  var desc = [];
  if (this._description) {
    desc = [
      '  ' + this._description
      , ''
    ];
  }

  var cmdName = this._name;
  if (this._alias) {
    cmdName = cmdName + '|' + this._alias;
  }
  var usage = [
    ''
    ,'  Usage: ' + cmdName + ' ' + this.usage()
    , ''
  ];

  var cmds = [];
  var commandHelp = this.commandHelp();
  if (commandHelp) cmds = [commandHelp];

  var options = [
    '  Options:'
    , ''
    , '' + this.optionHelp().replace(/^/gm, '    ')
    , ''
    , ''
  ];

  return usage
    .concat(cmds)
    .concat(desc)
    .concat(options)
    .join('\n');
};

/**
 * Output help information for this command
 *
 * @api public
 */

Command.prototype.outputHelp = function(cb) {
  if (!cb) {
    cb = function(passthru) {
      return passthru;
    }
  }
  process.stdout.write(cb(this.helpInformation()));
  this.emit('--help');
};

/**
 * Output help information and exit.
 *
 * @api public
 */

Command.prototype.help = function(cb) {
  this.outputHelp(cb);
  process.exit();
};

/**
 * Camel-case the given `flag`
 *
 * @param {String} flag
 * @return {String}
 * @api private
 */

function camelcase(flag) {
  return flag.split('-').reduce(function(str, word) {
    return str + word[0].toUpperCase() + word.slice(1);
  });
}

/**
 * Pad `str` to `width`.
 *
 * @param {String} str
 * @param {Number} width
 * @return {String}
 * @api private
 */

function pad(str, width) {
  var len = Math.max(0, width - str.length);
  return str + Array(len + 1).join(' ');
}

/**
 * Output help information if necessary
 *
 * @param {Command} command to output help for
 * @param {Array} array of options to search for -h or --help
 * @api private
 */

function outputHelpIfNecessary(cmd, options) {
  options = options || [];
  for (var i = 0; i < options.length; i++) {
    if (options[i] == '--help' || options[i] == '-h') {
      cmd.outputHelp();
      process.exit(0);
    }
  }
}

/**
 * Takes an argument an returns its human readable equivalent for help usage.
 *
 * @param {Object} arg
 * @return {String}
 * @api private
 */

function humanReadableArgName(arg) {
  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');

  return arg.required
    ? '<' + nameOutput + '>'
    : '[' + nameOutput + ']'
}

// for versions before node v0.8 when there weren't `fs.existsSync`
function exists(file) {
  try {
    if (fs.statSync(file).isFile()) {
      return true;
    }
  } catch (e) {
    return false;
  }
}



/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', {copyWithin: __webpack_require__(109)});

__webpack_require__(24)('copyWithin');

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', {fill: __webpack_require__(70)});

__webpack_require__(24)('fill');

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(0)
  , $find   = __webpack_require__(36)(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(24)(KEY);

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(0)
  , $find   = __webpack_require__(36)(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(24)(KEY);

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx            = __webpack_require__(13)
  , $export        = __webpack_require__(0)
  , toObject       = __webpack_require__(20)
  , call           = __webpack_require__(117)
  , isArrayIter    = __webpack_require__(78)
  , toLength       = __webpack_require__(9)
  , createProperty = __webpack_require__(73)
  , getIterFn      = __webpack_require__(87);

$export($export.S + $export.F * !__webpack_require__(54)(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export        = __webpack_require__(0)
  , createProperty = __webpack_require__(73);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(5)(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , aLen   = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(aLen);
    while(aLen > index)createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

var dP         = __webpack_require__(6).f
  , createDesc = __webpack_require__(17)
  , has        = __webpack_require__(7)
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';

var isExtensible = Object.isExtensible || function(){
  return true;
};

// 19.2.4.2 name
NAME in FProto || __webpack_require__(8) && dP(FProto, NAME, {
  configurable: true,
  get: function(){
    try {
      var that = this
        , name = ('' + that).match(nameRE)[1];
      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
      return name;
    } catch(e){
      return '';
    }
  }
});

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(110);

// 23.1 Map Objects
module.exports = __webpack_require__(50)('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(0)
  , log1p   = __webpack_require__(120)
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(0)
  , $asinh  = Math.asinh;

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0 
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(0)
  , $atanh  = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0 
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(0)
  , sign    = __webpack_require__(80);

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(0)
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(0)
  , $expm1  = __webpack_require__(79);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export   = __webpack_require__(0)
  , sign      = __webpack_require__(80)
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(0)
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , aLen = arguments.length
      , larg = 0
      , arg, div;
    while(i < aLen){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(0)
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(5)(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {log1p: __webpack_require__(120)});

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {sign: __webpack_require__(80)});

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(0)
  , expm1   = __webpack_require__(79)
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(5)(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(0)
  , expm1   = __webpack_require__(79)
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(0);

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export   = __webpack_require__(0)
  , _isFinite = __webpack_require__(1).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', {isInteger: __webpack_require__(115)});

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export   = __webpack_require__(0)
  , isInteger = __webpack_require__(115)
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(0);

$export($export.S + $export.F, 'Object', {assign: __webpack_require__(121)});

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(0);
$export($export.S, 'Object', {is: __webpack_require__(125)});

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(0);
$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(81).set});

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY            = __webpack_require__(28)
  , global             = __webpack_require__(1)
  , ctx                = __webpack_require__(13)
  , classof            = __webpack_require__(72)
  , $export            = __webpack_require__(0)
  , isObject           = __webpack_require__(4)
  , aFunction          = __webpack_require__(19)
  , anInstance         = __webpack_require__(25)
  , forOf              = __webpack_require__(52)
  , speciesConstructor = __webpack_require__(126)
  , task               = __webpack_require__(86).set
  , microtask          = __webpack_require__(346)()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[__webpack_require__(3)('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(30)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
__webpack_require__(31)($Promise, PROMISE);
__webpack_require__(82)(PROMISE);
Wrapper = __webpack_require__(37)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(54)(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export   = __webpack_require__(0)
  , aFunction = __webpack_require__(19)
  , anObject  = __webpack_require__(2)
  , rApply    = (__webpack_require__(1).Reflect || {}).apply
  , fApply    = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(5)(function(){
  rApply(function(){});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    var T = aFunction(target)
      , L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export    = __webpack_require__(0)
  , create     = __webpack_require__(39)
  , aFunction  = __webpack_require__(19)
  , anObject   = __webpack_require__(2)
  , isObject   = __webpack_require__(4)
  , fails      = __webpack_require__(5)
  , bind       = __webpack_require__(340)
  , rConstruct = (__webpack_require__(1).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function(){
  function F(){}
  return !(rConstruct(function(){}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function(){
  rConstruct(function(){});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      switch(args.length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP          = __webpack_require__(6)
  , $export     = __webpack_require__(0)
  , anObject    = __webpack_require__(2)
  , toPrimitive = __webpack_require__(44);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(5)(function(){
  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = __webpack_require__(0)
  , gOPD     = __webpack_require__(16).f
  , anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD     = __webpack_require__(16)
  , $export  = __webpack_require__(0)
  , anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return gOPD.f(anObject(target), propertyKey);
  }
});

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = __webpack_require__(0)
  , getProto = __webpack_require__(41)
  , anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD           = __webpack_require__(16)
  , getPrototypeOf = __webpack_require__(41)
  , has            = __webpack_require__(7)
  , $export        = __webpack_require__(0)
  , isObject       = __webpack_require__(4)
  , anObject       = __webpack_require__(2);

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export       = __webpack_require__(0)
  , anObject      = __webpack_require__(2)
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', {ownKeys: __webpack_require__(124)});

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export            = __webpack_require__(0)
  , anObject           = __webpack_require__(2)
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = __webpack_require__(0)
  , setProto = __webpack_require__(81);

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP             = __webpack_require__(6)
  , gOPD           = __webpack_require__(16)
  , getPrototypeOf = __webpack_require__(41)
  , has            = __webpack_require__(7)
  , $export        = __webpack_require__(0)
  , createDesc     = __webpack_require__(17)
  , anObject       = __webpack_require__(2)
  , isObject       = __webpack_require__(4);

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = gOPD.f(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = getPrototypeOf(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if(__webpack_require__(8) && /./g.flags != 'g')__webpack_require__(6).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(342)
});

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

// @@match logic
__webpack_require__(51)('match', 1, function(defined, MATCH, $match){
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

// @@replace logic
__webpack_require__(51)('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

// @@search logic
__webpack_require__(51)('search', 1, function(defined, SEARCH, $search){
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

// @@split logic
__webpack_require__(51)('split', 2, function(defined, SPLIT, $split){
  'use strict';
  var isRegExp   = __webpack_require__(116)
    , _split     = $split
    , $push      = [].push
    , $SPLIT     = 'split'
    , LENGTH     = 'length'
    , LAST_INDEX = 'lastIndex';
  if(
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ){
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function(separator, limit){
      var string = String(this);
      if(separator === undefined && limit === 0)return [];
      // If `separator` is not a regex, use native split
      if(!isRegExp(separator))return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while(match = separatorCopy.exec(string)){
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if(lastIndex > lastLastIndex){
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
          });
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if(output[LENGTH] >= splitLimit)break;
        }
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if(lastLastIndex === string[LENGTH]){
        if(lastLength || !separatorCopy.test(''))output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
    $split = function(separator, limit){
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit){
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(110);

// 23.2 Set Objects
module.exports = __webpack_require__(50)('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0)
  , $at     = __webpack_require__(351)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export   = __webpack_require__(0)
  , toLength  = __webpack_require__(9)
  , context   = __webpack_require__(85)
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(76)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , endPosition = arguments.length > 1 ? arguments[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

var $export        = __webpack_require__(0)
  , toIndex        = __webpack_require__(43)
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res  = []
      , aLen = arguments.length
      , i    = 0
      , code;
    while(aLen > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export  = __webpack_require__(0)
  , context  = __webpack_require__(85)
  , INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(76)(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

var $export   = __webpack_require__(0)
  , toIObject = __webpack_require__(12)
  , toLength  = __webpack_require__(9);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl  = toIObject(callSite.raw)
      , len  = toLength(tpl.length)
      , aLen = arguments.length
      , res  = []
      , i    = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < aLen)res.push(String(arguments[i]));
    } return res.join('');
  }
});

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(128)
});

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export     = __webpack_require__(0)
  , toLength    = __webpack_require__(9)
  , context     = __webpack_require__(85)
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(76)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global         = __webpack_require__(1)
  , has            = __webpack_require__(7)
  , DESCRIPTORS    = __webpack_require__(8)
  , $export        = __webpack_require__(0)
  , redefine       = __webpack_require__(18)
  , META           = __webpack_require__(38).KEY
  , $fails         = __webpack_require__(5)
  , shared         = __webpack_require__(84)
  , setToStringTag = __webpack_require__(31)
  , uid            = __webpack_require__(21)
  , wks            = __webpack_require__(3)
  , wksExt         = __webpack_require__(130)
  , wksDefine      = __webpack_require__(353)
  , keyOf          = __webpack_require__(345)
  , enumKeys       = __webpack_require__(341)
  , isArray        = __webpack_require__(114)
  , anObject       = __webpack_require__(2)
  , toIObject      = __webpack_require__(12)
  , toPrimitive    = __webpack_require__(44)
  , createDesc     = __webpack_require__(17)
  , _create        = __webpack_require__(39)
  , gOPNExt        = __webpack_require__(348)
  , $GOPD          = __webpack_require__(16)
  , $DP            = __webpack_require__(6)
  , $keys          = __webpack_require__(29)
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  __webpack_require__(40).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(42).f  = $propertyIsEnumerable;
  __webpack_require__(55).f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !__webpack_require__(28)){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(10)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(14)('Float32', 4, function(init){
  return function Float32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(14)('Float64', 8, function(init){
  return function Float64Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(14)('Int16', 2, function(init){
  return function Int16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(14)('Int32', 4, function(init){
  return function Int32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(14)('Int8', 1, function(init){
  return function Int8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(14)('Uint16', 2, function(init){
  return function Uint16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(14)('Uint32', 4, function(init){
  return function Uint32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(14)('Uint8', 1, function(init){
  return function Uint8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(14)('Uint8', 1, function(init){
  return function Uint8ClampedArray(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
}, true);

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var each         = __webpack_require__(36)(0)
  , redefine     = __webpack_require__(18)
  , meta         = __webpack_require__(38)
  , assign       = __webpack_require__(121)
  , weak         = __webpack_require__(111)
  , isObject     = __webpack_require__(4)
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(50)('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(111);

// 23.4 WeakSet Objects
__webpack_require__(50)('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export   = __webpack_require__(0)
  , $includes = __webpack_require__(71)(true);

$export($export.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(24)('includes');

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export  = __webpack_require__(0)
  , $entries = __webpack_require__(123)(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export        = __webpack_require__(0)
  , ownKeys        = __webpack_require__(124)
  , toIObject      = __webpack_require__(12)
  , gOPD           = __webpack_require__(16)
  , createProperty = __webpack_require__(73);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , getDesc = gOPD.f
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key;
    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
    return result;
  }
});

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0)
  , $values = __webpack_require__(123)(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0)
  , $pad    = __webpack_require__(127);

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0)
  , $pad    = __webpack_require__(127);

$export($export.P, 'String', {
  padStart: function padStart(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators    = __webpack_require__(58)
  , redefine      = __webpack_require__(18)
  , global        = __webpack_require__(1)
  , hide          = __webpack_require__(10)
  , Iterators     = __webpack_require__(27)
  , wks           = __webpack_require__(3)
  , ITERATOR      = wks('iterator')
  , TO_STRING_TAG = wks('toStringTag')
  , ArrayValues   = Iterators.Array;

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype
    , key;
  if(proto){
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
  }
}

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0)
  , $task   = __webpack_require__(86);
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global     = __webpack_require__(1)
  , $export    = __webpack_require__(0)
  , invoke     = __webpack_require__(53)
  , partial    = __webpack_require__(349)
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

/***/ }),
/* 226 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = arg;

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */



const WebSocket = __webpack_require__(136);

WebSocket.Server = __webpack_require__(360);
WebSocket.Receiver = __webpack_require__(134);
WebSocket.Sender = __webpack_require__(135);

module.exports = WebSocket;


/***/ }),
/* 228 */
/***/ (function(module, exports) {

module.exports = require("readline");

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _sanitize = __webpack_require__(60);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Interface) {
  return function (_Interface) {
    _inherits(_class, _Interface);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, _Interface.apply(this, arguments));
    }

    _class.prototype.getCandleInterface = function getCandleInterface() {
      return {
        isCandleBlack: function isCandleBlack(candle) {
          return (0, _sanitize.expectCandle)(candle) && candle.close < candle.open;
        },
        candleValues: function candleValues(ohlc, field) {
          return (0, _sanitize.expectCandles)(ohlc).map(function (o) {
            return o[field];
          });
        },
        candleField: function candleField(candle, field) {
          return (0, _sanitize.expectCandle)(candle)[field];
        }
      };
    };

    return _class;
  }(Interface);
};

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _simpleMovingAverage = __webpack_require__(61);

var _simpleMovingAverage2 = _interopRequireDefault(_simpleMovingAverage);

var _exponentialMovingAverage = __webpack_require__(93);

var _exponentialMovingAverage2 = _interopRequireDefault(_exponentialMovingAverage);

var _bollingerBands = __webpack_require__(246);

var _bollingerBands2 = _interopRequireDefault(_bollingerBands);

var _relativeStrengthIndex = __webpack_require__(248);

var _relativeStrengthIndex2 = _interopRequireDefault(_relativeStrengthIndex);

var _macd = __webpack_require__(247);

var _macd2 = _interopRequireDefault(_macd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Interface) {
  return function (_Interface) {
    _inherits(_class, _Interface);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, _Interface.apply(this, arguments));
    }

    _class.prototype.getIndicatorsInterface = function getIndicatorsInterface() {
      var _this2 = this;

      return {
        sma: function sma(input, periods) {
          return _this2.decorate(_simpleMovingAverage2.default, input, { periods: periods });
        },
        smaa: function smaa(input, periods) {
          return _this2.decorate(_simpleMovingAverage.simpleMovingAverageArray, input, { periods: periods });
        },
        ema: function ema(input, periods) {
          return _this2.decorate(_exponentialMovingAverage2.default, input, { periods: periods });
        },
        emaa: function emaa(input, periods) {
          return _this2.decorate(_exponentialMovingAverage.exponentialMovingAverageArray, input, { periods: periods });
        },
        rsi: function rsi(input, periods) {
          return _this2.decorate(_relativeStrengthIndex2.default, input, { periods: periods });
        },
        rsia: function rsia(input, periods) {
          return _this2.decorate(_relativeStrengthIndex.relativeStrengthIndexArray, input, { periods: periods });
        },
        bb: function bb(input, config, field) {
          return _this2.decorate(_bollingerBands2.default, input, config)[field];
        },
        bba: function bba(input, config, field) {
          return _this2.decorate(_bollingerBands.bollingerBandsArray, input, config).map(function (r) {
            return r[field];
          });
        },
        macda: function macda(input, config, field) {
          return _this2.decorate(_macd2.default, input, config).map(function (r) {
            return r[field];
          });
        }
      };
    };

    _class.prototype.decorate = function decorate(f, input, config) {
      var pipSize = this.tradeEngine.getPipSize();

      for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        args[_key - 3] = arguments[_key];
      }

      return f.apply(undefined, [input, Object.assign({ pipSize: pipSize }, config)].concat(args));
    };

    return _class;
  }(Interface);
};

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _observer = __webpack_require__(22);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Interface) {
  return function (_Interface) {
    _inherits(_class, _Interface);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, _Interface.apply(this, arguments));
    }

    _class.prototype.getMiscInterface = function getMiscInterface() {
      var _this2 = this;

      return {
        notify: function notify() {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _observer.observer.emit('Notify', args);
        },
        getTotalRuns: function getTotalRuns() {
          return _this2.tradeEngine.getTotalRuns();
        },
        getBalance: function getBalance(type) {
          return _this2.tradeEngine.getBalance(type);
        },
        getTotalProfit: function getTotalProfit() {
          return _this2.tradeEngine.getTotalProfit();
        }
      };
    };

    return _class;
  }(Interface);
};

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _i18n = __webpack_require__(23);

var _sanitize = __webpack_require__(60);

var _tools = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Interface) {
  return function (_Interface) {
    _inherits(_class, _Interface);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, _Interface.apply(this, arguments));
    }

    _class.prototype.getTicksInterface = function getTicksInterface() {
      var _this2 = this;

      return {
        getLastTick: function getLastTick(symbol) {
          return _this2.getLastTick(symbol);
        },
        getLastDigit: function getLastDigit(symbol) {
          return _this2.getLastDigit(symbol);
        },
        getTicks: function getTicks(symbol) {
          return _this2.getTicks(symbol);
        },
        checkDirection: function checkDirection(_ref) {
          var symbol = _ref.symbol,
              dir = _ref.dir;
          return new Promise(function (resolve) {
            return _this2.getDirection(symbol).then(function (d) {
              return resolve(d === dir);
            });
          });
        },
        getOhlcFromEnd: function getOhlcFromEnd(args) {
          var _ref2 = args || {},
              _ref2$index = _ref2.index,
              i = _ref2$index === undefined ? 1 : _ref2$index;

          var index = (0, _sanitize.expectPositiveInteger)(i, (0, _i18n.translate)('Index must be a positive integer'));

          return new Promise(function (resolve) {
            return _this2.getOhlc(args).then(function (ohlc) {
              return resolve(ohlc.slice(-index)[0]);
            });
          });
        },
        getOhlc: function getOhlc(args) {
          return _this2.getOhlc(args);
        }
      };
    };

    _class.prototype.getTicks = function getTicks(symbol) {
      return this.getHistory({ symbol: symbol }).then(function (ticks) {
        return ticks.map(function (o) {
          return o.quote;
        });
      });
    };

    _class.prototype.getLastDigit = function getLastDigit(symbol) {
      var _this3 = this;

      return new Promise(function (resolve) {
        return _this3.getLastTick(symbol).then(function (tick) {
          return _this3.getPipSize(symbol).then(function (pipSize) {
            return resolve(+tick.toFixed(pipSize).slice(-1)[0]);
          });
        });
      });
    };

    _class.prototype.getDirection = function getDirection(symbol) {
      var _this4 = this;

      return new Promise(function (resolve) {
        _this4.getHistory({ symbol: symbol }).then(function (ticks) {
          return resolve((0, _tools.getDirection)(ticks));
        });
      });
    };

    _class.prototype.getOhlc = function getOhlc(args) {
      var _this5 = this;

      var _ref3 = args || {},
          symbol = _ref3.symbol,
          _ref3$granularity = _ref3.granularity,
          granularity = _ref3$granularity === undefined ? 60 : _ref3$granularity,
          field = _ref3.field;

      return new Promise(function (resolve) {
        return _this5.getHistory({ symbol: symbol, granularity: granularity }).then(function (ohlc) {
          return resolve(field ? ohlc.map(function (o) {
            return o[field];
          }) : ohlc);
        });
      });
    };

    _class.prototype.getLastTick = function getLastTick(symbol) {
      var _this6 = this;

      if (!symbol && !this.getSymbol()) {
        throw (0, _i18n.translate)('An underlying symbol has to be set in getHistory');
      }
      return new Promise(function (resolve) {
        return _this6.$scope.ticksService.getLast({ symbol: symbol || _this6.getSymbol() }).then(function (tick) {
          return resolve(tick.quote);
        });
      });
    };

    _class.prototype.getHistory = function getHistory(_ref4) {
      var symbol = _ref4.symbol,
          granularity = _ref4.granularity;

      if (!symbol && !this.getSymbol()) {
        throw (0, _i18n.translate)('An underlying symbol has to be set in getHistory');
      }
      return this.$scope.ticksService.getHistory({ symbol: symbol || this.getSymbol(), granularity: granularity });
    };

    _class.prototype.getPipSize = function getPipSize() {
      var _this7 = this;

      var symbol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSymbol();

      if (symbol === this.getSymbol()) {
        return Promise.resolve(this.tradeEngine.getPipSize());
      }

      return new Promise(function (resolve) {
        return _this7.api.getActiveSymbolsBrief().then(function (r) {
          var activeSymbol = r.active_symbols.find(function (a) {
            return a.symbol === symbol;
          });

          resolve(+(+activeSymbol.pip).toExponential().substring(3));
        });
      });
    };

    _class.prototype.getSymbol = function getSymbol() {
      return this.tradeEngine.getSymbol();
    };

    return _class;
  }(Interface);
};

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _CandleInterface = __webpack_require__(229);

var _CandleInterface2 = _interopRequireDefault(_CandleInterface);

var _MiscInterface = __webpack_require__(231);

var _MiscInterface2 = _interopRequireDefault(_MiscInterface);

var _IndicatorsInterface2 = __webpack_require__(230);

var _IndicatorsInterface3 = _interopRequireDefault(_IndicatorsInterface2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Interface) {
  return function (_IndicatorsInterface) {
    _inherits(_class, _IndicatorsInterface);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, _IndicatorsInterface.apply(this, arguments));
    }

    _class.prototype.getToolsInterface = function getToolsInterface() {
      return Object.assign({
        getTime: function getTime() {
          return parseInt(new Date().getTime() / 1000, 10);
        }
      }, this.getCandleInterface(), this.getMiscInterface(), this.getIndicatorsInterface());
    };

    return _class;
  }((0, _IndicatorsInterface3.default)((0, _MiscInterface2.default)((0, _CandleInterface2.default)(Interface))));
};

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _TradeEngine = __webpack_require__(243);

var _TradeEngine2 = _interopRequireDefault(_TradeEngine);

var _tools = __webpack_require__(11);

var _TicksInterface = __webpack_require__(232);

var _TicksInterface2 = _interopRequireDefault(_TicksInterface);

var _ToolsInterface2 = __webpack_require__(233);

var _ToolsInterface3 = _interopRequireDefault(_ToolsInterface2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Bot - Bot Module
 * @namespace Bot
 */

var Interface = function (_ToolsInterface) {
  _inherits(Interface, _ToolsInterface);

  function Interface($scope) {
    _classCallCheck(this, Interface);

    var _this = _possibleConstructorReturn(this, _ToolsInterface.call(this));

    _this.tradeEngine = new _TradeEngine2.default($scope);
    _this.api = $scope.api;
    _this.observer = $scope.observer;
    _this.$scope = $scope;
    return _this;
  }

  Interface.prototype.getInterface = function getInterface() {
    var _this2 = this;

    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Global';

    return name === 'Bot' ? Object.assign({}, this.getBotInterface(), this.getToolsInterface()) : {
      watch: function watch() {
        var _tradeEngine;

        return (_tradeEngine = _this2.tradeEngine).watch.apply(_tradeEngine, arguments);
      },
      sleep: function sleep() {
        return _this2.sleep.apply(_this2, arguments);
      },
      alert: function (_alert) {
        function alert() {
          return _alert.apply(this, arguments);
        }

        alert.toString = function () {
          return _alert.toString();
        };

        return alert;
      }(function () {
        return alert.apply(undefined, arguments);
      }) };
  };

  Interface.prototype.getBotInterface = function getBotInterface() {
    var _this3 = this;

    var getDetail = function getDetail(i) {
      return (0, _tools.createDetails)(_this3.get('contract'))[i];
    };

    return {
      init: function init() {
        var _tradeEngine2;

        return (_tradeEngine2 = _this3.tradeEngine).init.apply(_tradeEngine2, arguments);
      },
      start: function start() {
        var _tradeEngine3;

        return (_tradeEngine3 = _this3.tradeEngine).start.apply(_tradeEngine3, arguments);
      },
      stop: function stop() {
        var _tradeEngine4;

        return (_tradeEngine4 = _this3.tradeEngine).stop.apply(_tradeEngine4, arguments);
      },
      purchase: function purchase(contractType) {
        return _this3.tradeEngine.purchase(contractType);
      },
      getAskPrice: function getAskPrice(contractType) {
        return +_this3.getProposal(contractType).ask_price;
      },
      getPayout: function getPayout(contractType) {
        return +_this3.getProposal(contractType).payout;
      },
      isSellAvailable: function isSellAvailable() {
        return _this3.tradeEngine.isSellAtMarketAvailable();
      },
      sellAtMarket: function sellAtMarket() {
        return _this3.tradeEngine.sellAtMarket();
      },
      getSellPrice: function getSellPrice() {
        return _this3.getSellPrice();
      },
      isResult: function isResult(result) {
        return getDetail(10) === result;
      },
      readDetails: function readDetails(i) {
        return getDetail(i - 1);
      }
    };
  };

  Interface.prototype.sleep = function sleep() {
    var _this4 = this;

    var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    return new Promise(function (r) {
      return setTimeout(function () {
        r();
        setTimeout(function () {
          return _this4.observer.emit('CONTINUE');
        }, 0);
      }, arg * 1000);
    }, _tools.noop);
  };

  Interface.prototype.getProposal = function getProposal(contractType) {
    var proposals = this.get('proposals');

    var proposal = void 0;

    proposals.forEach(function (p) {
      if (p.contractType === contractType) {
        proposal = p;
      }
    });

    return proposal;
  };

  Interface.prototype.getSellPrice = function getSellPrice() {
    var _get = this.get('contract'),
        bidPrice = _get.bid_price,
        buyPrice = _get.buy_price;

    return (0, _tools.subtractFixed)(bidPrice, buyPrice);
  };

  Interface.prototype.get = function get(key) {
    return this.tradeEngine.getData().get(key);
  };

  return Interface;
}((0, _ToolsInterface3.default)((0, _TicksInterface2.default)(function () {
  function _class() {
    _classCallCheck(this, _class);
  }

  return _class;
}())));

exports.default = Interface;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _tools = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var balance = 0;
var balanceStr = '';

exports.default = function (Engine) {
  return function (_Engine) {
    _inherits(Balance, _Engine);

    function Balance() {
      _classCallCheck(this, Balance);

      return _possibleConstructorReturn(this, _Engine.apply(this, arguments));
    }

    Balance.prototype.subscribeToBalance = function subscribeToBalance() {
      var _this2 = this;

      (0, _tools.doUntilDone)(function () {
        return _this2.api.subscribeToBalance();
      }).catch(function (e) {
        return _this2.broadcastError(e);
      });

      return new Promise(function (r) {
        _this2.balancePromise = r;
      });
    };

    Balance.prototype.observeBalance = function observeBalance() {
      var _this3 = this;

      this.listen('balance', function (r) {
        var _r$balance = r.balance,
            b = _r$balance.balance,
            currency = _r$balance.currency;


        balance = +b;
        balanceStr = balance.toFixed(2) + ' ' + currency;

        _this3.broadcastInfo({ balance: balanceStr });
        _this3.balancePromise();
      });
    };

    Balance.prototype.getBalance = function getBalance(type) {
      return type === 'STR' ? balanceStr : balance;
    };

    return Balance;
  }(Engine);
};

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _observer = __webpack_require__(22);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Engine) {
  return function (_Engine) {
    _inherits(Broadcast, _Engine);

    function Broadcast() {
      _classCallCheck(this, Broadcast);

      return _possibleConstructorReturn(this, _Engine.apply(this, arguments));
    }

    Broadcast.prototype.broadcastPurchase = function broadcastPurchase(buy, contractType) {
      _observer.observer.emit('bot.info', {
        totalRuns: this.updateAndReturnTotalRuns(),
        transaction_ids: { buy: buy.transaction_id },
        contract_type: contractType,
        buy_price: buy.buy_price
      });
    };

    Broadcast.prototype.broadcastContract = function broadcastContract(contract) {
      _observer.observer.emit('bot.contract', contract);
    };

    Broadcast.prototype.broadcastInfo = function broadcastInfo(info) {
      _observer.observer.emit('bot.info', info);
    };

    Broadcast.prototype.broadcastError = function broadcastError(e) {
      _observer.observer.emit('Error', e);
    };

    return Broadcast;
  }(Engine);
};

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _tools = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Engine) {
  return function (_Engine) {
    _inherits(OpenContract, _Engine);

    function OpenContract() {
      _classCallCheck(this, OpenContract);

      return _possibleConstructorReturn(this, _Engine.apply(this, arguments));
    }

    OpenContract.prototype.observeOpenContract = function observeOpenContract() {
      var _this2 = this;

      this.listen('proposal_open_contract', function (r) {
        var contract = r.proposal_open_contract;

        _this2.setContractFlags(contract);

        _this2.sellExpired();

        if (_this2.isSold) {
          _this2.isPurchaseRequested = false;
          _this2.updateTotals(contract);
          _this2.api.unsubscribeByID(_this2.openContractId);
        }

        _this2.data = _this2.data.set('contract', contract);

        _this2.broadcastContract(contract);

        if (_this2.isSold) {
          if (_this2.afterPromise) {
            _this2.afterPromise();
          }
          _this2.signal('after');
        } else {
          _this2.signal('during');
        }
      });
    };

    OpenContract.prototype.waitForAfter = function waitForAfter() {
      var _this3 = this;

      return new Promise(function (resolve) {
        _this3.afterPromise = resolve;
      });
    };

    OpenContract.prototype.subscribeToOpenContract = function subscribeToOpenContract(contractId) {
      var _this4 = this;

      this.isSellRequested = false;
      (0, _tools.doUntilDone)(function () {
        return _this4.api.subscribeToOpenContract(contractId);
      }).then(function (r) {
        _this4.openContractId = r.proposal_open_contract.id;
      });
    };

    OpenContract.prototype.setContractFlags = function setContractFlags(contract) {
      var isExpired = contract.is_expired,
          isValidToSell = contract.is_valid_to_sell,
          isSold = contract.is_sold,
          contractId = contract.contract_id;


      this.isSold = Boolean(isSold);

      this.isSellAvailable = !this.isSold && Boolean(isValidToSell);

      this.isExpired = Boolean(isExpired);

      this.contractId = contractId;
    };

    return OpenContract;
  }(Engine);
};

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Engine) {
  return function (_Engine) {
    _inherits(OpenContract, _Engine);

    function OpenContract() {
      _classCallCheck(this, OpenContract);

      return _possibleConstructorReturn(this, _Engine.apply(this, arguments));
    }

    OpenContract.prototype.requestPipSizes = function requestPipSizes() {
      var _this2 = this;

      if (this.activeSymbols) {
        return Promise.resolve(this.activeSymbols);
      }

      var pipSizePromise = this.api.getActiveSymbolsBrief();

      pipSizePromise.then(function (r) {
        _this2.activeSymbols = r.active_symbols;
      });

      return pipSizePromise;
    };

    OpenContract.prototype.waitBeforePurchase = function waitBeforePurchase(symbol) {
      var _this3 = this;

      if (symbol && this.symbol !== symbol) {
        var ticksService = this.$scope.ticksService;


        ticksService.stopMonitor({ symbol: this.symbol, key: this.tickListenerKey });

        var callback = function callback() {
          if (!_this3.isPurchaseRequested && _this3.checkProposalReady()) {
            Promise.all([_this3.startPromise, _this3.requestPipSizes()]).then(function () {
              return _this3.signal('before');
            });
          }
        };

        var key = ticksService.monitor({ symbol: symbol, callback: callback });

        this.symbol = symbol;

        this.tickListenerKey = key;
      }
    };

    OpenContract.prototype.getSymbol = function getSymbol() {
      return this.symbol;
    };

    OpenContract.prototype.getPipSize = function getPipSize() {
      var _this4 = this;

      var activeSymbol = this.activeSymbols.find(function (a) {
        return a.symbol === _this4.symbol;
      });

      return +(+activeSymbol.pip).toExponential().substring(3);
    };

    return OpenContract;
  }(Engine);
};

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _i18n = __webpack_require__(23);

var _tools = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Engine) {
  return function (_Engine) {
    _inherits(Proposal, _Engine);

    function Proposal() {
      _classCallCheck(this, Proposal);

      return _possibleConstructorReturn(this, _Engine.apply(this, arguments));
    }

    Proposal.prototype.makeProposals = function makeProposals(tradeOption) {
      if (!this.isNewTradeOption(tradeOption)) {
        return;
      }
      this.proposalTemplates = (0, _tools.tradeOptionToProposal)(tradeOption);
      this.renewProposalsOnPurchase();
    };

    Proposal.prototype.selectProposal = function selectProposal(contractType) {
      var toBuy = void 0;

      if (!this.data.has('proposals')) {
        throw (0, _i18n.translate)('Proposals are not ready');
      }

      this.data.get('proposals').forEach(function (proposal) {
        if (proposal.contractType === contractType) {
          toBuy = proposal;
        }
      });

      if (!toBuy) {
        throw (0, _i18n.translate)('Selected proposal does not exist');
      }

      return toBuy;
    };

    Proposal.prototype.renewProposalsOnPurchase = function renewProposalsOnPurchase() {
      this.unsubscribeProposals();
      this.requestProposals();
    };

    Proposal.prototype.requestProposals = function requestProposals() {
      var _this2 = this;

      this.proposalTemplates.forEach(function (proposal) {
        return (0, _tools.doUntilDone)(function () {
          return _this2.api.subscribeToPriceForContractProposal(Object.assign({}, proposal, {
            passthrough: {
              contractType: proposal.contract_type
            }
          }));
        }).catch(function (e) {
          return _this2.broadcastError(e);
        });
      });
    };

    Proposal.prototype.observeProposals = function observeProposals() {
      var _this3 = this;

      this.listen('proposal', function (r) {
        var proposal = r.proposal;
        var id = proposal.id;

        _this3.data = _this3.data.setIn(['proposals', id], Object.assign({}, proposal, r.passthrough));
      });
    };

    Proposal.prototype.unsubscribeProposals = function unsubscribeProposals() {
      var _this4 = this;

      if (!this.data.has('proposals')) {
        return;
      }

      this.data.get('proposals').map(function (proposal) {
        return (0, _tools.doUntilDone)(function () {
          return _this4.api.unsubscribeByID(proposal.id);
        }).then(function () {
          _this4.data = _this4.data.deleteIn(['proposals', proposal.id]);
        });
      });
    };

    Proposal.prototype.checkProposalReady = function checkProposalReady() {
      var proposals = this.data.get('proposals');

      return proposals && proposals.size === 2;
    };

    Proposal.prototype.isNewTradeOption = function isNewTradeOption(tradeOption) {
      var _this5 = this;

      if (!this.tradeOption) {
        this.tradeOption = tradeOption;
        return true;
      }

      var isNotEqual = function isNotEqual(key) {
        return _this5.tradeOption[key] !== tradeOption[key];
      };

      return isNotEqual('duration') || isNotEqual('amount') || isNotEqual('prediction') || isNotEqual('barrierOffset') || isNotEqual('secondBarrierOffset');
    };

    return Proposal;
  }(Engine);
};

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _tools = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Engine) {
  return function (_Engine) {
    _inherits(Purchase, _Engine);

    function Purchase() {
      _classCallCheck(this, Purchase);

      return _possibleConstructorReturn(this, _Engine.apply(this, arguments));
    }

    Purchase.prototype.purchase = function purchase(contractType) {
      var _this2 = this;

      var toBuy = this.selectProposal(contractType);

      this.isPurchaseRequested = true;

      return new Promise(function (resolve, reject) {
        _this2.api.buyContract(toBuy.id, toBuy.ask_price).then(function (r) {
          _this2.broadcastPurchase(r.buy, contractType);
          _this2.subscribeToOpenContract(r.buy.contract_id);
          _this2.renewProposalsOnPurchase();
          _this2.signal('purchase');
          resolve();
        }).catch(function (e) {
          if ((0, _tools.shouldThrowError)(e)) {
            reject(e);
            return;
          }
          _this2.isPurchaseRequested = false;
          _this2.waitBeforePurchase().then(function () {
            return _this2.observer.emit('REVERT', 'before');
          });
        });
      });
    };

    return Purchase;
  }(Engine);
};

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _i18n = __webpack_require__(23);

var _tools = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (Engine) {
  return function (_Engine) {
    _inherits(Sell, _Engine);

    function Sell() {
      _classCallCheck(this, Sell);

      return _possibleConstructorReturn(this, _Engine.apply(this, arguments));
    }

    Sell.prototype.isSellAtMarketAvailable = function isSellAtMarketAvailable() {
      return !this.isSold && this.isSellAvailable && !this.isExpired;
    };

    Sell.prototype.sellAtMarket = function sellAtMarket() {
      var _this2 = this;

      if (!this.isSellAtMarketAvailable()) {
        throw (0, _i18n.translate)('Sell is not available');
      }

      var toIgnore = ['NoOpenPosition', 'InvalidSellContractProposal', 'UnrecognisedRequest'];

      return new Promise(function (resolve, reject) {
        return Promise.all([_this2.api.sellContract(_this2.contractId, 0), _this2.waitForAfter()]).then(function () {
          return resolve();
        }).catch(function (e) {
          if ((0, _tools.shouldThrowError)(e, toIgnore)) {
            reject(e);
            return;
          }
          _this2.observer.emit('REVERT', 'during');
        });
      });
    };

    Sell.prototype.sellExpired = function sellExpired() {
      var _this3 = this;

      if (this.isSellAvailable && this.isExpired) {
        (0, _tools.doUntilDone)(function () {
          return _this3.api.sellExpiredContracts();
        });
      }
    };

    return Sell;
  }(Engine);
};

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _i18n = __webpack_require__(23);

var _tools = __webpack_require__(11);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var totalProfit = 0;
var totalWins = 0;
var totalLosses = 0;
var totalStake = 0;
var totalPayout = 0;
var totalRuns = 0;

exports.default = function (Engine) {
  return function (_Engine) {
    _inherits(Total, _Engine);

    function Total() {
      _classCallCheck(this, Total);

      var _this = _possibleConstructorReturn(this, _Engine.call(this));

      _this.sessionRuns = 0;
      _this.sessionProfit = 0;
      return _this;
    }

    Total.prototype.updateTotals = function updateTotals(contract) {
      var sellPrice = contract.sell_price,
          buyPrice = contract.buy_price;


      var profit = (0, _tools.subtractFixed)(sellPrice, buyPrice);

      totalWins += profit > 0 ? 1 : 0;

      totalLosses += profit < 0 ? 1 : 0;

      this.sessionProfit = (0, _tools.addFixed)(this.sessionProfit, profit);

      totalProfit = (0, _tools.addFixed)(totalProfit, profit);
      totalStake = (0, _tools.addFixed)(totalStake, buyPrice);
      totalPayout = (0, _tools.addFixed)(totalPayout, sellPrice);

      this.broadcastInfo({
        profit: profit,
        contract: contract,
        totalProfit: totalProfit,
        totalWins: totalWins,
        totalLosses: totalLosses,
        totalStake: totalStake,
        totalPayout: totalPayout
      });
    };

    Total.prototype.updateAndReturnTotalRuns = function updateAndReturnTotalRuns() {
      this.sessionRuns++;
      return ++totalRuns;
    };

    Total.prototype.getTotalRuns = function getTotalRuns() {
      return totalRuns;
    };

    Total.prototype.getTotalProfit = function getTotalProfit() {
      return totalProfit;
    };

    Total.prototype.checkLimits = function checkLimits(tradeOption) {
      if (!tradeOption.limitations) {
        return;
      }

      var _tradeOption$limitati = tradeOption.limitations,
          maxLoss = _tradeOption$limitati.maxLoss,
          maxTrades = _tradeOption$limitati.maxTrades;


      if (maxLoss && maxTrades) {
        if (this.sessionRuns >= maxTrades) {
          throw Error((0, _i18n.translate)('Maximum number of trades reached'));
        }
        if (this.sessionProfit <= -maxLoss) {
          throw Error((0, _i18n.translate)('Maximum loss amount reached'));
        }
      }
    };

    return Total;
  }(Engine);
};

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _immutable = __webpack_require__(56);

var _i18n = __webpack_require__(23);

var _error = __webpack_require__(92);

var _tools = __webpack_require__(11);

var _sanitize = __webpack_require__(60);

var _Proposal = __webpack_require__(239);

var _Proposal2 = _interopRequireDefault(_Proposal);

var _Broadcast = __webpack_require__(236);

var _Broadcast2 = _interopRequireDefault(_Broadcast);

var _Total = __webpack_require__(242);

var _Total2 = _interopRequireDefault(_Total);

var _Balance2 = __webpack_require__(235);

var _Balance3 = _interopRequireDefault(_Balance2);

var _PrepareBeforePurchase = __webpack_require__(238);

var _PrepareBeforePurchase2 = _interopRequireDefault(_PrepareBeforePurchase);

var _OpenContract = __webpack_require__(237);

var _OpenContract2 = _interopRequireDefault(_OpenContract);

var _Sell = __webpack_require__(241);

var _Sell2 = _interopRequireDefault(_Sell);

var _Purchase = __webpack_require__(240);

var _Purchase2 = _interopRequireDefault(_Purchase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var scopeToWatchResolve = {
  before: ['before', true],
  purchase: ['before', false],
  during: ['during', true],
  after: ['during', false]
};

var TradeEngine = function (_Balance) {
  _inherits(TradeEngine, _Balance);

  function TradeEngine($scope) {
    _classCallCheck(this, TradeEngine);

    var _this = _possibleConstructorReturn(this, _Balance.call(this));

    _this.api = $scope.api;
    _this.observer = $scope.observer;
    _this.$scope = $scope;
    _this.observe();
    _this.data = new _immutable.Map();
    _this.watches = new _immutable.Map();
    _this.signals = new _immutable.Map();
    return _this;
  }

  TradeEngine.prototype.init = function init() {
    this.watches = new _immutable.Map();
    this.signals = new _immutable.Map();

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _expectInitArg = (0, _sanitize.expectInitArg)(args),
        token = _expectInitArg[0],
        options = _expectInitArg[1];

    var symbol = options.symbol;


    this.options = options;

    this.startPromise = this.loginAndGetBalance(token);

    this.waitBeforePurchase(symbol);
  };

  TradeEngine.prototype.start = function start(tradeOptions) {
    if (!this.options) {
      throw (0, _error.createError)('NotInitialized', (0, _i18n.translate)('Bot.init is not called'));
    }

    this.checkLimits(tradeOptions);

    this.makeProposals(Object.assign({}, this.options, tradeOptions));
  };

  TradeEngine.prototype.loginAndGetBalance = function loginAndGetBalance(token) {
    var _this2 = this;

    if (this.token === token) {
      return Promise.resolve();
    }

    (0, _tools.doUntilDone)(function () {
      return _this2.api.authorize(token);
    }).catch(function (e) {
      return _this2.broadcastError(e);
    });

    return new Promise(function (resolve) {
      return _this2.listen('authorize', function () {
        _this2.token = token;
        resolve();
      });
    }).then(function () {
      return _this2.subscribeToBalance();
    });
  };

  TradeEngine.prototype.observe = function observe() {
    this.observeOpenContract();

    this.observeBalance();

    this.observeProposals();
  };

  TradeEngine.prototype.signal = function signal(scope) {
    var _scopeToWatchResolve$ = scopeToWatchResolve[scope],
        watchName = _scopeToWatchResolve$[0],
        arg = _scopeToWatchResolve$[1];


    if (this.watches.has(watchName)) {
      var watch = this.watches.get(watchName);

      this.watches = this.watches.delete(watchName);

      watch(arg);
    } else {
      this.signals = this.signals.set(watchName, arg);
    }

    this.scope = scope;
  };

  TradeEngine.prototype.watch = function watch(watchName) {
    var _this3 = this;

    if (this.signals.has(watchName)) {
      var signal = this.signals.get(watchName);

      this.signals = this.signals.delete(watchName);
      return Promise.resolve(signal);
    }

    return new Promise(function (resolve) {
      _this3.watches = _this3.watches.set(watchName, resolve);
    });
  };

  TradeEngine.prototype.getData = function getData() {
    return this.data;
  };

  TradeEngine.prototype.listen = function listen(n, f) {
    this.api.events.on(n, f);
  };

  return TradeEngine;
}((0, _Balance3.default)((0, _Purchase2.default)((0, _Sell2.default)((0, _OpenContract2.default)((0, _Proposal2.default)((0, _PrepareBeforePurchase2.default)((0, _Broadcast2.default)((0, _Total2.default)(function () {
  function _class() {
    _classCallCheck(this, _class);
  }

  return _class;
}())))))))));

exports.default = TradeEngine;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.createInterpreter = exports.createScope = undefined;

__webpack_require__(210);

__webpack_require__(213);

__webpack_require__(214);

__webpack_require__(208);

__webpack_require__(211);

__webpack_require__(209);

__webpack_require__(212);

__webpack_require__(206);

__webpack_require__(207);

__webpack_require__(150);

__webpack_require__(197);

__webpack_require__(215);

__webpack_require__(216);

__webpack_require__(179);

__webpack_require__(180);

__webpack_require__(181);

__webpack_require__(182);

__webpack_require__(185);

__webpack_require__(183);

__webpack_require__(184);

__webpack_require__(186);

__webpack_require__(187);

__webpack_require__(188);

__webpack_require__(189);

__webpack_require__(191);

__webpack_require__(190);

__webpack_require__(178);

__webpack_require__(205);

__webpack_require__(175);

__webpack_require__(176);

__webpack_require__(177);

__webpack_require__(149);

__webpack_require__(202);

__webpack_require__(200);

__webpack_require__(198);

__webpack_require__(203);

__webpack_require__(204);

__webpack_require__(199);

__webpack_require__(201);

__webpack_require__(192);

__webpack_require__(193);

__webpack_require__(194);

__webpack_require__(196);

__webpack_require__(195);

__webpack_require__(147);

__webpack_require__(148);

__webpack_require__(143);

__webpack_require__(146);

__webpack_require__(145);

__webpack_require__(144);

__webpack_require__(58);

__webpack_require__(169);

__webpack_require__(170);

__webpack_require__(172);

__webpack_require__(171);

__webpack_require__(168);

__webpack_require__(174);

__webpack_require__(173);

__webpack_require__(151);

__webpack_require__(152);

__webpack_require__(153);

__webpack_require__(154);

__webpack_require__(155);

__webpack_require__(156);

__webpack_require__(157);

__webpack_require__(158);

__webpack_require__(159);

__webpack_require__(160);

__webpack_require__(162);

__webpack_require__(161);

__webpack_require__(163);

__webpack_require__(164);

__webpack_require__(165);

__webpack_require__(166);

__webpack_require__(167);

__webpack_require__(217);

__webpack_require__(220);

__webpack_require__(218);

__webpack_require__(219);

__webpack_require__(222);

__webpack_require__(221);

__webpack_require__(225);

__webpack_require__(224);

__webpack_require__(223);

__webpack_require__(226);

var _observer = __webpack_require__(22);

var _observer2 = _interopRequireDefault(_observer);

var _fs = __webpack_require__(59);

var _fs2 = _interopRequireDefault(_fs);

var _readline = __webpack_require__(228);

var _readline2 = _interopRequireDefault(_readline);

var _commander = __webpack_require__(142);

var _commander2 = _interopRequireDefault(_commander);

var _ws = __webpack_require__(227);

var _ws2 = _interopRequireDefault(_ws);

var _binaryLiveApi = __webpack_require__(141);

var _Interpreter = __webpack_require__(139);

var _Interpreter2 = _interopRequireDefault(_Interpreter);

var _TicksService = __webpack_require__(140);

var _TicksService2 = _interopRequireDefault(_TicksService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = function log() {
  var _console;

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return (_console = console).log.apply(_console, [new Date().toLocaleTimeString() + ':'].concat(args));
}; // eslint-disable-line no-console

var createScope = exports.createScope = function createScope() {
  var observer = new _observer2.default();
  var api = new _binaryLiveApi.LiveApi({
    connection: new _ws2.default(process.env.ENDPOINT || 'wss://ws.binaryws.com/websockets/v3?l=en&app_id=1169')
  });

  var ticksService = new _TicksService2.default(api);

  return { observer: observer, api: api, ticksService: ticksService };
};

var createInterpreter = exports.createInterpreter = function createInterpreter() {
  return new _Interpreter2.default(createScope());
};

var filename = void 0;

_commander2.default.version('8.0.1').usage('[filename]').arguments('[filename]').action(function (fn) {
  filename = fn;
}).parse(process.argv);

var lineReader = _readline2.default.createInterface({
  input: filename ? _fs2.default.createReadStream(filename) : process.stdin
});

var code = '';

var interpreter = createInterpreter();

_observer.observer.register('Error', function (e) {
  return log(e);
}); // eslint-disable-line no-console

lineReader.on('line', function (line) {
  return code += line + '\n';
}).on('error', function (e) {
  return log(e);
}).on('close', function () {
  return interpreter.run(code).then(function (v) {
    return log(v.data);
  }).catch(function (e) {
    return log(e);
  });
});

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var parseQueryString = exports.parseQueryString = function parseQueryString() {
  if (typeof window === 'undefined') {
    return {};
  }
  var str = window.location.search;
  var objURL = {};
  str.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), function (a0, a1, a2, a3) {
    objURL[a1] = a3;
  });
  return objURL;
};

var getObjectValue = exports.getObjectValue = function getObjectValue(obj) {
  return obj[Object.keys(obj)[0]];
};

var getUTCTime = exports.getUTCTime = function getUTCTime(date) {
  var dateObject = new Date(date);
  return ('0' + dateObject.getUTCHours()).slice(-2) + ':' + ('0' + dateObject.getUTCMinutes()).slice(-2) + ':' + ('0' + dateObject.getUTCSeconds()).slice(-2);
};

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.bollingerBandsArray = undefined;

var _binaryUtils = __webpack_require__(47);

var _math = __webpack_require__(33);

var _simpleMovingAverage = __webpack_require__(61);

var _simpleMovingAverage2 = _interopRequireDefault(_simpleMovingAverage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bollingerBands = function bollingerBands(data, config) {
    var _config$periods = config.periods;
    var periods = _config$periods === undefined ? 20 : _config$periods;
    var field = config.field;
    var _config$stdDevUp = config.stdDevUp;
    var stdDevUp = _config$stdDevUp === undefined ? 2 : _config$stdDevUp;
    var _config$stdDevDown = config.stdDevDown;
    var stdDevDown = _config$stdDevDown === undefined ? 2 : _config$stdDevDown;
    var _config$pipSize = config.pipSize;
    var pipSize = _config$pipSize === undefined ? 2 : _config$pipSize;

    var vals = (0, _math.takeLast)(data, periods, field);
    var middle = (0, _simpleMovingAverage2.default)(vals, { periods: periods });
    var stdDev = (0, _math.stddev)(vals);
    var upper = middle + stdDev * stdDevUp;
    var lower = middle - stdDev * stdDevDown;

    return [+middle.toFixed(pipSize), +upper.toFixed(pipSize), +lower.toFixed(pipSize)];
};

var bollingerBandsArray = exports.bollingerBandsArray = function bollingerBandsArray(data, config) {
    var periods = config.periods;

    return (0, _binaryUtils.sequence)(data.length - periods + 1).map(function (x, i) {
        return bollingerBands(data.slice(i, i + periods), config);
    });
};

exports.default = bollingerBands;

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _math = __webpack_require__(33);

var _simpleMovingAverage = __webpack_require__(61);

var _exponentialMovingAverage = __webpack_require__(93);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var paddingLeft = function paddingLeft(data, length) {
    var arr = [];
    arr.length = length - data.length;
    arr.fill(0);
    return [].concat(arr, _toConsumableArray(data));
};

var macdArray = function macdArray(data, config) {
    var field = config.field;
    var _config$fastEmaPeriod = config.fastEmaPeriod;
    var fastEmaPeriod = _config$fastEmaPeriod === undefined ? 12 : _config$fastEmaPeriod;
    var _config$slowEmaPeriod = config.slowEmaPeriod;
    var slowEmaPeriod = _config$slowEmaPeriod === undefined ? 26 : _config$slowEmaPeriod;
    var _config$signalSmaPeri = config.signalSmaPeriod;
    var signalSmaPeriod = _config$signalSmaPeri === undefined ? 9 : _config$signalSmaPeri;
    var _config$pipSize = config.pipSize;
    var pipSize = _config$pipSize === undefined ? 2 : _config$pipSize;


    var vals = (0, _math.takeField)(data, field);

    var length = vals.length;

    var fastEmaArray = paddingLeft((0, _exponentialMovingAverage.exponentialMovingAverageArray)(vals, { periods: fastEmaPeriod, pipSize: 20, field: field }), length);
    // ---------------------------------------------------------------------------------------------- ^ set pipSize to 20 to prevent rounding
    var slowEmaArray = paddingLeft((0, _exponentialMovingAverage.exponentialMovingAverageArray)(vals, { periods: slowEmaPeriod, pipSize: 20, field: field }), length);

    var macdCalcArray = paddingLeft(slowEmaArray.map(function (x, i) {
        return +(fastEmaArray[i] - x).toFixed(pipSize);
    }), length);

    var smaArray = paddingLeft((0, _simpleMovingAverage.simpleMovingAverageArray)(macdCalcArray.slice(slowEmaPeriod - 1), { periods: signalSmaPeriod, pipSize: pipSize }), length);

    return macdCalcArray.map(function (x, i) {
        return [+(x - smaArray[i]).toFixed(pipSize), x, smaArray[i]];
    }).slice(slowEmaPeriod + signalSmaPeriod - 2);
};

exports.default = macdArray;

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.relativeStrengthIndexArray = undefined;

var _binaryUtils = __webpack_require__(47);

var _math = __webpack_require__(33);

var calcGain = function calcGain(q1, q2) {
    return q2 > q1 ? q2 - q1 : 0;
};
var calcLoss = function calcLoss(q1, q2) {
    return q2 < q1 ? q1 - q2 : 0;
};

var calcFirstAvgDiff = function calcFirstAvgDiff(vals, comp, periods) {
    var prev = void 0;
    return vals.reduce(function (r, q, i) {
        if (i === 1) {
            prev = r;
        }
        var diff = comp(prev, q);
        prev = q;
        return diff + (i === 1 ? 0 : r);
    }) / periods;
};

var calcSecondAvgDiff = function calcSecondAvgDiff(vals, comp, periods, initAvg) {
    var prev = void 0;
    if (vals.length === 1) {
        // There is no data to calc avg
        return initAvg;
    }
    return vals.reduce(function (r, q, i) {
        if (i === 1) {
            prev = r;
        }
        var diff = comp(prev, q);
        prev = q;
        var prevAvg = i === 1 ? initAvg : r;
        return (prevAvg * (periods - 1) + diff) / periods;
    });
};

var relativeStrengthIndex = function relativeStrengthIndex(data, config) {
    var memoizedDiff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var periods = config.periods;
    var field = config.field;


    if (data.length < periods) {
        throw new Error('Periods longer than data length');
    }

    if (data.length === periods) {
        return 0;
    }

    var vals = (0, _math.takeField)(data.slice(0, periods + 1), field);

    var restSeq = void 0;
    var initAvgGain = void 0;
    var initAvgLoss = void 0;

    if (memoizedDiff && 'gain' in memoizedDiff) {
        restSeq = (0, _math.takeField)(data.slice(-2), field);

        initAvgGain = memoizedDiff.gain;
        initAvgLoss = memoizedDiff.loss;
    } else {
        // include last element from above to calc diff
        restSeq = (0, _math.takeField)(data.slice(periods, data.length), field);

        initAvgGain = calcFirstAvgDiff(vals, calcGain, periods);
        initAvgLoss = calcFirstAvgDiff(vals, calcLoss, periods);
    }

    var avgGain = calcSecondAvgDiff(restSeq, calcGain, periods, initAvgGain);
    var avgLoss = calcSecondAvgDiff(restSeq, calcLoss, periods, initAvgLoss);

    if (memoizedDiff) {
        memoizedDiff.gain = avgGain;
        memoizedDiff.loss = avgLoss;
    }

    if (avgGain === 0) {
        return 0;
    } else if (avgLoss === 0) {
        return 100;
    }

    var RS = avgGain / avgLoss;

    return 100 - 100 / (1 + RS);
};

var relativeStrengthIndexArray = exports.relativeStrengthIndexArray = function relativeStrengthIndexArray(data, config) {
    var periods = config.periods;
    var _config$pipSize = config.pipSize;
    var pipSize = _config$pipSize === undefined ? 2 : _config$pipSize;

    var memoizedDiff = {};
    return (0, _binaryUtils.sequence)(data.length - periods).map(function (x, i) {
        return +relativeStrengthIndex(data.slice(0, i + periods + 1), config, memoizedDiff).toFixed(pipSize);
    });
};

exports.default = relativeStrengthIndex;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (a, b) {
    if (a.length !== b.length) {
        return false;
    }

    return !a.some(function (x, idx) {
        return x !== b[idx];
    });
};

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = function (arr) {
    return Math.max.apply(Math, _toConsumableArray(arr));
};

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = function (arr) {
    return Math.min.apply(Math, _toConsumableArray(arr));
};

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr) {
    return arr && (arr.length === 0 ? undefined : arr[arr.length - 1]);
};

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr, key) {
    return arr.reduce(function (a, b) {
        var kv = b[key];
        var idx = a.findIndex(function (g) {
            return g.some(function (e) {
                return e[key] === kv;
            });
        });

        if (idx > -1) {
            a[idx].push(b);
        } else {
            a.push([b]);
        }
        return a;
    }, []);
};

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr1, arr2) {
    var getter1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (x) {
        return x;
    };
    var getter2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (x) {
        return x;
    };
    var deduplication = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

    /**
     * compare element using getter
     * @param a
     * @param b
     * @returns {number}
     *   0  -> equal
     *   1  -> `a` bigger than `b`
     *   -1 -> `b` bigger than `a`
     */
    var compare = function compare(a, b) {
        var valA = getter1(a);
        var valB = getter2(b);

        if (valA > valB) {
            return 1;
        }

        if (valA < valB) {
            return -1;
        }

        return 0;
    };

    // clone so that does not change arguments
    var a1Clone = arr1.slice(0);
    var a2Clone = arr2.slice(0);

    var result = [];

    // loop until both array is empty
    while (a1Clone.length > 0 || a2Clone.length > 0) {
        var a1Head = a1Clone[0];
        var a2Head = a2Clone[0];

        if (!a1Head) {
            result = result.concat(a2Clone);
            break; // break if one of the array is empty
        }

        if (!a2Head) {
            result = result.concat(a1Clone);
            break; // break if one of the array is empty
        }

        var last = result.length > 0 && result[result.length - 1];
        var toAdd = void 0;
        switch (compare(a1Head, a2Head)) {
            case 0:
                {
                    if (deduplication) a2Clone.shift();
                    toAdd = a1Clone.shift();
                    break;
                }
            // a2Head is smaller
            case 1:
                {
                    toAdd = a2Clone.shift();
                    break;
                }
            // a1Head is smaller
            case -1:
                {
                    toAdd = a1Clone.shift();
                    break;
                }
            default: // impossible
        }

        // if dedup is true, do not append same element
        if (deduplication && last && getter1(last) === getter2(toAdd)) {
            break;
        }
        result.push(toAdd);
    }

    return result;
};

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (n) {
    return Array.from(Array(n).keys());
};

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getAbsoluteBarrierFromContract = __webpack_require__(63);

var _getAbsoluteBarrierFromContract2 = _interopRequireDefault(_getAbsoluteBarrierFromContract);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract, lastTickQuote) {
    return (0, _getAbsoluteBarrierFromContract2.default)(contract, lastTickQuote, 'barrier2');
};

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getAbsoluteBarrierFromContract = __webpack_require__(63);

var _getAbsoluteBarrierFromContract2 = _interopRequireDefault(_getAbsoluteBarrierFromContract);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract, lastTickQuote) {
    return (0, _getAbsoluteBarrierFromContract2.default)(contract, lastTickQuote, 'barrier');
};

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _relativeBarrier = __webpack_require__(95);

var _relativeBarrier2 = _interopRequireDefault(_relativeBarrier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract, lastTickQuote) {
    return contract.barrier ? (0, _relativeBarrier2.default)(contract, lastTickQuote) : +contract.entry_spot || lastTickQuote;
};

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _groupByKey = __webpack_require__(48);

var _groupByKey2 = _interopRequireDefault(_groupByKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var extractDigitBarrierHelper = function extractDigitBarrierHelper(contractsGroupedByExpiry) {
    var expiryTypes = Object.keys(contractsGroupedByExpiry);
    var result = {};
    expiryTypes.forEach(function (et) {
        var contractsByExpiry = contractsGroupedByExpiry[et];
        result[et] = [{
            name: 'Digit',
            values: contractsByExpiry[0].last_digit_range,
            defaultValue: contractsByExpiry[0].last_digit_range[0]
        }];
    });
    return result;
};

var extract2BarriersHelper = function extract2BarriersHelper(contractsGroupedByExpiry) {
    var expiryTypes = Object.keys(contractsGroupedByExpiry);
    var result = {};
    expiryTypes.forEach(function (et) {
        var contractsByExpiry = contractsGroupedByExpiry[et];
        result[et] = [{ name: 'High barrier', defaultValue: contractsByExpiry[0].high_barrier }, { name: 'Low barrier', defaultValue: contractsByExpiry[0].low_barrier }];
    });
    return result;
};

var extract1BarrierHelper = function extract1BarrierHelper(contractGroupedByExpiry, barrierName) {
    var expiryTypes = Object.keys(contractGroupedByExpiry);
    var result = {};
    expiryTypes.forEach(function (et) {
        var contractsByExpiry = contractGroupedByExpiry[et];
        var contractWithBarrier = contractsByExpiry.find(function (c) {
            return !!c.barrier;
        });
        if (!contractWithBarrier) {
            return;
        }
        result[et] = [{ name: barrierName, defaultValue: contractWithBarrier.barrier }];
    });
    return result;
};

exports.default = function (contracts, type) {
    var groupByExpiryType = (0, _groupByKey2.default)(contracts, 'expiry_type');

    switch (type) {
        // types with 1 barrier
        case 'CALL':
            return extract1BarrierHelper(groupByExpiryType, 'Higher than');
        case 'PUT':
            return extract1BarrierHelper(groupByExpiryType, 'Lower than');
        case 'ONETOUCH':
        case 'NOTOUCH':
            return extract1BarrierHelper(groupByExpiryType, 'Touch spot');

        // types with 2 barriers
        case 'EXPIRYMISS':
        case 'EXPIRYRANGE':
        case 'RANGE':
        case 'UPORDOWN':
            return extract2BarriersHelper(groupByExpiryType);

        // special case: digit type
        case 'DIGITMATCH':
        case 'DIGITDIFF':
        case 'DIGITOVER':
        case 'DIGITUNDER':
            return extractDigitBarrierHelper(groupByExpiryType);

        // These types do not have barrier
        case 'DIGITODD':
        case 'DIGITEVEN':
        case 'ASIANU':
        case 'ASIAND':
        case 'SPREADU':
        case 'SPREADD':
        default:
            return undefined;
    }
};

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _commonRelativeBarrier = __webpack_require__(62);

var _commonRelativeBarrier2 = _interopRequireDefault(_commonRelativeBarrier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract, lastTickQuote) {
    return (0, _commonRelativeBarrier2.default)(contract.barrier2, contract.entry_spot, lastTickQuote);
};

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (date) {
    return Math.floor(date.getTime() / 1000);
};

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (date) {
    return date.toISOString().replace(/T/, ' ').replace(/\..+/, '');
};

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (date) {
    return date.toISOString().slice(11, 19);
};

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _epochToDate = __webpack_require__(45);

var _epochToDate2 = _interopRequireDefault(_epochToDate);

var _dateToDateString = __webpack_require__(34);

var _dateToDateString2 = _interopRequireDefault(_dateToDateString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    var epoch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return (0, _dateToDateString2.default)((0, _epochToDate2.default)(epoch));
};

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _epochToDate = __webpack_require__(45);

var _epochToDate2 = _interopRequireDefault(_epochToDate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (epoch) {
    return (0, _epochToDate2.default)(epoch).toUTCString();
};

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dateToTimeString = __webpack_require__(96);

var _dateToTimeString2 = _interopRequireDefault(_dateToTimeString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (epoch) {
    return (0, _dateToTimeString2.default)(new Date(epoch * 1000));
};

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _epochToDate = __webpack_require__(45);

var _epochToDate2 = _interopRequireDefault(_epochToDate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    var epoch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return (0, _epochToDate2.default)(epoch).toISOString().slice(0, 10);
};

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (epoch) {
    return new Date(epoch * 1000).toISOString().slice(11, 19);
};

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (x) {
	var d = new Date();
	d.setMonth(d.getMonth() - x);
	return Math.floor(d.getTime() / 1000);
};

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (date) {
    return !isNaN(date.getTime());
};

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (time) {
    var tokens = time.split(':');
    if (tokens.length < 2 || tokens.length > 3) {
        return false;
    }

    return tokens.map(function (val, ind) {
        switch (ind) {
            case 0:
                return parseInt(val, 0) < 24;
            case 1:
                return parseInt(val, 0) <= 59;
            default:
                return parseInt(val, 0) <= 59;
        }
    }).indexOf(false) === -1;
};

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _xDayEpoch = __webpack_require__(35);

var _xDayEpoch2 = _interopRequireDefault(_xDayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  return (0, _xDayEpoch2.default)(-29);
};

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _xDayEpoch = __webpack_require__(35);

var _xDayEpoch2 = _interopRequireDefault(_xDayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  return (0, _xDayEpoch2.default)(-6);
};

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (x) {
    var tmr = new Date();
    tmr.setDate(tmr.getDate() + x);
    return tmr;
};

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _dateToDateString = __webpack_require__(34);

var _dateToDateString2 = _interopRequireDefault(_dateToDateString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
	var d = new Date();
	d.setFullYear(new Date().getFullYear() + 1);
	return (0, _dateToDateString2.default)(d);
};

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (inputValue, bridge) {
    return inputValue.split(bridge).map(function (obj) {
        switch (obj.length) {
            case 0:
                return '01';
            case 1:
                return '0' + (obj === '0' ? '1' : obj);
            default:
                return obj;
        }
    }).join(bridge);
};

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (inputValue, bridge) {
    return inputValue.split(bridge).map(function (obj) {
        switch (obj.length) {
            case 0:
                return '00';
            case 1:
                return '0' + obj;
            default:
                return obj;
        }
    }).join(bridge);
};

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (secs) {
    var days = Math.floor(secs / 60 / 60 / 24);
    var hours = Math.floor(secs % (60 * 60 * 24) / (60 * 60));
    var minutes = Math.floor(secs % (60 * 60) / 60);
    var seconds = Math.floor(secs % 60);
    return (days > 0 ? days + ' day(s)' : '') + (hours > 0 ? hours + ' hour(s)' : '') + (minutes > 0 ? minutes + ' minute(s)' : '') + (seconds > 0 ? seconds + ' second(s)' : '');
};

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _nowAsEpoch = __webpack_require__(65);

var _nowAsEpoch2 = _interopRequireDefault(_nowAsEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (loginTime, interval) {
    return interval - ((0, _nowAsEpoch2.default)() - loginTime) % interval;
};

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _timeStringBigger = __webpack_require__(66);

var _timeStringBigger2 = _interopRequireDefault(_timeStringBigger);

var _timeStringSmaller = __webpack_require__(98);

var _timeStringSmaller2 = _interopRequireDefault(_timeStringSmaller);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (start, end, target) {
    if ((0, _timeStringBigger2.default)(end, start)) {
        return (0, _timeStringBigger2.default)(target, start) && (0, _timeStringSmaller2.default)(target, end);
    }
    /**
     * if open time is bigger than close time
     * target should not between close and open time
     * eg. '09:00:00' is not between '23:00:00' (start) and '08:00:00'(close)
     * because it is between '08:00:00' to '23:00:00'
     * */

    return !((0, _timeStringBigger2.default)(target, end) && (0, _timeStringSmaller2.default)(target, start));
};

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

// only supported format = "hh:mm", seconds are not supported
exports.default = function (timeString) {
    var tokens = timeString.split(':');
    if (tokens.length !== 2) {
        throw new Error('Time string format incorrect, expecting HH:mm, actual: ' + timeString);
    }
    var h = +tokens[0];
    var m = +tokens[1];

    return h * 3600 + m * 60;
};

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _xDayEpoch = __webpack_require__(35);

var _xDayEpoch2 = _interopRequireDefault(_xDayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  return (0, _xDayEpoch2.default)(0);
};

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dateToDateString = __webpack_require__(34);

var _dateToDateString2 = _interopRequireDefault(_dateToDateString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    return (0, _dateToDateString2.default)(new Date());
};

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    return new Date().toISOString().slice(0, 10);
};

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (m) {
	return new Date(new Date().setMonth(new Date().getMonth() + m));
};

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _dateToDateString = __webpack_require__(34);

var _dateToDateString2 = _interopRequireDefault(_dateToDateString);

var _yesterdayEpoch = __webpack_require__(67);

var _yesterdayEpoch2 = _interopRequireDefault(_yesterdayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    return (0, _dateToDateString2.default)(new Date((0, _yesterdayEpoch2.default)() * 1000));
};

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _yesterdayEpoch = __webpack_require__(67);

var _yesterdayEpoch2 = _interopRequireDefault(_yesterdayEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
    return new Date((0, _yesterdayEpoch2.default)() * 1000).toISOString().slice(0, 10);
};

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (handler) {
    document.addEventListener('fullscreenchange', function () {
        return handler(document.fullscreen);
    });
    document.addEventListener('webkitfullscreenchange', function () {
        return handler(document.webkitIsFullScreen);
    });
    document.addEventListener('mozfullscreenchange', function () {
        return handler(document.mozFullScreen);
    });
    document.addEventListener('MSFullscreenChange', function () {
        return handler(document.msFullscreenElement);
    });
};

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    if (document.exitFullscreen) {
        document.exitFullscreen();
    } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
    } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
    } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
    }
};

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (handler) {
    document.removeEventListener('fullscreenchange', handler);
    document.removeEventListener('webkitfullscreenchange', handler);
    document.removeEventListener('mozfullscreenchange', handler);
    document.removeEventListener('MSFullscreenChange', handler);
};

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (elem) {
    if (elem.requestFullscreen) {
        elem.requestFullscreen();
    } else if (elem.msRequestFullscreen) {
        elem.msRequestFullscreen();
    } else if (elem.mozRequestFullScreen) {
        elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) {
        elem.webkitRequestFullscreen();
    }
};

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = typeof alert !== 'undefined' ? alert : function () {};

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = typeof alert !== 'undefined' ? alert : function () {};

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    if (typeof window === 'undefined') return;
    setTimeout(function () {
        return window.dispatchEvent(new Event('resize'));
    }, 100);
};

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (unit) {
    return {
        t: 'Ticks',
        s: 'Seconds',
        m: 'Minutes',
        h: 'Hours',
        d: 'Days'
    }[unit];
};

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extractDurationHelper = __webpack_require__(68);

var _extractDurationHelper2 = _interopRequireDefault(_extractDurationHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contracts, type) {
    var contractsOfType = contracts.filter(function (c) {
        return c.contract_type === type;
    });
    var nonForwardStartingContracts = contractsOfType.filter(function (c) {
        return !c.forward_starting_options;
    });

    if (nonForwardStartingContracts.length === 0) {
        return undefined;
    }

    return (0, _extractDurationHelper2.default)(nonForwardStartingContracts, type);
};

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _arrayToObject = __webpack_require__(94);

var _arrayToObject2 = _interopRequireDefault(_arrayToObject);

var _groupByKey = __webpack_require__(48);

var _groupByKey2 = _interopRequireDefault(_groupByKey);

var _extractDurationHelper = __webpack_require__(68);

var _extractDurationHelper2 = _interopRequireDefault(_extractDurationHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contracts, type) {
    var forwardStartingContracts = contracts.filter(function (c) {
        return !!c.forward_starting_options && c.contract_type === type;
    });
    if (forwardStartingContracts.length === 0) {
        return undefined;
    }

    if (forwardStartingContracts.length > 1) {
        throw new Error('Can not have more than one contract with forward starting options');
    }

    var forwardOptions = forwardStartingContracts[0].forward_starting_options;
    var groupByDate = (0, _groupByKey2.default)(forwardOptions || [], 'date');
    var forwardStartingRange = [];
    Object.keys(groupByDate).sort(function (a, b) {
        return +a - +b;
    }).forEach(function (date) {
        var timesPerDateArr = groupByDate[date].map(function (obj) {
            var open = new Date(obj.open * 1000);
            var close = new Date(obj.close * 1000);
            return { open: open, close: close };
        });
        var timesPerDateObj = (0, _arrayToObject2.default)(timesPerDateArr);
        forwardStartingRange.push(_extends({ date: new Date(date * 1000) }, timesPerDateObj));
    });

    var forwardStartingDurations = (0, _extractDurationHelper2.default)(forwardStartingContracts, type);
    return {
        range: forwardStartingRange,
        options: forwardStartingDurations
    };
};

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isDurationTick = __webpack_require__(102);

var _isDurationTick2 = _interopRequireDefault(_isDurationTick);

var _durationToSecs = __webpack_require__(46);

var _durationToSecs2 = _interopRequireDefault(_durationToSecs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (duration, durationUnit) {
    return (0, _isDurationTick2.default)(durationUnit) || (0, _durationToSecs2.default)(duration, durationUnit) < 120;
};

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (duration, durationUnit, ranges) {
    var relatedBlock = ranges.find(function (r) {
        return r.unit === durationUnit;
    });

    if (!relatedBlock) {
        return false;
    }

    return duration <= relatedBlock.max && duration >= relatedBlock.min;
};

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});


var nullFunc = function nullFunc() {};

var analytics = function analytics(ga) {
    return ga || typeof window !== 'undefined' && window.ga || nullFunc;
};

var trackUserId = exports.trackUserId = function trackUserId(userId, ga) {
    return analytics(ga)('set', 'userId', userId);
};

var trackRoute = exports.trackRoute = function trackRoute(route, ga) {
    return analytics(ga)('send', 'pageview', route);
};

var trackEvent = exports.trackEvent = function trackEvent(category, action, label, ga) {
    return analytics(ga)('send', {
        hitType: 'event',
        eventCategory: category,
        eventAction: action,
        eventLabel: label
    });
};

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (percentage) {
    return "rgba(42, 48, 82, " + percentage + ")";
};

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (value) {
    return value < 0 && 'number-negative' || value > 0 && 'number-positive' || '';
};

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (text) {
    return text.split(')').length > 1 ? text.split(')')[1] : text;
};

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var uniqueId = 0;

exports.default = function () {
  return uniqueId++;
};

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    return typeof window !== 'undefined' && /Mobile/.test(window.navigator.userAgent);
};

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (email) {
    return (/\S+@\S+\.\S+/.test(email)
    );
};

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (password) {
    return (/^[ -~]{6,25}$/.test(password)
    );
};

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getLastDigit = __webpack_require__(103);

var _getLastDigit2 = _interopRequireDefault(_getLastDigit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (ticks, pips) {
    return ticks.reduce(function (acc, x) {
        var digit = (0, _getLastDigit2.default)(x.quote, pips);
        acc[digit]++;
        return acc;
    }, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]).map(function (x) {
        return ticks.length && x / ticks.length * 100;
    });
};

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (digits) {
    return Math.pow(10, -digits);
};

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (n) {
    var numStr = n.toString();
    return numStr.includes('.') ? numStr.split('.')[1].length : 0;
};

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (n) {
    return n > 0 ? '+' + n : n.toString();
};

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (pipSize) {
    if (isNaN(pipSize)) {
        return '0.01';
    }
    var zeros = Array(pipSize).join('0');
    return '0.' + zeros + 1;
};

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (pips) {
    return Math.abs(Math.log10(pips));
};

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (value) {
    return (+value).toFixed(2);
};

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (obj, predicate) {
    return Object.keys(obj).reduce(function (acc, key) {
        if (predicate(obj[key])) {
            acc[key] = obj[key];
        }
        return acc;
    }, {});
};

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Find if certain value is true in the object
 * @param obj
 * @param predicate     (object, index) => true|false
 * @returns {boolean}
 */
var findDeep = function findDeep(obj, predicate) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null || obj === undefined) {
        return false;
    }

    var allChildren = Object.keys(obj).map(function (k) {
        return obj[k];
    });
    var childrenMeetPredicate = allChildren.map(function (child, k) {
        return predicate(child, k);
    });
    if (childrenMeetPredicate.indexOf(true) > -1) {
        return true;
    }
    var childrenResult = allChildren.map(function (child) {
        return findDeep(child, predicate);
    });
    return childrenResult.indexOf(true) > -1;
};

exports.default = findDeep;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var toPlainJS = exports.toPlainJS = function toPlainJS(obj) {
    return obj && (typeof obj.toJS === 'undefined' ? obj : obj.toJS());
};

exports.default = function (obj) {
    return obj && Object.keys(obj).reduce(function (acc, key) {
        acc[key] = toPlainJS(obj[key]);
        return acc;
    }, {});
};

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (arr1, arr2) {
    return arr1.length === arr2.length && arr1.every(function (x, idx) {
        return x === arr2[idx];
    });
};

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (ohlc1, ohlc2) {
    var o1Len = ohlc1.length;
    var o2Len = ohlc2.length;

    if (o1Len !== o2Len) {
        return false;
    }

    if (o1Len === 0) {
        return true;
    }

    var o1Last = ohlc1[o1Len - 1];
    var o2Last = ohlc2[o2Len - 1];

    return o1Last.epoch === o2Last.epoch && o1Last.close === o2Last.close;
};

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (ticks1, ticks2) {
    return ticks1.length === ticks2.length && (ticks1.length === 0 || ticks1[ticks1.length - 1].epoch === ticks2[ticks2.length - 1].epoch);
};

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _doCandleEqual = __webpack_require__(104);

var _doCandleEqual2 = _interopRequireDefault(_doCandleEqual);

var _doArrayDifferJustOneEntry = __webpack_require__(69);

var _doArrayDifferJustOneEntry2 = _interopRequireDefault(_doArrayDifferJustOneEntry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (candles1, candles2) {
    return (0, _doArrayDifferJustOneEntry2.default)(candles1, candles2, _doCandleEqual2.default);
};

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _doTicksEqual = __webpack_require__(105);

var _doTicksEqual2 = _interopRequireDefault(_doTicksEqual);

var _doArrayDifferJustOneEntry = __webpack_require__(69);

var _doArrayDifferJustOneEntry2 = _interopRequireDefault(_doArrayDifferJustOneEntry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (ticks1, ticks2) {
    return (0, _doArrayDifferJustOneEntry2.default)(ticks1, ticks2, _doTicksEqual2.default);
};

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (candles) {
    return candles && (candles.length === 0 ? undefined : +candles[candles.length - 1].close);
};

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (ticks) {
    return ticks && ticks.length > 0 ? ticks[ticks.length - 1].quote : undefined;
};

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

// a zip + map, but I do not find we need it much, so no need to generalize
exports.default = function (history) {
    return history.times.map(function (t, idx) {
        return {
            epoch: +t,
            quote: +history.prices[idx]
        };
    });
};

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

// open_time is used when data is stream
exports.default = function (candle) {
    return [+(candle.open_time || candle.epoch) * 1000, +candle.open, +candle.high, +candle.low, +candle.close];
};

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (candles) {
    return candles.map(function (data) {
        return { quote: +data.open, epoch: +data.epoch };
    });
};

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (tick) {
    return [+tick.epoch * 1000, +tick.quote];
};

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (proposal) {
    return proposal && +proposal.ask_price;
};

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _nowAsEpoch = __webpack_require__(65);

var _nowAsEpoch2 = _interopRequireDefault(_nowAsEpoch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contract) {
    var nowEpoch = (0, _nowAsEpoch2.default)();
    if (contract.tick_count) {
        var _start = +contract.date_start - 5;
        var exitTime = +contract.exit_tick_time + 5;
        var _end = exitTime || nowEpoch;
        return { start: _start, end: _end };
    }

    var bufferSize = 0.05; // 5 % buffer
    var contractStart = +contract.date_start;
    var contractEnd = +contract.exit_tick_time || +contract.date_expiry;

    if (contractEnd <= contractStart) {
        var e = new RangeError('Contract ends time is earlier than start time');
        e.name = 'ContractEndsBeforeStart';
        throw e;
    }

    var buffer = (contractEnd - contractStart) * bufferSize;
    var bufferedExitTime = contractEnd + buffer;

    var start = buffer ? contractStart - buffer : contractStart;
    var end = contractEnd ? bufferedExitTime : nowEpoch;

    return {
        end: Math.round(end),
        start: Math.round(start)
    };
};

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (category) {
    return {
        callput: 'Up/Down',
        risefall: 'Rise/Fall',
        higherlower: 'Higher/Lower',
        asian: 'Asians',
        digits: 'Digits',
        endsinout: 'Ends In/Out',
        staysinout: 'Stays In/Out',
        touchnotouch: 'Touch/No Touch',
        spreads: 'Spreads'
    }[category];
};

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (code) {
	return {
		contract_id: 'Contract ID',
		purchase_time: 'Purchase Time',
		ask_price: 'Ask Price',
		bid_price: 'Bid Price',
		date_start: 'Start Time',
		date_expiry: 'Expiry Time',
		date_settlement: 'Settlement Time',
		expiry_time: 'Expiry Time',

		current_spot: 'Current Spot',
		current_spot_time: 'Current Spot Time',
		entry_spot: 'Entry Spot',
		entry_tick_time: 'Entry Spot Time',
		sell_price: 'Sell Price',
		payout: 'Potential Payout',
		buy_price: 'Purchase Price',

		barrier: 'Barrier',
		low_barrier: 'Low Barrier',
		high_barrier: 'High Barrier',

		sell_time: 'Sell Time',

		exit_tick_time: 'Exit Spot Time', // to be confirmed
		exit_tick: 'Exit Spot', // to show both or not?

		sell_spot_time: 'DO NOT USE',
		entry_tick: 'DO NOT USE',
		sell_spot: 'DO NOT USE'
	}[code];
};

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (contracts) {
    return {
        amountPerPoint: contracts[0].amount_per_point,
        stopType: contracts[0].stop_type,
        stopLoss: contracts[0].stop_loss,
        stopProfit: contracts[0].stop_profit
    };
};

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _durationToSecs = __webpack_require__(46);

var _durationToSecs2 = _interopRequireDefault(_durationToSecs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (duration, unit) {
    return (0, _durationToSecs2.default)(duration, unit) < 60 * 60 * 24;
};

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _groupByKey = __webpack_require__(48);

var _groupByKey2 = _interopRequireDefault(_groupByKey);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (contracts) {
    var extraRemoved = contracts.map(function (contract) {
        return {
            amount_per_point: contract.amount_per_point,
            barrier: contract.barrier,
            barriers: contract.barriers,
            contract_category: contract.contract_category,
            contract_category_display: contract.contract_category_display,
            contract_display: contract.contract_display,
            contract_type: contract.contract_type,
            expiry_type: contract.expiry_type,
            forward_starting_options: contract.forward_starting_options,
            high_barrier: contract.high_barrier,
            last_digit_range: contract.last_digit_range,
            low_barrier: contract.low_barrier,
            min_contract_duration: contract.min_contract_duration,
            max_contract_duration: contract.max_contract_duration,
            stop_type: contract.stop_type,
            stop_loss: contract.stop_loss,
            stop_profit: contract.stop_profit
        };
    });

    var groupByCategory = (0, _groupByKey2.default)(extraRemoved, 'contract_category');
    var allCategory = Object.keys(groupByCategory);
    allCategory.forEach(function (c) {
        var relatedContracts = groupByCategory[c];
        var groupByType = (0, _groupByKey2.default)(relatedContracts, 'contract_type');
        groupByCategory[c] = groupByType;
    });

    return groupByCategory;
};

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tradeTypeCodeToText = __webpack_require__(106);

var _tradeTypeCodeToText2 = _interopRequireDefault(_tradeTypeCodeToText);

var _typeHasBarrier = __webpack_require__(107);

var _typeHasBarrier2 = _interopRequireDefault(_typeHasBarrier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (code, barrier) {
    return (0, _tradeTypeCodeToText2.default)(code) + ((0, _typeHasBarrier2.default)(code) ? ' ' + barrier : '');
};

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _tradeTypes = __webpack_require__(49);

var _tradeTypes2 = _interopRequireDefault(_tradeTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (text) {
    var tradeType = _tradeTypes2.default.find(function (x) {
        return x.text === text;
    });
    if (!tradeType) throw new Error('Unknown trade type text');
    return tradeType.value;
};

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4)
  , isArray  = __webpack_require__(114)
  , SPECIES  = __webpack_require__(3)('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(338);

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction  = __webpack_require__(19)
  , isObject   = __webpack_require__(4)
  , invoke     = __webpack_require__(53)
  , arraySlice = [].slice
  , factories  = {};

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /*, args... */){
  var fn       = aFunction(this)
    , partArgs = arraySlice.call(arguments, 1);
  var bound = function(/* args... */){
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if(isObject(fn.prototype))bound.prototype = fn.prototype;
  return bound;
};

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(29)
  , gOPS    = __webpack_require__(55)
  , pIE     = __webpack_require__(42);
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(2);
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

var isObject       = __webpack_require__(4)
  , setPrototypeOf = __webpack_require__(81).set;
module.exports = function(that, target, C){
  var P, S = target.constructor;
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
    setPrototypeOf(that, P);
  } return that;
};

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create         = __webpack_require__(39)
  , descriptor     = __webpack_require__(17)
  , setToStringTag = __webpack_require__(31)
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(10)(IteratorPrototype, __webpack_require__(3)('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys   = __webpack_require__(29)
  , toIObject = __webpack_require__(12);
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(1)
  , macrotask = __webpack_require__(86).set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = __webpack_require__(26)(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

var dP       = __webpack_require__(6)
  , anObject = __webpack_require__(2)
  , getKeys  = __webpack_require__(29);

module.exports = __webpack_require__(8) ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(12)
  , gOPN      = __webpack_require__(40).f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var path      = __webpack_require__(350)
  , invoke    = __webpack_require__(53)
  , aFunction = __webpack_require__(19);
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that = this
      , aLen = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !aLen)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(aLen > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(32)
  , defined   = __webpack_require__(15);
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global         = __webpack_require__(1)
  , DESCRIPTORS    = __webpack_require__(8)
  , LIBRARY        = __webpack_require__(28)
  , $typed         = __webpack_require__(129)
  , hide           = __webpack_require__(10)
  , redefineAll    = __webpack_require__(30)
  , fails          = __webpack_require__(5)
  , anInstance     = __webpack_require__(25)
  , toInteger      = __webpack_require__(32)
  , toLength       = __webpack_require__(9)
  , gOPN           = __webpack_require__(40).f
  , dP             = __webpack_require__(6).f
  , arrayFill      = __webpack_require__(70)
  , setToStringTag = __webpack_require__(31)
  , ARRAY_BUFFER   = 'ArrayBuffer'
  , DATA_VIEW      = 'DataView'
  , PROTOTYPE      = 'prototype'
  , WRONG_LENGTH   = 'Wrong length!'
  , WRONG_INDEX    = 'Wrong index!'
  , $ArrayBuffer   = global[ARRAY_BUFFER]
  , $DataView      = global[DATA_VIEW]
  , Math           = global.Math
  , RangeError     = global.RangeError
  , Infinity       = global.Infinity
  , BaseBuffer     = $ArrayBuffer
  , abs            = Math.abs
  , pow            = Math.pow
  , floor          = Math.floor
  , log            = Math.log
  , LN2            = Math.LN2
  , BUFFER         = 'buffer'
  , BYTE_LENGTH    = 'byteLength'
  , BYTE_OFFSET    = 'byteOffset'
  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function(value, mLen, nBytes){
  var buffer = Array(nBytes)
    , eLen   = nBytes * 8 - mLen - 1
    , eMax   = (1 << eLen) - 1
    , eBias  = eMax >> 1
    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
    , i      = 0
    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
    , e, m, c;
  value = abs(value)
  if(value != value || value === Infinity){
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if(value * (c = pow(2, -e)) < 1){
      e--;
      c *= 2;
    }
    if(e + eBias >= 1){
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if(value * c >= 2){
      e++;
      c /= 2;
    }
    if(e + eBias >= eMax){
      m = 0;
      e = eMax;
    } else if(e + eBias >= 1){
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
};
var unpackIEEE754 = function(buffer, mLen, nBytes){
  var eLen  = nBytes * 8 - mLen - 1
    , eMax  = (1 << eLen) - 1
    , eBias = eMax >> 1
    , nBits = eLen - 7
    , i     = nBytes - 1
    , s     = buffer[i--]
    , e     = s & 127
    , m;
  s >>= 7;
  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if(e === 0){
    e = 1 - eBias;
  } else if(e === eMax){
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
};

var unpackI32 = function(bytes){
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
};
var packI8 = function(it){
  return [it & 0xff];
};
var packI16 = function(it){
  return [it & 0xff, it >> 8 & 0xff];
};
var packI32 = function(it){
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
};
var packF64 = function(it){
  return packIEEE754(it, 52, 8);
};
var packF32 = function(it){
  return packIEEE754(it, 23, 4);
};

var addGetter = function(C, key, internal){
  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
};

var get = function(view, bytes, index, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, bytes, index, conversion, value, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = conversion(+value);
  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
};

var validateArrayBufferArguments = function(that, length){
  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
  var numberLength = +length
    , byteLength   = toLength(numberLength);
  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
  return byteLength;
};

if(!$typed.ABV){
  $ArrayBuffer = function ArrayBuffer(length){
    var byteLength = validateArrayBufferArguments(this, length);
    this._b       = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength){
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH]
      , offset       = toInteger(byteOffset);
    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if(DESCRIPTORS){
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset){
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset){
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if(!fails(function(){
    new $ArrayBuffer;     // eslint-disable-line no-new
  }) || !fails(function(){
    new $ArrayBuffer(.5); // eslint-disable-line no-new
  })){
    $ArrayBuffer = function ArrayBuffer(length){
      return new BaseBuffer(validateArrayBufferArguments(this, length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
    };
    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2))
    , $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

var global         = __webpack_require__(1)
  , core           = __webpack_require__(37)
  , LIBRARY        = __webpack_require__(28)
  , wksExt         = __webpack_require__(130)
  , defineProperty = __webpack_require__(6).f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};

/***/ }),
/* 354 */
/***/ (function(module, exports) {

(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

var fs = __webpack_require__(59)
  , lstat = fs.lstatSync;

exports.readlinkSync = function (p) {
  if (lstat(p).isSymbolicLink()) {
    return fs.readlinkSync(p);
  } else {
    return p;
  }
};




/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["js-interpreter"] = factory();
	else
		root["js-interpreter"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * @license
 * JavaScript Interpreter
 *
 * Copyright 2013 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Interpreting JavaScript in JavaScript.
 * @author fraser@google.com (Neil Fraser)
 */


/**
 * Create a new interpreter.
 * @param {string|!Object} code Raw JavaScript text or AST.
 * @param {Function=} opt_initFunc Optional initialization function.  Used to
 *     define APIs.  When called it is passed the interpreter object and the
 *     global scope object.
 * @constructor
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var acorn = __webpack_require__(1);

var copy = __webpack_require__(2);

var Interpreter = function Interpreter(code, opt_initFunc) {
  if (typeof code == 'string') {
    code = acorn.parse(code, Interpreter.PARSE_OPTIONS);
  }
  this.ast = code;
  this.initFunc_ = opt_initFunc;
  this.paused_ = false;
  this.polyfills_ = [];
  // Predefine some common primitives for performance.
  this.UNDEFINED = new Interpreter.Primitive(undefined, this);
  this.NULL = new Interpreter.Primitive(null, this);
  this.NAN = new Interpreter.Primitive(NaN, this);
  this.TRUE = new Interpreter.Primitive(true, this);
  this.FALSE = new Interpreter.Primitive(false, this);
  this.NUMBER_ZERO = new Interpreter.Primitive(0, this);
  this.NUMBER_ONE = new Interpreter.Primitive(1, this);
  this.STRING_EMPTY = new Interpreter.Primitive('', this);
  // Create and initialize the global scope.
  this.global = this.createScope(this.ast, null);
  // Fix the parent properties now that the global scope exists.
  //this.UNDEFINED.parent = undefined;
  //this.NULL.parent = undefined;
  this.NAN.parent = this.NUMBER;
  this.TRUE.parent = this.BOOLEAN;
  this.FALSE.parent = this.BOOLEAN;
  this.NUMBER_ZERO.parent = this.NUMBER;
  this.NUMBER_ONE.parent = this.NUMBER;
  this.STRING_EMPTY.parent = this.STRING;
  // Run the polyfills.
  this.ast = acorn.parse(this.polyfills_.join('\n'), Interpreter.PARSE_OPTIONS);
  this.polyfills_ = undefined; // Allow polyfill strings to garbage collect.
  this.stripLocations_(this.ast, undefined, undefined);
  this.stateStack = [{
    node: this.ast,
    scope: this.global,
    thisExpression: this.global,
    done: false
  }];
  this.run();
  this.value = this.UNDEFINED;
  // Point at the main program.
  this.ast = code;
  this.stateStack = [{
    node: this.ast,
    scope: this.global,
    thisExpression: this.global,
    done: false
  }];
};

/**
 * @const {!Object} Configuration used for all Acorn parsing.
 */
Interpreter.PARSE_OPTIONS = {
  ecmaVersion: 5
};

/**
 * Property descriptor of readonly properties.
 */
Interpreter.READONLY_DESCRIPTOR = {
  configurable: true,
  enumerable: true,
  writable: false
};

/**
 * Property descriptor of non-enumerable properties.
 */
Interpreter.NONENUMERABLE_DESCRIPTOR = {
  configurable: true,
  enumerable: false,
  writable: true
};

/**
 * Property descriptor of readonly, non-enumerable properties.
 */
Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR = {
  configurable: true,
  enumerable: false,
  writable: false
};

/**
 * Add more code to the interpreter.
 * @param {string|!Object} code Raw JavaScript text or AST.
 */
Interpreter.prototype.appendCode = function (code) {
  var state = this.stateStack[0];
  if (!state || state.node.type != 'Program') {
    throw Error('Expecting original AST to start with a Program node.');
  }
  if (typeof code == 'string') {
    code = acorn.parse(code, Interpreter.PARSE_OPTIONS);
  }
  if (!code || code.type != 'Program') {
    throw Error('Expecting new AST to start with a Program node.');
  }
  this.populateScope_(code, state.scope);
  // Append the new program to the old one.
  for (var i = 0, node; node = code.body[i]; i++) {
    state.node.body.push(node);
  }
  state.done = false;
};

/**
 * Execute one step of the interpreter.
 * @return {boolean} True if a step was executed, false if no more instructions.
 */
Interpreter.prototype.step = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  if (!state || state.node.type == 'Program' && state.done) {
    return false;
  } else if (this.paused_) {
    return true;
  }
  this['step' + state.node.type]();
  if (!state.node.end) {
    // This is polyfill code.  Keep executing until we arrive at user code.
    return this.step();
  }
  return true;
};

/**
 * Execute the interpreter to program completion.  Vulnerable to infinite loops.
 * @return {boolean} True if a execution is asynchronously blocked,
 *     false if no more instructions.
 */
Interpreter.prototype.run = function () {
  while (!this.paused_ && this.step()) {}
  return this.paused_;
};

/**
 * Initialize the global scope with buitin properties and functions.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initGlobalScope = function (scope) {
  // Initialize uneditable global properties.
  this.setProperty(scope, 'Infinity', this.createPrimitive(Infinity), Interpreter.READONLY_DESCRIPTOR);
  this.setProperty(scope, 'NaN', this.NAN, Interpreter.READONLY_DESCRIPTOR);
  this.setProperty(scope, 'undefined', this.UNDEFINED, Interpreter.READONLY_DESCRIPTOR);
  this.setProperty(scope, 'window', scope, Interpreter.READONLY_DESCRIPTOR);
  this.setProperty(scope, 'self', scope); // Editable.

  // Initialize global objects.
  this.initFunction(scope);
  this.initObject(scope);
  // Unable to set scope's parent prior (this.OBJECT did not exist).
  scope.parent = this.OBJECT;
  this.initArray(scope);
  this.initNumber(scope);
  this.initString(scope);
  this.initBoolean(scope);
  this.initDate(scope);
  this.initMath(scope);
  this.initRegExp(scope);
  this.initJSON(scope);
  this.initError(scope);

  // Initialize global functions.
  var thisInterpreter = this;
  var wrapper;
  wrapper = function wrapper(num) {
    num = num || thisInterpreter.UNDEFINED;
    return thisInterpreter.createPrimitive(isNaN(num.toNumber()));
  };
  this.setProperty(scope, 'isNaN', this.createNativeFunction(wrapper));

  wrapper = function wrapper(num) {
    num = num || thisInterpreter.UNDEFINED;
    return thisInterpreter.createPrimitive(isFinite(num.toNumber()));
  };
  this.setProperty(scope, 'isFinite', this.createNativeFunction(wrapper));

  this.setProperty(scope, 'parseFloat', this.getProperty(this.NUMBER, 'parseFloat'));

  this.setProperty(scope, 'parseInt', this.getProperty(this.NUMBER, 'parseInt'));

  var func = this.createObject(this.FUNCTION);
  func.eval = true;
  this.setProperty(func, 'length', this.NUMBER_ONE, Interpreter.READONLY_DESCRIPTOR);
  this.setProperty(scope, 'eval', func);

  var strFunctions = [[escape, 'escape'], [unescape, 'unescape'], [decodeURI, 'decodeURI'], [decodeURIComponent, 'decodeURIComponent'], [encodeURI, 'encodeURI'], [encodeURIComponent, 'encodeURIComponent']];
  for (var i = 0; i < strFunctions.length; i++) {
    wrapper = function (nativeFunc) {
      return function (str) {
        str = (str || thisInterpreter.UNDEFINED).toString();
        try {
          str = nativeFunc(str);
        } catch (e) {
          // decodeURI('%xy') will throw an error.  Catch and rethrow.
          thisInterpreter.throwException(thisInterpreter.URI_ERROR, e.message);
        }
        return thisInterpreter.createPrimitive(str);
      };
    }(strFunctions[i][0]);
    this.setProperty(scope, strFunctions[i][1], this.createNativeFunction(wrapper));
  }

  // Run any user-provided initialization.
  if (this.initFunc_) {
    this.initFunc_(this, scope);
  }
};

/**
 * Initialize the Function class.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initFunction = function (scope) {
  var thisInterpreter = this;
  var wrapper;
  var identifierRegexp = /^[A-Za-z_$][\w$]*$/;
  // Function constructor.
  wrapper = function wrapper(var_args) {
    if (this.parent == thisInterpreter.FUNCTION) {
      // Called with new.
      var newFunc = this;
    } else {
      var newFunc = thisInterpreter.createObject(thisInterpreter.FUNCTION);
    }
    if (arguments.length) {
      var code = arguments[arguments.length - 1].toString();
    } else {
      var code = '';
    }
    var args = [];
    for (var i = 0; i < arguments.length - 1; i++) {
      var name = arguments[i].toString();
      if (!name.match(identifierRegexp)) {
        thisInterpreter.throwException(thisInterpreter.SYNTAX_ERROR, 'Invalid function argument: ' + name);
        return;
      }
      args.push(name);
    }
    args = args.join(', ');
    // Interestingly, the scope for constructed functions is the global scope,
    // even if they were constructed in some other scope.
    newFunc.parentScope = thisInterpreter.stateStack[0].scope;
    // Acorn needs to parse code in the context of a function or else 'return'
    // statements will be syntax errors.
    var ast = acorn.parse('$ = function(' + args + ') {' + code + '};', Interpreter.PARSE_OPTIONS);
    if (ast.body.length != 1) {
      // Function('a', 'return a + 6;}; {alert(1);');
      thisInterpreter.throwException(thisInterpreter.SYNTAX_ERROR, 'Invalid code in function body.');
      return;
    }
    newFunc.node = ast.body[0].expression.right;
    thisInterpreter.setProperty(newFunc, 'length', thisInterpreter.createPrimitive(newFunc.node.length), Interpreter.READONLY_DESCRIPTOR);
    return newFunc;
  };
  this.FUNCTION = this.createObject(null);
  this.setProperty(scope, 'Function', this.FUNCTION);
  // Manually setup type and prototype because createObj doesn't recognize
  // this object as a function (this.FUNCTION did not exist).
  this.FUNCTION.type = 'function';
  this.setProperty(this.FUNCTION, 'prototype', this.createObject(null));
  this.FUNCTION.nativeFunc = wrapper;

  var boxThis = function boxThis(value) {
    // In non-strict mode 'this' must be an object.
    if (value.isPrimitive && !thisInterpreter.getScope().strict) {
      if (value == thisInterpreter.UNDEFINED || value == thisInterpreter.NULL) {
        // 'Undefined' and 'null' are changed to global object.
        value = thisInterpreter.global;
      } else {
        // Primitives must be boxed in non-strict mode.
        var box = thisInterpreter.createObject(value.parent);
        box.data = value.data;
        value = box;
      }
    }
    return value;
  };

  wrapper = function wrapper(thisArg, args) {
    var state = thisInterpreter.stateStack[thisInterpreter.stateStack.length - 1];
    // Rewrite the current 'CallExpression' to apply a different function.
    state.func_ = this;
    // Assign the 'this' object.
    state.funcThis_ = boxThis(thisArg);
    // Bind any provided arguments.
    state.arguments_ = [];
    if (args) {
      if (thisInterpreter.isa(args, thisInterpreter.ARRAY)) {
        for (var i = 0; i < args.length; i++) {
          state.arguments_[i] = thisInterpreter.getProperty(args, i);
        }
      } else {
        thisInterpreter.throwException(thisInterpreter.TYPE_ERROR, 'CreateListFromArrayLike called on non-object');
      }
    }
    state.doneArgs_ = true;
    state.doneExec_ = false;
  };
  this.setNativeFunctionPrototype(this.FUNCTION, 'apply', wrapper);

  wrapper = function wrapper(thisArg, var_args) {
    var state = thisInterpreter.stateStack[thisInterpreter.stateStack.length - 1];
    // Rewrite the current 'CallExpression' to call a different function.
    state.func_ = this;
    // Assign the 'this' object.
    state.funcThis_ = boxThis(thisArg);
    // Bind any provided arguments.
    state.arguments_ = [];
    for (var i = 1; i < arguments.length; i++) {
      state.arguments_.push(arguments[i]);
    }
    state.doneArgs_ = true;
    state.doneExec_ = false;
  };
  this.setNativeFunctionPrototype(this.FUNCTION, 'call', wrapper);

  this.polyfills_.push(
  // Polyfill copied from:
  // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind
  "Object.defineProperty(Function.prototype, 'bind', {configurable: true, value:", "function(oThis) {", "if (typeof this !== 'function') {", "throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');", "}", "var aArgs   = Array.prototype.slice.call(arguments, 1),", "fToBind = this,", "fNOP    = function() {},", "fBound  = function() {", "return fToBind.apply(this instanceof fNOP", "? this", ": oThis,", "aArgs.concat(Array.prototype.slice.call(arguments)));", "};", "if (this.prototype) {", "fNOP.prototype = this.prototype;", "}", "fBound.prototype = new fNOP();", "return fBound;", "}", "});", "");

  // Function has no parent to inherit from, so it needs its own mandatory
  // toString and valueOf functions.
  wrapper = function wrapper() {
    return thisInterpreter.createPrimitive(this.toString());
  };
  this.setNativeFunctionPrototype(this.FUNCTION, 'toString', wrapper);
  this.setProperty(this.FUNCTION, 'toString', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);
  wrapper = function wrapper() {
    return thisInterpreter.createPrimitive(this.valueOf());
  };
  this.setNativeFunctionPrototype(this.FUNCTION, 'valueOf', wrapper);
  this.setProperty(this.FUNCTION, 'valueOf', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);
};

/**
 * Initialize the Object class.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initObject = function (scope) {
  var thisInterpreter = this;
  var wrapper;
  // Object constructor.
  wrapper = function wrapper(value) {
    if (!value || value == thisInterpreter.UNDEFINED || value == thisInterpreter.NULL) {
      // Create a new object.
      if (this.parent == thisInterpreter.OBJECT) {
        // Called with new.
        return this;
      } else {
        return thisInterpreter.createObject(thisInterpreter.OBJECT);
      }
    }
    if (value.isPrimitive) {
      // Wrap the value as an object.
      var obj = thisInterpreter.createObject(value.parent);
      obj.data = value.data;
      return obj;
    }
    // Return the provided object.
    return value;
  };
  this.OBJECT = this.createNativeFunction(wrapper);
  this.setProperty(scope, 'Object', this.OBJECT);

  // Static methods on Object.
  wrapper = function wrapper(obj) {
    var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
    var i = 0;
    for (var key in obj.properties) {
      thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(key));
      i++;
    }
    return pseudoList;
  };
  this.setProperty(this.OBJECT, 'getOwnPropertyNames', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  wrapper = function wrapper(obj) {
    var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
    var i = 0;
    for (var key in obj.properties) {
      if (obj.notEnumerable[key]) {
        continue;
      }
      thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(key));
      i++;
    }
    return pseudoList;
  };
  this.setProperty(this.OBJECT, 'keys', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  wrapper = function wrapper(obj, prop, descriptor) {
    prop = (prop || thisInterpreter.UNDEFINED).toString();
    if (!(descriptor instanceof Interpreter.Object)) {
      thisInterpreter.throwException(thisInterpreter.TYPE_ERROR, 'Property description must be an object.');
      return;
    }
    if (!obj.properties[prop] && obj.preventExtensions) {
      thisInterpreter.throwException(thisInterpreter.TYPE_ERROR, 'Can\'t define property ' + prop + ', object is not extensible');
      return;
    }
    var value = thisInterpreter.getProperty(descriptor, 'value');
    if (value == thisInterpreter.UNDEFINED) {
      value = null;
    }
    var get = thisInterpreter.getProperty(descriptor, 'get');
    var set = thisInterpreter.getProperty(descriptor, 'set');
    var nativeDescriptor = {
      configurable: thisInterpreter.pseudoToNative(
      /** @type !Interpreter.Primitive */
      thisInterpreter.getProperty(descriptor, 'configurable')),
      enumerable: thisInterpreter.pseudoToNative(
      /** @type !Interpreter.Primitive */
      thisInterpreter.getProperty(descriptor, 'enumerable')),
      writable: thisInterpreter.pseudoToNative(
      /** @type !Interpreter.Primitive */
      thisInterpreter.getProperty(descriptor, 'writable')),
      get: get == thisInterpreter.UNDEFINED ? undefined : get,
      set: set == thisInterpreter.UNDEFINED ? undefined : set
    };
    thisInterpreter.setProperty(obj, prop, value, nativeDescriptor);
    return obj;
  };
  this.setProperty(this.OBJECT, 'defineProperty', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  this.polyfills_.push("Object.defineProperty(Object.prototype, 'defineProperties', {configurable: true, value:", "function(obj, props) {", "var keys = Object.keys(props);", "for (var i = 0; i < keys.length; i++) {", "Object.defineProperty(obj, keys[i], props[keys[i]]);", "}", "return obj;", "}", "});", "");

  wrapper = function wrapper(obj, prop) {
    prop = (prop || thisInterpreter.UNDEFINED).toString();
    if (!(prop in obj.properties)) {
      return thisInterpreter.UNDEFINED;
    }
    var configurable = !obj.notConfigurable[prop];
    var enumerable = !obj.notEnumerable[prop];
    var writable = !obj.notWritable[prop];
    var getter = obj.getter[prop];
    var setter = obj.setter[prop];

    var descriptor = thisInterpreter.createObject(thisInterpreter.OBJECT);
    thisInterpreter.setProperty(descriptor, 'configurable', thisInterpreter.createPrimitive(configurable));
    thisInterpreter.setProperty(descriptor, 'enumerable', thisInterpreter.createPrimitive(enumerable));
    if (getter || setter) {
      thisInterpreter.setProperty(descriptor, 'getter', getter);
      thisInterpreter.setProperty(descriptor, 'setter', setter);
    } else {
      thisInterpreter.setProperty(descriptor, 'writable', thisInterpreter.createPrimitive(writable));
      thisInterpreter.setProperty(descriptor, 'value', thisInterpreter.getProperty(obj, prop));
    }
    return descriptor;
  };
  this.setProperty(this.OBJECT, 'getOwnPropertyDescriptor', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  wrapper = function wrapper(obj) {
    if (obj.parent && obj.parent.properties && obj.parent.properties.prototype) {
      return obj.parent.properties.prototype;
    }
    return thisInterpreter.NULL;
  };
  this.setProperty(this.OBJECT, 'getPrototypeOf', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  wrapper = function wrapper(obj) {
    return thisInterpreter.createPrimitive(!obj.preventExtensions);
  };
  this.setProperty(this.OBJECT, 'isExtensible', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  wrapper = function wrapper(obj) {
    if (!obj.isPrimitive) {
      obj.preventExtensions = true;
    }
    return obj;
  };
  this.setProperty(this.OBJECT, 'preventExtensions', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  // Instance methods on Object.
  wrapper = function wrapper() {
    return thisInterpreter.createPrimitive(this.toString());
  };
  this.setNativeFunctionPrototype(this.OBJECT, 'toString', wrapper);

  wrapper = function wrapper() {
    return thisInterpreter.createPrimitive(this.toString());
  };
  this.setNativeFunctionPrototype(this.OBJECT, 'toLocaleString', wrapper);

  wrapper = function wrapper() {
    return thisInterpreter.createPrimitive(this.valueOf());
  };
  this.setNativeFunctionPrototype(this.OBJECT, 'valueOf', wrapper);

  wrapper = function wrapper(prop) {
    if (this == thisInterpreter.NULL || this == thisInterpreter.UNDEFINED) {
      thisInterpreter.throwException(thisInterpreter.TYPE_ERROR, 'Cannot convert undefined or null to object');
      return;
    }
    prop = (prop || thisInterpreter.UNDEFINED).toString();
    return prop in this.properties ? thisInterpreter.TRUE : thisInterpreter.FALSE;
  };
  this.setNativeFunctionPrototype(this.OBJECT, 'hasOwnProperty', wrapper);

  wrapper = function wrapper(prop) {
    prop = (prop || thisInterpreter.UNDEFINED).toString();
    var enumerable = prop in this.properties && !this.notEnumerable[prop];
    return thisInterpreter.createPrimitive(enumerable);
  };
  this.setNativeFunctionPrototype(this.OBJECT, 'propertyIsEnumerable', wrapper);

  wrapper = function wrapper(obj) {
    while (true) {
      if (obj.parent && obj.parent.properties && obj.parent.properties.prototype) {
        obj = obj.parent.properties.prototype;
        if (obj == this) {
          return thisInterpreter.createPrimitive(true);
        }
      } else {
        // No parent, reached the top.
        return thisInterpreter.createPrimitive(false);
      }
    }
  };
  this.setNativeFunctionPrototype(this.OBJECT, 'isPrototypeOf', wrapper);
};

/**
 * Initialize the Array class.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initArray = function (scope) {
  var thisInterpreter = this;
  var getInt = function getInt(obj, def) {
    // Return an integer, or the default.
    var n = obj ? Math.floor(obj.toNumber()) : def;
    if (isNaN(n)) {
      n = def;
    }
    return n;
  };
  var strictComp = function strictComp(a, b) {
    // Strict === comparison.
    if (a.isPrimitive && b.isPrimitive) {
      return a.data === b.data;
    }
    return a === b;
  };
  var wrapper;
  // Array constructor.
  wrapper = function wrapper(var_args) {
    if (this.parent == thisInterpreter.ARRAY) {
      // Called with new.
      var newArray = this;
    } else {
      var newArray = thisInterpreter.createObject(thisInterpreter.ARRAY);
    }
    var first = arguments[0];
    if (arguments.length == 1 && first.type == 'number') {
      if (isNaN(thisInterpreter.arrayIndex(first))) {
        thisInterpreter.throwException(thisInterpreter.RANGE_ERROR, 'Invalid array length');
      }
      newArray.length = first.data;
    } else {
      for (var i = 0; i < arguments.length; i++) {
        newArray.properties[i] = arguments[i];
      }
      newArray.length = i;
    }
    return newArray;
  };
  this.ARRAY = this.createNativeFunction(wrapper);
  this.setProperty(scope, 'Array', this.ARRAY);

  // Static methods on Array.
  wrapper = function wrapper(obj) {
    return thisInterpreter.createPrimitive(thisInterpreter.isa(obj, thisInterpreter.ARRAY));
  };
  this.setProperty(this.ARRAY, 'isArray', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  // Instance methods on Array.
  wrapper = function wrapper() {
    if (this.length) {
      var value = this.properties[this.length - 1];
      delete this.properties[this.length - 1];
      this.length--;
    } else {
      var value = thisInterpreter.UNDEFINED;
    }
    return value;
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'pop', wrapper);

  wrapper = function wrapper(var_args) {
    for (var i = 0; i < arguments.length; i++) {
      this.properties[this.length] = arguments[i];
      this.length++;
    }
    return thisInterpreter.createPrimitive(this.length);
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'push', wrapper);

  wrapper = function wrapper() {
    if (this.length) {
      var value = this.properties[0];
      for (var i = 1; i < this.length; i++) {
        this.properties[i - 1] = this.properties[i];
      }
      this.length--;
      delete this.properties[this.length];
    } else {
      var value = thisInterpreter.UNDEFINED;
    }
    return value;
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'shift', wrapper);

  wrapper = function wrapper(var_args) {
    for (var i = this.length - 1; i >= 0; i--) {
      this.properties[i + arguments.length] = this.properties[i];
    }
    this.length += arguments.length;
    for (var i = 0; i < arguments.length; i++) {
      this.properties[i] = arguments[i];
    }
    return thisInterpreter.createPrimitive(this.length);
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'unshift', wrapper);

  wrapper = function wrapper() {
    for (var i = 0; i < this.length / 2; i++) {
      var tmp = this.properties[this.length - i - 1];
      this.properties[this.length - i - 1] = this.properties[i];
      this.properties[i] = tmp;
    }
    return this;
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'reverse', wrapper);

  wrapper = function wrapper(index, howmany, var_args) {
    index = getInt(index, 0);
    if (index < 0) {
      index = Math.max(this.length + index, 0);
    } else {
      index = Math.min(index, this.length);
    }
    howmany = getInt(howmany, Infinity);
    howmany = Math.min(howmany, this.length - index);
    var removed = thisInterpreter.createObject(thisInterpreter.ARRAY);
    // Remove specified elements.
    for (var i = index; i < index + howmany; i++) {
      removed.properties[removed.length++] = this.properties[i];
      this.properties[i] = this.properties[i + howmany];
    }
    // Move other element to fill the gap.
    for (var i = index + howmany; i < this.length - howmany; i++) {
      this.properties[i] = this.properties[i + howmany];
    }
    // Delete superfluous properties.
    for (var i = this.length - howmany; i < this.length; i++) {
      delete this.properties[i];
    }
    this.length -= howmany;
    // Insert specified items.
    for (var i = this.length - 1; i >= index; i--) {
      this.properties[i + arguments.length - 2] = this.properties[i];
    }
    this.length += arguments.length - 2;
    for (var i = 2; i < arguments.length; i++) {
      this.properties[index + i - 2] = arguments[i];
    }
    return removed;
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'splice', wrapper);

  wrapper = function wrapper(opt_begin, opt_end) {
    var list = thisInterpreter.createObject(thisInterpreter.ARRAY);
    var begin = getInt(opt_begin, 0);
    if (begin < 0) {
      begin = this.length + begin;
    }
    begin = Math.max(0, Math.min(begin, this.length));
    var end = getInt(opt_end, this.length);
    if (end < 0) {
      end = this.length + end;
    }
    end = Math.max(0, Math.min(end, this.length));
    var length = 0;
    for (var i = begin; i < end; i++) {
      var element = thisInterpreter.getProperty(this, i);
      thisInterpreter.setProperty(list, length++, element);
    }
    return list;
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'slice', wrapper);

  wrapper = function wrapper(opt_separator) {
    if (!opt_separator || opt_separator.data === undefined) {
      var sep = undefined;
    } else {
      var sep = opt_separator.toString();
    }
    var text = [];
    for (var i = 0; i < this.length; i++) {
      text[i] = this.properties[i];
    }
    return thisInterpreter.createPrimitive(text.join(sep));
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'join', wrapper);

  wrapper = function wrapper(var_args) {
    var list = thisInterpreter.createObject(thisInterpreter.ARRAY);
    var length = 0;
    // Start by copying the current array.
    for (var i = 0; i < this.length; i++) {
      var element = thisInterpreter.getProperty(this, i);
      thisInterpreter.setProperty(list, length++, element);
    }
    // Loop through all arguments and copy them in.
    for (var i = 0; i < arguments.length; i++) {
      var value = arguments[i];
      if (thisInterpreter.isa(value, thisInterpreter.ARRAY)) {
        for (var j = 0; j < value.length; j++) {
          var element = thisInterpreter.getProperty(value, j);
          thisInterpreter.setProperty(list, length++, element);
        }
      } else {
        thisInterpreter.setProperty(list, length++, value);
      }
    }
    return list;
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'concat', wrapper);

  wrapper = function wrapper(searchElement, opt_fromIndex) {
    searchElement = searchElement || thisInterpreter.UNDEFINED;
    var fromIndex = getInt(opt_fromIndex, 0);
    if (fromIndex < 0) {
      fromIndex = this.length + fromIndex;
    }
    fromIndex = Math.max(0, fromIndex);
    for (var i = fromIndex; i < this.length; i++) {
      var element = thisInterpreter.getProperty(this, i);
      if (strictComp(element, searchElement)) {
        return thisInterpreter.createPrimitive(i);
      }
    }
    return thisInterpreter.createPrimitive(-1);
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'indexOf', wrapper);

  wrapper = function wrapper(searchElement, opt_fromIndex) {
    searchElement = searchElement || thisInterpreter.UNDEFINED;
    var fromIndex = getInt(opt_fromIndex, this.length);
    if (fromIndex < 0) {
      fromIndex = this.length + fromIndex;
    }
    fromIndex = Math.min(fromIndex, this.length - 1);
    for (var i = fromIndex; i >= 0; i--) {
      var element = thisInterpreter.getProperty(this, i);
      if (strictComp(element, searchElement)) {
        return thisInterpreter.createPrimitive(i);
      }
    }
    return thisInterpreter.createPrimitive(-1);
  };
  this.setNativeFunctionPrototype(this.ARRAY, 'lastIndexOf', wrapper);

  this.polyfills_.push(
  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/every
  "Object.defineProperty(Array.prototype, 'every', {configurable: true, value:", "function(callbackfn, thisArg) {", "if (this == null || typeof callbackfn !== 'function') throw new TypeError;", "var T, k;", "var O = Object(this);", "var len = O.length >>> 0;", "if (arguments.length > 1) T = thisArg;", "k = 0;", "while (k < len) {", "if (k in O && !callbackfn.call(T, O[k], k, O)) return false;", "k++;", "}", "return true;", "}", "});",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
  "Object.defineProperty(Array.prototype, 'filter', {configurable: true, value:", "function(fun/*, thisArg*/) {", "if (this === void 0 || this === null || typeof fun !== 'function') throw new TypeError;", "var t = Object(this);", "var len = t.length >>> 0;", "var res = [];", "var thisArg = arguments.length >= 2 ? arguments[1] : void 0;", "for (var i = 0; i < len; i++) {", "if (i in t) {", "var val = t[i];", "if (fun.call(thisArg, val, i, t)) res.push(val);", "}", "}", "return res;", "}", "});",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
  "Object.defineProperty(Array.prototype, 'forEach', {configurable: true, value:", "function(callback, thisArg) {", "if (this == null || typeof callback !== 'function') throw new TypeError;", "var T, k;", "var O = Object(this);", "var len = O.length >>> 0;", "if (arguments.length > 1) T = thisArg;", "k = 0;", "while (k < len) {", "if (k in O) callback.call(T, O[k], k, O);", "k++;", "}", "}", "});",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/map
  "Object.defineProperty(Array.prototype, 'map', {configurable: true, value:", "function(callback, thisArg) {", "if (this == null || typeof callback !== 'function') new TypeError;", "var T, A, k;", "var O = Object(this);", "var len = O.length >>> 0;", "if (arguments.length > 1) T = thisArg;", "A = new Array(len);", "k = 0;", "while (k < len) {", "if (k in O) A[k] = callback.call(T, O[k], k, O);", "k++;", "}", "return A;", "}", "});",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
  "Object.defineProperty(Array.prototype, 'reduce', {configurable: true, value:", "function(callback /*, initialValue*/) {", "if (this == null || typeof callback !== 'function') throw new TypeError;", "var t = Object(this), len = t.length >>> 0, k = 0, value;", "if (arguments.length == 2) {", "value = arguments[1];", "} else {", "while (k < len && !(k in t)) k++;", "if (k >= len) {", "throw new TypeError('Reduce of empty array with no initial value');", "}", "value = t[k++];", "}", "for (; k < len; k++) {", "if (k in t) value = callback(value, t[k], k, t);", "}", "return value;", "}", "});",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight
  "Object.defineProperty(Array.prototype, 'reduceRight', {configurable: true, value:", "function(callback /*, initialValue*/) {", "if (null === this || 'undefined' === typeof this || 'function' !== typeof callback) throw new TypeError;", "var t = Object(this), len = t.length >>> 0, k = len - 1, value;", "if (arguments.length >= 2) {", "value = arguments[1];", "} else {", "while (k >= 0 && !(k in t)) k--;", "if (k < 0) {", "throw new TypeError('Reduce of empty array with no initial value');", "}", "value = t[k--];", "}", "for (; k >= 0; k--) {", "if (k in t) value = callback(value, t[k], k, t);", "}", "return value;", "}", "});",

  // Polyfill copied from:
  // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/some
  "Object.defineProperty(Array.prototype, 'some', {configurable: true, value:", "function(fun/*, thisArg*/) {", "if (this == null || typeof fun !== 'function') throw new TypeError;", "var t = Object(this);", "var len = t.length >>> 0;", "var thisArg = arguments.length >= 2 ? arguments[1] : void 0;", "for (var i = 0; i < len; i++) {", "if (i in t && fun.call(thisArg, t[i], i, t)) {", "return true;", "}", "}", "return false;", "}", "});", "Object.defineProperty(Array.prototype, 'sort', {configurable: true, value:", "function(opt_comp) {", "for (var i = 0; i < this.length; i++) {", "var changes = 0;", "for (var j = 0; j < this.length - i - 1; j++) {", "if (opt_comp ?" + "opt_comp(this[j], this[j + 1]) > 0 : this[j] > this[j + 1]) {", "var swap = this[j];", "this[j] = this[j + 1];", "this[j + 1] = swap;", "changes++;", "}", "}", "if (changes <= 1) break;", "}", "return this;", "}", "});", "Object.defineProperty(Array.prototype, 'toLocaleString', {configurable: true, value:", "function() {", "var out = [];", "for (var i = 0; i < this.length; i++) {", "out[i] = (this[i] === null || this[i] === undefined) ? '' : this[i].toLocaleString();", "}", "return out.join(',');", "}", "});", "");
};

/**
 * Initialize the Number class.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initNumber = function (scope) {
  var thisInterpreter = this;
  var wrapper;
  // Number constructor.
  wrapper = function wrapper(value) {
    value = value ? value.toNumber() : 0;
    if (this.parent != thisInterpreter.NUMBER) {
      // Called as Number().
      return thisInterpreter.createPrimitive(value);
    }
    // Called as new Number().
    this.data = value;
    return this;
  };
  this.NUMBER = this.createNativeFunction(wrapper);
  this.setProperty(scope, 'Number', this.NUMBER);

  var numConsts = ['MAX_VALUE', 'MIN_VALUE', 'NaN', 'NEGATIVE_INFINITY', 'POSITIVE_INFINITY'];
  for (var i = 0; i < numConsts.length; i++) {
    this.setProperty(this.NUMBER, numConsts[i], this.createPrimitive(Number[numConsts[i]]));
  }

  // Static methods on Number.
  wrapper = function wrapper(str) {
    str = str || thisInterpreter.UNDEFINED;
    return thisInterpreter.createPrimitive(parseFloat(str.toString()));
  };
  this.setProperty(this.NUMBER, 'parseFloat', this.createNativeFunction(wrapper));

  wrapper = function wrapper(str, radix) {
    str = str || thisInterpreter.UNDEFINED;
    radix = radix || thisInterpreter.UNDEFINED;
    return thisInterpreter.createPrimitive(parseInt(str.toString(), radix.toNumber()));
  };
  this.setProperty(this.NUMBER, 'parseInt', this.createNativeFunction(wrapper));

  // Instance methods on Number.
  wrapper = function wrapper(fractionDigits) {
    fractionDigits = fractionDigits ? fractionDigits.toNumber() : undefined;
    var n = this.toNumber();
    return thisInterpreter.createPrimitive(n.toExponential(fractionDigits));
  };
  this.setNativeFunctionPrototype(this.NUMBER, 'toExponential', wrapper);

  wrapper = function wrapper(digits) {
    digits = digits ? digits.toNumber() : undefined;
    var n = this.toNumber();
    return thisInterpreter.createPrimitive(n.toFixed(digits));
  };
  this.setNativeFunctionPrototype(this.NUMBER, 'toFixed', wrapper);

  wrapper = function wrapper(precision) {
    precision = precision ? precision.toNumber() : undefined;
    var n = this.toNumber();
    return thisInterpreter.createPrimitive(n.toPrecision(precision));
  };
  this.setNativeFunctionPrototype(this.NUMBER, 'toPrecision', wrapper);

  wrapper = function wrapper(radix) {
    radix = radix ? radix.toNumber() : 10;
    var n = this.toNumber();
    return thisInterpreter.createPrimitive(n.toString(radix));
  };
  this.setNativeFunctionPrototype(this.NUMBER, 'toString', wrapper);

  wrapper = function wrapper(locales, options) {
    locales = locales ? thisInterpreter.pseudoToNative(locales) : undefined;
    options = options ? thisInterpreter.pseudoToNative(options) : undefined;
    return thisInterpreter.createPrimitive(this.toNumber().toLocaleString(locales, options));
  };
  this.setNativeFunctionPrototype(this.NUMBER, 'toLocaleString', wrapper);
};

/**
 * Initialize the String class.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initString = function (scope) {
  var thisInterpreter = this;
  var wrapper;
  // String constructor.
  wrapper = function wrapper(value) {
    value = value ? value.toString() : '';
    if (this.parent != thisInterpreter.STRING) {
      // Called as String().
      return thisInterpreter.createPrimitive(value);
    }
    // Called as new String().
    this.data = value;
    return this;
  };
  this.STRING = this.createNativeFunction(wrapper);
  this.setProperty(scope, 'String', this.STRING);

  // Static methods on String.
  wrapper = function wrapper(var_args) {
    for (var i = 0; i < arguments.length; i++) {
      arguments[i] = arguments[i].toNumber();
    }
    return thisInterpreter.createPrimitive(String.fromCharCode.apply(String, arguments));
  };
  this.setProperty(this.STRING, 'fromCharCode', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  // Instance methods on String.
  // Methods with no arguments.
  var functions = ['toLowerCase', 'toUpperCase', 'toLocaleLowerCase', 'toLocaleUpperCase'];
  for (var i = 0; i < functions.length; i++) {
    wrapper = function (nativeFunc) {
      return function () {
        return thisInterpreter.createPrimitive(nativeFunc.apply(this));
      };
    }(String.prototype[functions[i]]);
    this.setNativeFunctionPrototype(this.STRING, functions[i], wrapper);
  }

  // Trim function may not exist in host browser.  Write them from scratch.
  wrapper = function wrapper() {
    var str = this.toString();
    return thisInterpreter.createPrimitive(str.replace(/^\s+|\s+$/g, ''));
  };
  this.setNativeFunctionPrototype(this.STRING, 'trim', wrapper);
  wrapper = function wrapper() {
    var str = this.toString();
    return thisInterpreter.createPrimitive(str.replace(/^\s+/g, ''));
  };
  this.setNativeFunctionPrototype(this.STRING, 'trimLeft', wrapper);
  wrapper = function wrapper() {
    var str = this.toString();
    return thisInterpreter.createPrimitive(str.replace(/\s+$/g, ''));
  };
  this.setNativeFunctionPrototype(this.STRING, 'trimRight', wrapper);

  // Methods with only numeric arguments.
  functions = ['charAt', 'charCodeAt', 'substring', 'slice', 'substr'];
  for (var i = 0; i < functions.length; i++) {
    wrapper = function (nativeFunc) {
      return function () {
        for (var j = 0; j < arguments.length; j++) {
          arguments[j] = arguments[j].toNumber();
        }
        return thisInterpreter.createPrimitive(nativeFunc.apply(this, arguments));
      };
    }(String.prototype[functions[i]]);
    this.setNativeFunctionPrototype(this.STRING, functions[i], wrapper);
  }

  wrapper = function wrapper(searchValue, fromIndex) {
    var str = this.toString();
    searchValue = (searchValue || thisInterpreter.UNDEFINED).toString();
    fromIndex = fromIndex ? fromIndex.toNumber() : undefined;
    return thisInterpreter.createPrimitive(str.indexOf(searchValue, fromIndex));
  };
  this.setNativeFunctionPrototype(this.STRING, 'indexOf', wrapper);

  wrapper = function wrapper(searchValue, fromIndex) {
    var str = this.toString();
    searchValue = (searchValue || thisInterpreter.UNDEFINED).toString();
    fromIndex = fromIndex ? fromIndex.toNumber() : undefined;
    return thisInterpreter.createPrimitive(str.lastIndexOf(searchValue, fromIndex));
  };
  this.setNativeFunctionPrototype(this.STRING, 'lastIndexOf', wrapper);

  wrapper = function wrapper(compareString, locales, options) {
    compareString = (compareString || thisInterpreter.UNDEFINED).toString();
    locales = locales ? thisInterpreter.pseudoToNative(locales) : undefined;
    options = options ? thisInterpreter.pseudoToNative(options) : undefined;
    return thisInterpreter.createPrimitive(this.toString().localeCompare(compareString, locales, options));
  };
  this.setNativeFunctionPrototype(this.STRING, 'localeCompare', wrapper);

  wrapper = function wrapper(separator, limit) {
    var str = this.toString();
    if (separator) {
      separator = thisInterpreter.isa(separator, thisInterpreter.REGEXP) ? separator.data : separator.toString();
    } else {
      // is this really necessary?
      separator = undefined;
    }
    limit = limit ? limit.toNumber() : undefined;
    var jsList = str.split(separator, limit);
    var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
    for (var i = 0; i < jsList.length; i++) {
      thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(jsList[i]));
    }
    return pseudoList;
  };
  this.setNativeFunctionPrototype(this.STRING, 'split', wrapper);

  wrapper = function wrapper(var_args) {
    var str = this.toString();
    for (var i = 0; i < arguments.length; i++) {
      str += arguments[i].toString();
    }
    return thisInterpreter.createPrimitive(str);
  };
  this.setNativeFunctionPrototype(this.STRING, 'concat', wrapper);

  wrapper = function wrapper(regexp) {
    var str = this.toString();
    regexp = regexp ? regexp.data : undefined;
    var match = str.match(regexp);
    if (match === null) {
      return thisInterpreter.NULL;
    }
    var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);
    for (var i = 0; i < match.length; i++) {
      thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(match[i]));
    }
    return pseudoList;
  };
  this.setNativeFunctionPrototype(this.STRING, 'match', wrapper);

  wrapper = function wrapper(regexp) {
    var str = this.toString();
    regexp = regexp ? regexp.data : undefined;
    return thisInterpreter.createPrimitive(str.search(regexp));
  };
  this.setNativeFunctionPrototype(this.STRING, 'search', wrapper);

  wrapper = function wrapper(substr, newSubStr) {
    var str = this.toString();
    substr = (substr || thisInterpreter.UNDEFINED).valueOf();
    newSubStr = (newSubStr || thisInterpreter.UNDEFINED).toString();
    return thisInterpreter.createPrimitive(str.replace(substr, newSubStr));
  };
  this.setNativeFunctionPrototype(this.STRING, 'replace', wrapper);
};

/**
 * Initialize the Boolean class.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initBoolean = function (scope) {
  var thisInterpreter = this;
  var wrapper;
  // Boolean constructor.
  wrapper = function wrapper(value) {
    value = value ? value.toBoolean() : false;
    if (this.parent != thisInterpreter.BOOLEAN) {
      // Called as Boolean().
      return thisInterpreter.createPrimitive(value);
    }
    // Called as new Boolean().
    this.data = value;
    return this;
  };
  this.BOOLEAN = this.createNativeFunction(wrapper);
  this.setProperty(scope, 'Boolean', this.BOOLEAN);
};

/**
 * Initialize the Date class.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initDate = function (scope) {
  var thisInterpreter = this;
  var wrapper;
  // Date constructor.
  wrapper = function wrapper(a, b, c, d, e, f, h) {
    if (this.parent == thisInterpreter.DATE) {
      // Called with new.
      var newDate = this;
    } else {
      // Calling Date() as a function returns a string, no arguments are heeded.
      return thisInterpreter.createPrimitive(Date());
    }
    if (!arguments.length) {
      newDate.data = new Date();
    } else if (arguments.length == 1 && (a.type == 'string' || thisInterpreter.isa(a, thisInterpreter.STRING))) {
      newDate.data = new Date(a.toString());
    } else {
      var args = [null];
      for (var i = 0; i < arguments.length; i++) {
        args[i + 1] = arguments[i] ? arguments[i].toNumber() : undefined;
      }
      newDate.data = new (Function.prototype.bind.apply(Date, args))();
    }
    return newDate;
  };
  this.DATE = this.createNativeFunction(wrapper);
  this.setProperty(scope, 'Date', this.DATE);

  // Static methods on Date.
  wrapper = function wrapper() {
    return thisInterpreter.createPrimitive(new Date().getTime());
  };
  this.setProperty(this.DATE, 'now', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  wrapper = function wrapper(dateString) {
    dateString = dateString ? dateString.toString() : undefined;
    return thisInterpreter.createPrimitive(Date.parse(dateString));
  };
  this.setProperty(this.DATE, 'parse', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  wrapper = function wrapper(a, b, c, d, e, f, h) {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args[i] = arguments[i] ? arguments[i].toNumber() : undefined;
    }
    return thisInterpreter.createPrimitive(Date.UTC.apply(Date, args));
  };
  this.setProperty(this.DATE, 'UTC', this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);

  // Instance methods on Date.
  var functions = ['getDate', 'getDay', 'getFullYear', 'getHours', 'getMilliseconds', 'getMinutes', 'getMonth', 'getSeconds', 'getTime', 'getTimezoneOffset', 'getUTCDate', 'getUTCDay', 'getUTCFullYear', 'getUTCHours', 'getUTCMilliseconds', 'getUTCMinutes', 'getUTCMonth', 'getUTCSeconds', 'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds', 'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear', 'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds', 'setYear', 'toDateString', 'toISOString', 'toJSON', 'toGMTString', 'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString', 'toTimeString', 'toUTCString'];
  for (var i = 0; i < functions.length; i++) {
    wrapper = function (nativeFunc) {
      return function (var_args) {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args[i] = thisInterpreter.pseudoToNative(arguments[i]);
        }
        return thisInterpreter.createPrimitive(this.data[nativeFunc].apply(this.data, args));
      };
    }(functions[i]);
    this.setNativeFunctionPrototype(this.DATE, functions[i], wrapper);
  }
};

/**
 * Initialize Math object.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initMath = function (scope) {
  var thisInterpreter = this;
  var myMath = this.createObject(this.OBJECT);
  this.setProperty(scope, 'Math', myMath);
  var mathConsts = ['E', 'LN2', 'LN10', 'LOG2E', 'LOG10E', 'PI', 'SQRT1_2', 'SQRT2'];
  for (var i = 0; i < mathConsts.length; i++) {
    this.setProperty(myMath, mathConsts[i], this.createPrimitive(Math[mathConsts[i]]), Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);
  }
  var numFunctions = ['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'exp', 'floor', 'log', 'max', 'min', 'pow', 'random', 'round', 'sin', 'sqrt', 'tan'];
  for (var i = 0; i < numFunctions.length; i++) {
    var wrapper = function (nativeFunc) {
      return function () {
        for (var j = 0; j < arguments.length; j++) {
          arguments[j] = arguments[j].toNumber();
        }
        return thisInterpreter.createPrimitive(nativeFunc.apply(Math, arguments));
      };
    }(Math[numFunctions[i]]);
    this.setProperty(myMath, numFunctions[i], this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);
  }
};

/**
 * Initialize Regular Expression object.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initRegExp = function (scope) {
  var thisInterpreter = this;
  var wrapper;
  // Regex constructor.
  wrapper = function wrapper(pattern, flags) {
    if (this.parent == thisInterpreter.REGEXP) {
      // Called with new.
      var rgx = this;
    } else {
      var rgx = thisInterpreter.createObject(thisInterpreter.REGEXP);
    }
    pattern = pattern ? pattern.toString() : '';
    flags = flags ? flags.toString() : '';
    return thisInterpreter.populateRegExp_(rgx, new RegExp(pattern, flags));
  };
  this.REGEXP = this.createNativeFunction(wrapper);
  this.setProperty(scope, 'RegExp', this.REGEXP);

  this.setProperty(this.REGEXP.properties.prototype, 'global', this.UNDEFINED, Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);
  this.setProperty(this.REGEXP.properties.prototype, 'ignoreCase', this.UNDEFINED, Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);
  this.setProperty(this.REGEXP.properties.prototype, 'multiline', this.UNDEFINED, Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);
  this.setProperty(this.REGEXP.properties.prototype, 'source', this.createPrimitive('(?:)'), Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);

  wrapper = function wrapper(str) {
    str = str.toString();
    return thisInterpreter.createPrimitive(this.data.test(str));
  };
  this.setNativeFunctionPrototype(this.REGEXP, 'test', wrapper);

  wrapper = function wrapper(str) {
    str = str.toString();
    // Get lastIndex from wrapped regex, since this is settable.
    this.data.lastIndex = thisInterpreter.getProperty(this, 'lastIndex').toNumber();
    var match = this.data.exec(str);
    thisInterpreter.setProperty(this, 'lastIndex', thisInterpreter.createPrimitive(this.data.lastIndex));

    if (match) {
      var result = thisInterpreter.createObject(thisInterpreter.ARRAY);
      for (var i = 0; i < match.length; i++) {
        thisInterpreter.setProperty(result, i, thisInterpreter.createPrimitive(match[i]));
      }
      // match has additional properties.
      thisInterpreter.setProperty(result, 'index', thisInterpreter.createPrimitive(match.index));
      thisInterpreter.setProperty(result, 'input', thisInterpreter.createPrimitive(match.input));
      return result;
    }
    return thisInterpreter.NULL;
  };
  this.setNativeFunctionPrototype(this.REGEXP, 'exec', wrapper);
};

/**
 * Initialize JSON object.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initJSON = function (scope) {
  var thisInterpreter = this;
  var myJSON = thisInterpreter.createObject(this.OBJECT);
  this.setProperty(scope, 'JSON', myJSON);

  var wrapper = function wrapper(text) {
    try {
      var nativeObj = JSON.parse(text.toString());
    } catch (e) {
      thisInterpreter.throwException(thisInterpreter.SYNTAX_ERROR, e.message);
      return;
    }
    return thisInterpreter.nativeToPseudo(nativeObj);
  };
  this.setProperty(myJSON, 'parse', this.createNativeFunction(wrapper));

  wrapper = function wrapper(value) {
    var nativeObj = thisInterpreter.pseudoToNative(value);
    return thisInterpreter.createPrimitive(JSON.stringify(nativeObj));
  };
  this.setProperty(myJSON, 'stringify', this.createNativeFunction(wrapper));
};

/**
 * Initialize the Error class.
 * @param {!Interpreter.Object} scope Global scope.
 */
Interpreter.prototype.initError = function (scope) {
  var thisInterpreter = this;
  // Error constructor.
  this.ERROR = this.createNativeFunction(function (opt_message) {
    if (this.parent == thisInterpreter.ERROR) {
      // Called with new.
      var newError = this;
    } else {
      var newError = thisInterpreter.createObject(thisInterpreter.ERROR);
    }
    if (opt_message) {
      thisInterpreter.setProperty(newError, 'message', thisInterpreter.createPrimitive(String(opt_message)), Interpreter.NONENUMERABLE_DESCRIPTOR);
    }
    return newError;
  });
  this.setProperty(scope, 'Error', this.ERROR);
  this.setProperty(this.ERROR.properties.prototype, 'message', this.STRING_EMPTY, Interpreter.NONENUMERABLE_DESCRIPTOR);
  this.setProperty(this.ERROR.properties.prototype, 'name', this.createPrimitive('Error'), Interpreter.NONENUMERABLE_DESCRIPTOR);

  var createErrorSubclass = function createErrorSubclass(name) {
    var constructor = thisInterpreter.createNativeFunction(function (opt_message) {
      if (thisInterpreter.isa(this.parent, thisInterpreter.ERROR)) {
        // Called with new.
        var newError = this;
      } else {
        var newError = thisInterpreter.createObject(constructor);
      }
      if (opt_message) {
        thisInterpreter.setProperty(newError, 'message', thisInterpreter.createPrimitive(String(opt_message)), Interpreter.NONENUMERABLE_DESCRIPTOR);
      }
      return newError;
    });
    thisInterpreter.setProperty(constructor, 'prototype', thisInterpreter.createObject(thisInterpreter.ERROR));
    thisInterpreter.setProperty(constructor.properties.prototype, 'name', thisInterpreter.createPrimitive(name), Interpreter.NONENUMERABLE_DESCRIPTOR);
    thisInterpreter.setProperty(scope, name, constructor);

    return constructor;
  };

  this.EVAL_ERROR = createErrorSubclass('EvalError');
  this.RANGE_ERROR = createErrorSubclass('RangeError');
  this.REFERENCE_ERROR = createErrorSubclass('ReferenceError');
  this.SYNTAX_ERROR = createErrorSubclass('SyntaxError');
  this.TYPE_ERROR = createErrorSubclass('TypeError');
  this.URI_ERROR = createErrorSubclass('URIError');
};

/**
 * Is an object of a certain class?
 * @param {Object} child Object to check.
 * @param {Object} parent Constructor of object.
 * @return {boolean} True if object is the class or inherits from it.
 *     False otherwise.
 */
Interpreter.prototype.isa = function (child, parent) {
  if (!child || !parent) {
    return false;
  }
  while (child.parent != parent) {
    if (!child.parent || !child.parent.properties.prototype) {
      return false;
    }
    child = child.parent.properties.prototype;
  }
  return true;
};

/**
 * Compares two objects against each other.
 * @param {!Object} a First object.
 * @param {!Object} b Second object.
 * @return {number} -1 if a is smaller, 0 if a == b, 1 if a is bigger,
 *     NaN if they are not comparable.
 */
Interpreter.prototype.comp = function (a, b) {
  if (a.isPrimitive && typeof a.data == 'number' && isNaN(a.data) || b.isPrimitive && typeof b.data == 'number' && isNaN(b.data)) {
    // NaN is not comparable to anything, including itself.
    return NaN;
  }
  if (a === b) {
    return 0;
  }
  var aValue = a.isPrimitive ? a.data : a.toString();
  var bValue = b.isPrimitive ? b.data : b.toString();
  if (aValue < bValue) {
    return -1;
  } else if (aValue > bValue) {
    return 1;
  } else if (!a.isPrimitive && !b.isPrimitive) {
    // Two objects that have equal values are still not equal.
    // e.g. [1, 2] != [1, 2]
    return NaN;
  } else if (aValue == bValue) {
    return 0;
  }
  return NaN;
};

/**
 * Is a value a legal integer for an array?
 * @param {*} n Value to check.
 * @return {number} Zero, or a positive integer if the value can be
 *     converted to such.  NaN otherwise.
 */
Interpreter.prototype.arrayIndex = function (n) {
  n = Number(n);
  if (!isFinite(n) || n != Math.floor(n) || n < 0) {
    return NaN;
  }
  return n;
};

/**
 * Class for a number, string, boolean, null, or undefined.
 * @param {number|string|boolean|null|undefined} data Primitive value.
 * @param {!Interpreter} interpreter The JS Interpreter to bind to.
 * @constructor
 */
Interpreter.Primitive = function (data, interpreter) {
  var type = typeof data === 'undefined' ? 'undefined' : _typeof(data);
  this.data = data;
  this.type = type;
  if (type == 'number') {
    this.parent = interpreter.NUMBER;
  } else if (type == 'string') {
    this.parent = interpreter.STRING;
  } else if (type == 'boolean') {
    this.parent = interpreter.BOOLEAN;
  }
};

/**
 * @type {number|string|boolean|null|undefined}
 */
Interpreter.Primitive.prototype.data = undefined;

/**
 * @type {string}
 */
Interpreter.Primitive.prototype.type = 'undefined';

/**
 * @type {Function}
 */
Interpreter.Primitive.prototype.parent = null;

/**
 * @type {boolean}
 */
Interpreter.Primitive.prototype.isPrimitive = true;

/**
 * Convert this primitive into a boolean.
 * @return {boolean} Boolean value.
 */
Interpreter.Primitive.prototype.toBoolean = function () {
  return Boolean(this.data);
};

/**
 * Convert this primitive into a number.
 * @return {number} Number value.
 */
Interpreter.Primitive.prototype.toNumber = function () {
  return Number(this.data);
};

/**
 * Convert this primitive into a string.
 * @return {string} String value.
 * @override
 */
Interpreter.Primitive.prototype.toString = function () {
  return String(this.data);
};

/**
 * Return the primitive value.
 * @return {number|string|boolean|null|undefined} Primitive value.
 * @override
 */
Interpreter.Primitive.prototype.valueOf = function () {
  return this.data;
};

/**
 * Create a new data object for a primitive.
 * @param {number|string|boolean|null|undefined|RegExp} data Data to
 *     encapsulate.
 * @return {!Interpreter.Primitive|!Interpreter.Object} New data object.
 */
Interpreter.prototype.createPrimitive = function (data) {
  // Reuse a predefined primitive constant if possible.
  if (data === undefined) {
    return this.UNDEFINED;
  } else if (data === null) {
    return this.NULL;
  } else if (data === true) {
    return this.TRUE;
  } else if (data === false) {
    return this.FALSE;
  } else if (data === 0) {
    return this.NUMBER_ZERO;
  } else if (data === 1) {
    return this.NUMBER_ONE;
  } else if (data === '') {
    return this.STRING_EMPTY;
  } else if (data instanceof RegExp) {
    return this.populateRegExp_(this.createObject(this.REGEXP), data);
  }
  return new Interpreter.Primitive(data, this);
};

/**
 * Class for an object.
 * @param {Interpreter.Object} parent Parent constructor function.
 * @constructor
 */
Interpreter.Object = function (parent) {
  this.notConfigurable = Object.create(null);
  this.notEnumerable = Object.create(null);
  this.notWritable = Object.create(null);
  this.getter = Object.create(null);
  this.setter = Object.create(null);
  this.properties = Object.create(null);
  this.parent = parent;
};

/**
 * @type {string}
 */
Interpreter.Object.prototype.type = 'object';

/**
 * @type {Interpreter.Object}
 */
Interpreter.Object.prototype.parent = null;

/**
 * @type {boolean}
 */
Interpreter.Object.prototype.isPrimitive = false;

/**
 * @type {number|string|boolean|undefined|!RegExp}
 */
Interpreter.Object.prototype.data = undefined;

/**
 * Convert this object into a boolean.
 * @return {boolean} Boolean value.
 */
Interpreter.Object.prototype.toBoolean = function () {
  return true;
};

/**
 * Convert this object into a number.
 * @return {number} Number value.
 */
Interpreter.Object.prototype.toNumber = function () {
  return Number(this.data === undefined ? this.toString() : this.data);
};

/**
 * Convert this object into a string.
 * @return {string} String value.
 * @override
 */
Interpreter.Object.prototype.toString = function () {
  return this.data === undefined ? '[' + this.type + ']' : String(this.data);
};

/**
 * Return the object value.
 * @return {*} Value.
 * @override
 */
Interpreter.Object.prototype.valueOf = function () {
  return this.data === undefined ? this : this.data;
};

/**
 * Create a new data object.
 * @param {Interpreter.Object} parent Parent constructor function.
 * @return {!Interpreter.Object} New data object.
 */
Interpreter.prototype.createObject = function (parent) {
  var obj = new Interpreter.Object(parent);
  // Functions have prototype objects.
  if (this.isa(obj, this.FUNCTION)) {
    obj.type = 'function';
    this.setProperty(obj, 'prototype', this.createObject(this.OBJECT || null));
  }
  // Arrays have length.
  if (this.isa(obj, this.ARRAY)) {
    obj.length = 0;
    obj.toString = function () {
      var strs = [];
      for (var i = 0; i < this.length; i++) {
        var value = this.properties[i];
        strs[i] = !value || value.isPrimitive && (value.data === null || value.data === undefined) ? '' : value.toString();
      }
      return strs.join(',');
    };
  }
  // Errors have a custom toString method.
  if (this.isa(obj, this.ERROR)) {
    var thisInterpreter = this;
    obj.toString = function () {
      var name = thisInterpreter.getProperty(this, 'name').toString();
      var message = thisInterpreter.getProperty(this, 'message').toString();
      return message ? name + ': ' + message : name;
    };
  }
  return obj;
};

/**
 * Initialize a pseudo regular expression object based on a native regular
 * expression object.
 * @param {!Interpreter.Object} pseudoRegexp The existing object to set.
 * @param {!RegExp} nativeRegexp The native regular expression.
 * @return {!Interpreter.Object} Newly populated regular expression object.
 * @private
 */
Interpreter.prototype.populateRegExp_ = function (pseudoRegexp, nativeRegexp) {
  pseudoRegexp.data = nativeRegexp;
  // lastIndex is settable, all others are read-only attributes
  this.setProperty(pseudoRegexp, 'lastIndex', this.createPrimitive(nativeRegexp.lastIndex), Interpreter.NONENUMERABLE_DESCRIPTOR);
  this.setProperty(pseudoRegexp, 'source', this.createPrimitive(nativeRegexp.source), Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);
  this.setProperty(pseudoRegexp, 'global', this.createPrimitive(nativeRegexp.global), Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);
  this.setProperty(pseudoRegexp, 'ignoreCase', this.createPrimitive(nativeRegexp.ignoreCase), Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);
  this.setProperty(pseudoRegexp, 'multiline', this.createPrimitive(nativeRegexp.multiline), Interpreter.READONLY_NONENUMERABLE_DESCRIPTOR);
  // Override a couple of Object's conversion functions.
  pseudoRegexp.toString = function () {
    return String(this.data);
  };
  pseudoRegexp.valueOf = function () {
    return this.data;
  };
  return pseudoRegexp;
};

/**
 * Create a new function.
 * @param {!Object} node AST node defining the function.
 * @param {!Object} scope Parent scope.
 * @return {!Interpreter.Object} New function.
 */
Interpreter.prototype.createFunction = function (node, scope) {
  var func = this.createObject(this.FUNCTION);
  func.parentScope = scope;
  func.node = node;
  this.setProperty(func, 'length', this.createPrimitive(func.node.params.length), Interpreter.READONLY_DESCRIPTOR);
  return func;
};

/**
 * Create a new native function.
 * @param {!Function} nativeFunc JavaScript function.
 * @return {!Interpreter.Object} New function.
 */
Interpreter.prototype.createNativeFunction = function (nativeFunc) {
  var func = this.createObject(this.FUNCTION);
  func.nativeFunc = nativeFunc;
  this.setProperty(func, 'length', this.createPrimitive(nativeFunc.length), Interpreter.READONLY_DESCRIPTOR);
  return func;
};

/**
 * Create a new native asynchronous function.
 * @param {!Function} asyncFunc JavaScript function.
 * @return {!Interpreter.Object} New function.
 */
Interpreter.prototype.createAsyncFunction = function (asyncFunc) {
  var func = this.createObject(this.FUNCTION);
  func.asyncFunc = asyncFunc;
  this.setProperty(func, 'length', this.createPrimitive(asyncFunc.length), Interpreter.READONLY_DESCRIPTOR);
  return func;
};

/**
 * Converts from a native JS object or value to a JS interpreter object.
 * Can handle JSON-style values.
 * @param {*} nativeObj The native JS object to be converted.
 * @return {!Interpreter.Object|!Interpreter.Primitive} The equivalent
 *     JS interpreter object.
 */
Interpreter.prototype.nativeToPseudo = function (nativeObj) {
  if (typeof nativeObj == 'boolean' || typeof nativeObj == 'number' || typeof nativeObj == 'string' || nativeObj === null || nativeObj === undefined || nativeObj instanceof RegExp) {
    return this.createPrimitive(nativeObj);
  }

  if (nativeObj instanceof Function) {
    var interpreter = this;
    var wrapper = function wrapper() {
      return interpreter.nativeToPseudo(nativeObj.apply(interpreter, Array.prototype.slice.call(arguments).map(function (i) {
        return interpreter.pseudoToNative(i);
      })));
    };
    return this.createNativeFunction(wrapper);
  }

  var pseudoObj;
  if (nativeObj instanceof Array) {
    // Array.
    pseudoObj = this.createObject(this.ARRAY);
    for (var i = 0; i < nativeObj.length; i++) {
      this.setProperty(pseudoObj, i, this.nativeToPseudo(nativeObj[i]));
    }
  } else {
    // Object.
    pseudoObj = this.createObject(this.OBJECT);
    for (var key in nativeObj) {
      this.setProperty(pseudoObj, key, this.nativeToPseudo(nativeObj[key]));
    }
  }
  return pseudoObj;
};

/**
 * Converts from a JS interpreter object to native JS object.
 * Can handle JSON-style values.
 * @param {!Interpreter.Object|!Interpreter.Primitive} pseudoObj The JS
 *     interpreter object to be converted.
 * @return {*} The equivalent native JS object or value.
 */
Interpreter.prototype.pseudoToNative = function (pseudoObj) {
  if (pseudoObj.isPrimitive || this.isa(pseudoObj, this.NUMBER) || this.isa(pseudoObj, this.STRING) || this.isa(pseudoObj, this.BOOLEAN)) {
    return pseudoObj.data;
  }
  var nativeObj;
  if (this.isa(pseudoObj, this.ARRAY)) {
    // Array.
    nativeObj = [];
    for (var i = 0; i < pseudoObj.length; i++) {
      nativeObj[i] = this.pseudoToNative(pseudoObj.properties[i]);
    }
  } else {
    // Object.
    nativeObj = {};
    for (var key in pseudoObj.properties) {
      nativeObj[key] = this.pseudoToNative(pseudoObj.properties[key]);
    }
  }
  return nativeObj;
};

/**
 * Fetch a property value from a data object.
 * @param {!Interpreter.Object|!Interpreter.Primitive} obj Data object.
 * @param {*} name Name of property.
 * @return {!Interpreter.Object|!Interpreter.Primitive|null} Property value
 *     (may be UNDEFINED), or null if an error was thrown and will be caught.
 */
Interpreter.prototype.getProperty = function (obj, name) {
  name = name.toString();
  if (obj == this.UNDEFINED || obj == this.NULL) {
    this.throwException(this.TYPE_ERROR, "Cannot read property '" + name + "' of " + obj);
    return null;
  }
  // Special cases for magic length property.
  if (this.isa(obj, this.STRING)) {
    if (name == 'length') {
      return this.createPrimitive(obj.data.length);
    }
    var n = this.arrayIndex(name);
    if (!isNaN(n) && n < obj.data.length) {
      return this.createPrimitive(obj.data[n]);
    }
  } else if (this.isa(obj, this.ARRAY) && name == 'length') {
    return this.createPrimitive(obj.length);
  }
  while (true) {
    if (obj.properties && name in obj.properties) {
      var getter = obj.getter[name];
      if (getter) {
        // Flag this function as being a getter and thus needing immediate
        // execution (rather than being the value of the property).
        getter.isGetter = true;
        return getter;
      }
      return obj.properties[name];
    }
    if (obj.parent && obj.parent.properties && obj.parent.properties.prototype) {
      obj = obj.parent.properties.prototype;
    } else {
      // No parent, reached the top.
      break;
    }
  }
  return this.UNDEFINED;
};

/**
 * Does the named property exist on a data object.
 * @param {!Interpreter.Object|!Interpreter.Primitive} obj Data object.
 * @param {*} name Name of property.
 * @return {boolean} True if property exists.
 */
Interpreter.prototype.hasProperty = function (obj, name) {
  name = name.toString();
  if (obj.isPrimitive) {
    throw TypeError('Primitive data type has no properties');
  }
  if (name == 'length' && (this.isa(obj, this.STRING) || this.isa(obj, this.ARRAY))) {
    return true;
  }
  if (this.isa(obj, this.STRING)) {
    var n = this.arrayIndex(name);
    if (!isNaN(n) && n < obj.data.length) {
      return true;
    }
  }
  while (true) {
    if (obj.properties && name in obj.properties) {
      return true;
    }
    if (obj.parent && obj.parent.properties && obj.parent.properties.prototype) {
      obj = obj.parent.properties.prototype;
    } else {
      // No parent, reached the top.
      break;
    }
  }
  return false;
};

/**
 * Set a property value on a data object.
 * @param {!Interpreter.Object} obj Data object.
 * @param {*} name Name of property.
 * @param {Interpreter.Object|Interpreter.Primitive} value
 *     New property value or null if getter/setter is described.
 * @param {Object=} opt_descriptor Optional descriptor object.
 * @return {!Interpreter.Object|undefined} Returns a setter function if one
 *     needs to be called, otherwise undefined.
 */
Interpreter.prototype.setProperty = function (obj, name, value, opt_descriptor) {
  name = name.toString();
  if (opt_descriptor && obj.notConfigurable[name]) {
    this.throwException(this.TYPE_ERROR, 'Cannot redefine property: ' + name);
  }
  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) != 'object') {
    throw Error('Failure to wrap a value: ' + value);
  }
  if (obj == this.UNDEFINED || obj == this.NULL) {
    this.throwException(this.TYPE_ERROR, "Cannot set property '" + name + "' of " + obj);
  }
  if (opt_descriptor && (opt_descriptor.get || opt_descriptor.set) && (value || opt_descriptor.writable !== undefined)) {
    this.throwException(this.TYPE_ERROR, 'Invalid property descriptor. ' + 'Cannot both specify accessors and a value or writable attribute');
  }
  var strict = !this.stateStack || this.getScope().strict;
  if (obj.isPrimitive) {
    if (strict) {
      this.throwException(this.TYPE_ERROR, 'Can\'t create property \'' + name + '\' on \'' + obj.data + '\'');
    }
    return;
  }
  if (this.isa(obj, this.STRING)) {
    var n = this.arrayIndex(name);
    if (name == 'length' || !isNaN(n) && n < obj.data.length) {
      // Can't set length or letters on String objects.
      if (strict) {
        this.throwException(this.TYPE_ERROR, 'Cannot assign to read only ' + 'property \'' + name + '\' of String \'' + obj.data + '\'');
      }
      return;
    }
  }
  if (this.isa(obj, this.ARRAY)) {
    // Arrays have a magic length variable that is bound to the elements.
    var i;
    if (name == 'length') {
      // Delete elements if length is smaller.
      var newLength = this.arrayIndex(value.toNumber());
      if (isNaN(newLength)) {
        this.throwException(this.RANGE_ERROR, 'Invalid array length');
      }
      if (newLength < obj.length) {
        for (i in obj.properties) {
          i = this.arrayIndex(i);
          if (!isNaN(i) && newLength <= i) {
            delete obj.properties[i];
          }
        }
      }
      obj.length = newLength;
      return; // Don't set a real length property.
    } else if (!isNaN(i = this.arrayIndex(name))) {
      // Increase length if this index is larger.
      obj.length = Math.max(obj.length, i + 1);
    }
  }
  if (!obj.properties[name] && obj.preventExtensions) {
    if (strict) {
      this.throwException(this.TYPE_ERROR, 'Can\'t add property ' + name + ', object is not extensible');
    }
    return;
  }
  if (opt_descriptor) {
    // Define the property.
    obj.properties[name] = value;
    if (!opt_descriptor.configurable) {
      obj.notConfigurable[name] = true;
    }
    var getter = opt_descriptor.get;
    if (getter) {
      obj.getter[name] = getter;
    } else {
      delete obj.getter[name];
    }
    var setter = opt_descriptor.set;
    if (setter) {
      obj.setter[name] = setter;
    } else {
      delete obj.setter[name];
    }
    var enumerable = opt_descriptor.enumerable || false;
    if (enumerable) {
      delete obj.notEnumerable[name];
    } else {
      obj.notEnumerable[name] = true;
    }
    if (getter || setter) {
      delete obj.notWritable[name];
      obj.properties[name] = this.UNDEFINED;
    } else {
      var writable = opt_descriptor.writable || false;
      if (writable) {
        delete obj.notWritable[name];
      } else {
        obj.notWritable[name] = true;
      }
    }
  } else {
    // Set the property.
    // Determine if there is a setter anywhere in the parent chain.
    var parent = obj;
    while (true) {
      if (parent.setter && parent.setter[name]) {
        return parent.setter[name];
      }
      if (parent.parent && parent.parent.properties && parent.parent.properties.prototype) {
        parent = parent.parent.properties.prototype;
      } else {
        // No parent, reached the top.
        break;
      }
    }
    if (obj.getter && obj.getter[name]) {
      if (strict) {
        this.throwException(this.TYPE_ERROR, 'Cannot set property \'' + name + '\' of object \'' + obj + '\' which only has a getter');
      }
    } else {
      // No setter, simple assignment.
      if (!obj.notWritable[name]) {
        obj.properties[name] = value;
      } else if (strict) {
        this.throwException(this.TYPE_ERROR, 'Cannot assign to read only ' + 'property \'' + name + '\' of object \'' + obj + '\'');
      }
    }
  }
};

/**
 * Convenience method for adding a native function as a non-enumerable property
 * onto an object's prototype.
 * @param {!Interpreter.Object} obj Data object.
 * @param {*} name Name of property.
 * @param {!Function} wrapper Function object.
 */
Interpreter.prototype.setNativeFunctionPrototype = function (obj, name, wrapper) {
  this.setProperty(obj.properties.prototype, name, this.createNativeFunction(wrapper), Interpreter.NONENUMERABLE_DESCRIPTOR);
};

/**
 * Delete a property value on a data object.
 * @param {!Interpreter.Object} obj Data object.
 * @param {*} name Name of property.
 * @return {boolean} True if deleted, false if undeletable.
 */
Interpreter.prototype.deleteProperty = function (obj, name) {
  name = name.toString();
  if (obj.isPrimitive || obj.notWritable[name]) {
    return false;
  }
  if (name == 'length' && this.isa(obj, this.ARRAY)) {
    return false;
  }
  return delete obj.properties[name];
};

/**
 * Returns the current scope from the stateStack.
 * @return {!Interpreter.Object} Current scope dictionary.
 */
Interpreter.prototype.getScope = function () {
  for (var i = this.stateStack.length - 1; i >= 0; i--) {
    if (this.stateStack[i].scope) {
      return this.stateStack[i].scope;
    }
  }
  throw Error('No scope found.');
};

/**
 * Create a new scope dictionary.
 * @param {!Object} node AST node defining the scope container
 *     (e.g. a function).
 * @param {Interpreter.Object} parentScope Scope to link to.
 * @return {!Interpreter.Object} New scope.
 */
Interpreter.prototype.createScope = function (node, parentScope) {
  var scope = this.createObject(null);
  scope.parentScope = parentScope;
  if (!parentScope) {
    this.initGlobalScope(scope);
  }
  this.populateScope_(node, scope);

  // Determine if this scope starts with 'use strict'.
  scope.strict = false;
  if (parentScope && parentScope.strict) {
    scope.strict = true;
  } else {
    var firstNode = node.body && node.body[0];
    if (firstNode && firstNode.expression && firstNode.expression.type == 'Literal' && firstNode.expression.value == 'use strict') {
      scope.strict = true;
    }
  }
  return scope;
};

/**
 * Create a new special scope dictionary. Similar to createScope(), but
 * doesn't assume that the scope is for a function body. This is used for
 * the catch clause and with statement.
 * @param {!Interpreter.Object} parentScope Scope to link to.
 * @param {Interpreter.Object=} opt_scope Optional object to transform into
 *     scope.
 * @return {!Interpreter.Object} New scope.
 */
Interpreter.prototype.createSpecialScope = function (parentScope, opt_scope) {
  if (!parentScope) {
    throw Error('parentScope required');
  }
  var scope = opt_scope || this.createObject(null);
  scope.parentScope = parentScope;
  scope.strict = parentScope.strict;
  return scope;
};

/**
 * Retrieves a value from the scope chain.
 * @param {!Interpreter.Object|!Interpreter.Primitive} name Name of variable.
 * @return {!Interpreter.Object|!Interpreter.Primitive|null} The value
 *     or null if an error was thrown and will be caught.
 */
Interpreter.prototype.getValueFromScope = function (name) {
  var scope = this.getScope();
  var nameStr = name.toString();
  while (scope && scope != this.global) {
    if (nameStr in scope.properties) {
      return scope.properties[nameStr];
    }
    scope = scope.parentScope;
  }
  // The root scope is also an object which has inherited properties and
  // could also have getters.
  if (scope == this.global && this.hasProperty(scope, nameStr)) {
    return this.getProperty(scope, nameStr);
  }
  // Typeof operator is unique: it can safely look at non-defined variables.
  var prevNode = this.stateStack[this.stateStack.length - 1].node;
  if (prevNode.type == 'UnaryExpression' && prevNode.operator == 'typeof') {
    return this.UNDEFINED;
  }
  this.throwException(this.REFERENCE_ERROR, nameStr + ' is not defined');
  return null;
};

/**
 * Sets a value to the current scope.
 * @param {!Interpreter.Object|!Interpreter.Primitive} name Name of variable.
 * @param {!Interpreter.Object|!Interpreter.Primitive} value Value.
 * @return {!Interpreter.Object|undefined} Returns a setter function if one
 *     needs to be called, otherwise undefined.
 */
Interpreter.prototype.setValueToScope = function (name, value) {
  var scope = this.getScope();
  var nameStr = name.toString();
  while (scope && scope != this.global) {
    if (nameStr in scope.properties) {
      scope.properties[nameStr] = value;
      return undefined;
    }
    scope = scope.parentScope;
  }
  // The root scope is also an object which has readonly properties and
  // could also have setters.
  if (scope == this.global && (!scope.strict || this.hasProperty(scope, nameStr))) {
    return this.setProperty(scope, nameStr, value);
  }
  this.throwException(this.REFERENCE_ERROR, nameStr + ' is not defined');
};

/**
 * Create a new scope for the given node.
 * @param {!Object} node AST node (program or function).
 * @param {!Interpreter.Object} scope Scope dictionary to populate.
 * @private
 */
Interpreter.prototype.populateScope_ = function (node, scope) {
  if (node.type == 'VariableDeclaration') {
    for (var i = 0; i < node.declarations.length; i++) {
      this.setProperty(scope, node.declarations[i].id.name, this.UNDEFINED);
    }
  } else if (node.type == 'FunctionDeclaration') {
    this.setProperty(scope, node.id.name, this.createFunction(node, scope));
    return; // Do not recurse into function.
  } else if (node.type == 'FunctionExpression') {
    return; // Do not recurse into function.
  } else if (node.type == 'ExpressionStatement') {
    return; // Expressions can't contain variable/function declarations.
  }
  var nodeClass = node.constructor;
  for (var name in node) {
    var prop = node[name];
    if (prop && (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) == 'object') {
      if (prop instanceof Array) {
        for (var i = 0; i < prop.length; i++) {
          if (prop[i] && prop[i].constructor == nodeClass) {
            this.populateScope_(prop[i], scope);
          }
        }
      } else {
        if (prop.constructor == nodeClass) {
          this.populateScope_(prop, scope);
        }
      }
    }
  }
};

/**
 * Remove start and end values from AST, or set start and end values to a
 * constant value.  Used to remove highlighting from polyfills and to set
 * highlighting in an eval to cover the entire eval expression.
 * @param {!Object} node AST node.
 * @param {number=} start Starting character of all nodes, or undefined.
 * @param {number=} end Ending character of all nodes, or undefined.
 * @private
 */
Interpreter.prototype.stripLocations_ = function (node, start, end) {
  if (start) {
    node.start = start;
  } else {
    delete node.start;
  }
  if (end) {
    node.end = end;
  } else {
    delete node.end;
  }
  for (var name in node) {
    if (node.hasOwnProperty(name)) {
      var prop = node[name];
      if (prop && (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) == 'object') {
        this.stripLocations_(prop, start, end);
      }
    }
  }
};

/**
 * Gets a value from the scope chain or from an object property.
 * @param {!Interpreter.Object|!Interpreter.Primitive|!Array} left
 *     Name of variable or object/propname tuple.
 * @return {!Interpreter.Object|!Interpreter.Primitive|null} Value
 *     or null if an error was thrown and will be caught.
 */
Interpreter.prototype.getValue = function (left) {
  if (left instanceof Array) {
    var obj = left[0];
    var prop = left[1];
    return this.getProperty(obj, prop);
  } else {
    return this.getValueFromScope(left);
  }
};

/**
 * Sets a value to the scope chain or to an object property.
 * @param {!Interpreter.Object|!Interpreter.Primitive|!Array} left
 *     Name of variable or object/propname tuple.
 * @param {!Interpreter.Object|!Interpreter.Primitive} value Value.
 * @return {!Interpreter.Object|undefined} Returns a setter function if one
 *     needs to be called, otherwise undefined.
 */
Interpreter.prototype.setValue = function (left, value) {
  if (left instanceof Array) {
    var obj = left[0];
    var prop = left[1];
    return this.setProperty(obj, prop, value);
  } else {
    return this.setValueToScope(left, value);
  }
};

/**
 * Throw an exception in the interpreter that can be handled by a
 * interpreter try/catch statement.  If unhandled, a real exception will
 * be thrown.  Can be called with either an error class and a message, or
 * with an actual object to be thrown.
 * @param {!Interpreter.Object} errorClass Type of error (if message is
 *   provided) or the value to throw (if no message).
 * @param {string=} opt_message Message being thrown.
 */
Interpreter.prototype.throwException = function (errorClass, opt_message) {
  if (opt_message === undefined) {
    var error = errorClass; // This is a value to throw, not an error class.
  } else {
    var error = this.createObject(errorClass);
    this.setProperty(error, 'message', this.createPrimitive(opt_message), Interpreter.NONENUMERABLE_DESCRIPTOR);
  }
  this.executeException(error);
};

/**
 * Throw an exception in the interpreter that can be handled by a
 * interpreter try/catch statement.  If unhandled, a real exception will
 * be thrown.
 * @param {!Interpreter.Object} error Error object to execute.
 */
Interpreter.prototype.executeException = function (error) {
  // Search for a try statement.
  do {
    this.stateStack.pop();
    var state = this.stateStack[this.stateStack.length - 1];
    if (state.node.type == 'TryStatement') {
      state.throwValue = error;
      return;
    }
  } while (state && state.node.type != 'Program');

  // Throw a real error.
  var realError;
  if (this.isa(error, this.ERROR)) {
    var errorTable = {
      'EvalError': EvalError,
      'RangeError': RangeError,
      'ReferenceError': ReferenceError,
      'SyntaxError': SyntaxError,
      'TypeError': TypeError,
      'URIError': URIError
    };
    var name = this.getProperty(error, 'name').toString();
    var message = this.getProperty(error, 'message').valueOf();
    var type = errorTable[name] || Error;
    realError = type(message);
  } else {
    realError = error.toString();
  }
  throw realError;
};

/**
 * Push a call to a getter onto the statestack.
 * @param {!Interpreter.Object} func Function to execute.
 * @param {!Interpreter.Object|!Array} left
 *     Name of variable or object/propname tuple.
 * @private
 */
Interpreter.prototype.pushGetter_ = function (func, left) {
  // Normally 'this' will be specified as the object component (o.x).
  // Sometimes 'this' is explicitly provided (o).
  var funcThis = left instanceof Array ? left[0] : left;
  this.stateStack.push({
    node: { type: 'CallExpression' },
    doneCallee_: true,
    funcThis_: funcThis,
    func_: func,
    doneArgs_: true,
    arguments_: []
  });
};

/**
 * Push a call to a setter onto the statestack.
 * @param {!Interpreter.Object} func Function to execute.
 * @param {!Interpreter.Object|!Array} left
 *     Name of variable or object/propname tuple.
 * @param {!Interpreter.Object|Interpreter.Primitive} value Value to set.
 * @private
 */
Interpreter.prototype.pushSetter_ = function (func, left, value) {
  // Normally 'this' will be specified as the object component (o.x).
  // Sometimes 'this' is implicitly the global object (x).
  var funcThis = left instanceof Array ? left[0] : this.global;
  this.stateStack.push({
    node: { type: 'CallExpression' },
    doneCallee_: true,
    funcThis_: funcThis,
    func_: func,
    doneArgs_: true,
    arguments_: [value]
  });
};

/**
 * Take a snapshot from current stateStack. Restore by restoreStateSnapshot
 */
Interpreter.prototype.takeStateSnapshot = function () {
  return copy(this.stateStack);
};

/**
 * Restore a state snapshot
 */
Interpreter.prototype.restoreStateSnapshot = function (snapshot) {
  this.stateStack = copy(snapshot);
};

///////////////////////////////////////////////////////////////////////////////
// Functions to handle each node type.
///////////////////////////////////////////////////////////////////////////////

Interpreter.prototype['stepArrayExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  var n = state.n_ || 0;
  if (!state.array_) {
    state.array_ = this.createObject(this.ARRAY);
  } else if (state.value) {
    this.setProperty(state.array_, n - 1, state.value);
  }
  if (n < node.elements.length) {
    state.n_ = n + 1;
    if (node.elements[n]) {
      this.stateStack.push({ node: node.elements[n] });
    } else {
      // [0, 1, , 3][2] -> undefined
      // Missing elements are not defined, they aren't undefined.
      state.value = undefined;
    }
  } else {
    state.array_.length = state.n_ || 0;
    this.stateStack.pop();
    this.stateStack[this.stateStack.length - 1].value = state.array_;
  }
};

Interpreter.prototype['stepAssignmentExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.doneLeft_) {
    state.doneLeft_ = true;
    this.stateStack.push({ node: node.left, components: true });
    return;
  }
  if (!state.doneRight_) {
    if (!state.leftSide_) {
      state.leftSide_ = state.value;
    }
    if (state.doneGetter_) {
      state.leftValue_ = state.value;
    }
    if (!state.doneGetter_ && node.operator != '=') {
      state.leftValue_ = this.getValue(state.leftSide_);
      if (state.leftValue_.isGetter) {
        // Clear the getter flag and call the getter function.
        state.leftValue_.isGetter = false;
        state.doneGetter_ = true;
        var func = /** @type {!Interpreter.Object} */state.leftValue_;
        this.pushGetter_(func, state.leftSide_);
        return;
      }
    }
    state.doneRight_ = true;
    this.stateStack.push({ node: node.right });
    return;
  }
  if (state.doneSetter_) {
    // Return if setter function.
    // Setter method on property has completed.
    // Ignore its return value, and use the original set value instead.
    this.stateStack.pop();
    this.stateStack[this.stateStack.length - 1].value = state.doneSetter_;
    return;
  }
  var rightSide = state.value;
  var value;
  if (node.operator == '=') {
    value = rightSide;
  } else {
    var rightValue = rightSide;
    var leftNumber = state.leftValue_.toNumber();
    var rightNumber = rightValue.toNumber();
    if (node.operator == '+=') {
      var left, right;
      if (state.leftValue_.type == 'string' || rightValue.type == 'string') {
        left = state.leftValue_.toString();
        right = rightValue.toString();
      } else {
        left = leftNumber;
        right = rightNumber;
      }
      value = left + right;
    } else if (node.operator == '-=') {
      value = leftNumber - rightNumber;
    } else if (node.operator == '*=') {
      value = leftNumber * rightNumber;
    } else if (node.operator == '/=') {
      value = leftNumber / rightNumber;
    } else if (node.operator == '%=') {
      value = leftNumber % rightNumber;
    } else if (node.operator == '<<=') {
      value = leftNumber << rightNumber;
    } else if (node.operator == '>>=') {
      value = leftNumber >> rightNumber;
    } else if (node.operator == '>>>=') {
      value = leftNumber >>> rightNumber;
    } else if (node.operator == '&=') {
      value = leftNumber & rightNumber;
    } else if (node.operator == '^=') {
      value = leftNumber ^ rightNumber;
    } else if (node.operator == '|=') {
      value = leftNumber | rightNumber;
    } else {
      throw SyntaxError('Unknown assignment expression: ' + node.operator);
    }
    value = this.createPrimitive(value);
  }
  var setter = this.setValue(state.leftSide_, value);
  if (setter) {
    state.doneSetter_ = value;
    this.pushSetter_(setter, state.leftSide_, value);
    return;
  }
  // Return if no setter function.
  this.stateStack.pop();
  this.stateStack[this.stateStack.length - 1].value = value;
};

Interpreter.prototype['stepBinaryExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.doneLeft_) {
    state.doneLeft_ = true;
    this.stateStack.push({ node: node.left });
    return;
  }
  if (!state.doneRight_) {
    state.doneRight_ = true;
    state.leftValue_ = state.value;
    this.stateStack.push({ node: node.right });
    return;
  }
  this.stateStack.pop();
  var leftSide = state.leftValue_;
  var rightSide = state.value;
  var value;
  var comp = this.comp(leftSide, rightSide);
  if (node.operator == '==' || node.operator == '!=') {
    if (leftSide.isPrimitive && rightSide.isPrimitive) {
      value = leftSide.data == rightSide.data;
    } else {
      value = comp === 0;
    }
    if (node.operator == '!=') {
      value = !value;
    }
  } else if (node.operator == '===' || node.operator == '!==') {
    if (leftSide.isPrimitive && rightSide.isPrimitive) {
      value = leftSide.data === rightSide.data;
    } else {
      value = leftSide === rightSide;
    }
    if (node.operator == '!==') {
      value = !value;
    }
  } else if (node.operator == '>') {
    value = comp == 1;
  } else if (node.operator == '>=') {
    value = comp == 1 || comp === 0;
  } else if (node.operator == '<') {
    value = comp == -1;
  } else if (node.operator == '<=') {
    value = comp == -1 || comp === 0;
  } else if (node.operator == '+') {
    var leftValue = leftSide.isPrimitive ? leftSide.data : leftSide.toString();
    var rightValue = rightSide.isPrimitive ? rightSide.data : rightSide.toString();
    value = leftValue + rightValue;
  } else if (node.operator == 'in') {
    value = this.hasProperty(rightSide, leftSide);
  } else if (node.operator == 'instanceof') {
    if (!this.isa(rightSide, this.FUNCTION)) {
      this.throwException(this.TYPE_ERROR, 'Expecting a function in instanceof check');
    }
    value = this.isa(leftSide, rightSide);
  } else {
    var leftValue = leftSide.toNumber();
    var rightValue = rightSide.toNumber();
    if (node.operator == '-') {
      value = leftValue - rightValue;
    } else if (node.operator == '*') {
      value = leftValue * rightValue;
    } else if (node.operator == '/') {
      value = leftValue / rightValue;
    } else if (node.operator == '%') {
      value = leftValue % rightValue;
    } else if (node.operator == '&') {
      value = leftValue & rightValue;
    } else if (node.operator == '|') {
      value = leftValue | rightValue;
    } else if (node.operator == '^') {
      value = leftValue ^ rightValue;
    } else if (node.operator == '<<') {
      value = leftValue << rightValue;
    } else if (node.operator == '>>') {
      value = leftValue >> rightValue;
    } else if (node.operator == '>>>') {
      value = leftValue >>> rightValue;
    } else {
      throw SyntaxError('Unknown binary operator: ' + node.operator);
    }
  }
  this.stateStack[this.stateStack.length - 1].value = this.createPrimitive(value);
};

Interpreter.prototype['stepBlockStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  var n = state.n_ || 0;
  if (node.body[n]) {
    state.n_ = n + 1;
    this.stateStack.push({ node: node.body[n] });
  } else {
    this.stateStack.pop();
  }
};

Interpreter.prototype['stepBreakStatement'] = function () {
  var state = this.stateStack.pop();
  var node = state.node;
  var label = null;
  if (node.label) {
    label = node.label.name;
  }
  state = this.stateStack.pop();
  while (state && state.node.type != 'CallExpression' && state.node.type != 'NewExpression') {
    if (label ? label == state.label : state.isLoop || state.isSwitch) {
      return;
    }
    state = this.stateStack.pop();
  }
  // Syntax error, do not allow this error to be trapped.
  throw SyntaxError('Illegal break statement');
};

Interpreter.prototype['stepCallExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.doneCallee_) {
    state.doneCallee_ = true;
    this.stateStack.push({ node: node.callee, components: true });
    return;
  }
  if (!state.func_) {
    // Determine value of the function.
    if (state.value.type == 'function') {
      state.func_ = state.value;
    } else {
      if (state.value.length) {
        state.member_ = state.value[0];
      }
      state.func_ = this.getValue(state.value);
      if (!state.func_) {
        return; // Thrown error, but trapped.
      } else if (state.func_.type != 'function') {
        this.throwException(this.TYPE_ERROR, (state.func_ && state.func_.type) + ' is not a function');
        return;
      }
    }
    // Determine value of 'this' in function.
    if (state.node.type == 'NewExpression') {
      // Constructor, 'this' is new object.
      state.funcThis_ = this.createObject(state.func_);
      state.isConstructor_ = true;
    } else if (state.value.length) {
      // Method function, 'this' is object.
      state.funcThis_ = state.value[0];
    } else {
      // Global function, 'this' is global object (or 'undefined' if strict).
      state.funcThis_ = this.getScope().strict ? this.UNDEFINED : this.global;
    }
    state.arguments_ = [];
    state.n_ = 0;
  }
  if (!state.doneArgs_) {
    if (state.n_ != 0) {
      state.arguments_.push(state.value);
    }
    if (node.arguments[state.n_]) {
      this.stateStack.push({ node: node.arguments[state.n_] });
      state.n_++;
      return;
    }
    state.doneArgs_ = true;
  }
  if (!state.doneExec_) {
    state.doneExec_ = true;
    if (state.func_.node) {
      var scope = this.createScope(state.func_.node.body, state.func_.parentScope);
      // Add all arguments.
      for (var i = 0; i < state.func_.node.params.length; i++) {
        var paramName = this.createPrimitive(state.func_.node.params[i].name);
        var paramValue = state.arguments_.length > i ? state.arguments_[i] : this.UNDEFINED;
        this.setProperty(scope, paramName, paramValue);
      }
      // Build arguments variable.
      var argsList = this.createObject(this.ARRAY);
      for (var i = 0; i < state.arguments_.length; i++) {
        this.setProperty(argsList, this.createPrimitive(i), state.arguments_[i]);
      }
      this.setProperty(scope, 'arguments', argsList);
      var funcState = {
        node: state.func_.node.body,
        scope: scope,
        thisExpression: state.funcThis_
      };
      this.stateStack.push(funcState);
      state.value = this.UNDEFINED; // Default value if no explicit return.
    } else if (state.func_.nativeFunc) {
      state.value = state.func_.nativeFunc.apply(state.funcThis_, state.arguments_);
    } else if (state.func_.asyncFunc) {
      var thisInterpreter = this;
      var callback = function callback(value) {
        state.value = value || thisInterpreter.UNDEFINED;
        thisInterpreter.paused_ = false;
      };
      var argsWithCallback = state.arguments_.concat(callback);
      state.func_.asyncFunc.apply(state.funcThis_, argsWithCallback);
      this.paused_ = true;
      return;
    } else if (state.func_.eval) {
      var code = state.arguments_[0];
      if (!code) {
        // eval()
        state.value = this.UNDEFINED;
      } else if (!code.isPrimitive) {
        // JS does not parse String objects:
        // eval(new String('1 + 1')) -> '1 + 1'
        state.value = code;
      } else {
        var ast = acorn.parse(code.toString(), Interpreter.PARSE_OPTIONS);
        state = {
          node: {
            type: 'EvalProgram_',
            body: ast.body
          }
        };
        this.stripLocations_(state.node, node.start, node.end);
        // Update current scope with definitions in eval().
        var scope = this.getScope();
        this.populateScope_(ast, scope);
        this.stateStack.push(state);
      }
    } else {
      /* A child of a function is a function but is not callable.  For example:
      var F = function() {};
      F.prototype = escape;
      var f = new F();
      f();
      */
      this.throwException(this.TYPE_ERROR, 'function is not a function');
    }
  } else {
    // Execution complete.  Put the return value on the stack.
    this.stateStack.pop();
    if (state.isConstructor_ && state.value.type !== 'object') {
      this.stateStack[this.stateStack.length - 1].value = state.funcThis_;
    } else {
      this.stateStack[this.stateStack.length - 1].value = state.value;
    }
  }
};

Interpreter.prototype['stepCatchClause'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.done_) {
    state.done_ = true;
    var scope;
    if (node.param) {
      scope = this.createSpecialScope(this.getScope());
      // Add the argument.
      var paramName = this.createPrimitive(node.param.name);
      this.setProperty(scope, paramName, state.throwValue);
    }
    this.stateStack.push({ node: node.body, scope: scope });
  } else {
    this.stateStack.pop();
  }
};

Interpreter.prototype['stepConditionalExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var mode = state.mode_ || 0;
  if (mode == 0) {
    state.mode_ = 1;
    this.stateStack.push({ node: state.node.test });
    return;
  }
  if (mode == 1) {
    state.mode_ = 2;
    var value = state.value.toBoolean();
    if (value && state.node.consequent) {
      this.stateStack.push({ node: state.node.consequent });
      return; // Execute 'if' block.
    } else if (!value && state.node.alternate) {
      this.stateStack.push({ node: state.node.alternate });
      return; // Execute 'else' block.
    }
    // eval('1;if(false){2}') -> undefined
    this.value = this.UNDEFINED;
  }
  this.stateStack.pop();
  if (state.node.type == 'ConditionalExpression') {
    this.stateStack[this.stateStack.length - 1].value = state.value;
  }
};

Interpreter.prototype['stepContinueStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var label = null;
  if (state.node.label) {
    label = state.node.label.name;
  }
  while (state && state.node.type != 'CallExpression' && state.node.type != 'NewExpression') {
    if (state.isLoop) {
      if (!label || label == state.label) {
        return;
      }
    }
    this.stateStack.pop();
    state = this.stateStack[this.stateStack.length - 1];
  }
  // Syntax error, do not allow this error to be trapped.
  throw SyntaxError('Illegal continue statement');
};

Interpreter.prototype['stepDoWhileStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  if (state.node.type == 'DoWhileStatement' && state.test === undefined) {
    // First iteration of do/while executes without checking test.
    state.value = this.TRUE;
    state.test_ = true;
  }
  if (!state.test_) {
    state.test_ = true;
    this.stateStack.push({ node: state.node.test });
  } else {
    if (!state.value.toBoolean()) {
      // Done, exit loop.
      this.stateStack.pop();
    } else if (state.node.body) {
      // Execute the body.
      state.test_ = false;
      state.isLoop = true;
      this.stateStack.push({ node: state.node.body });
    }
  }
};

Interpreter.prototype['stepEmptyStatement'] = function () {
  this.stateStack.pop();
};

Interpreter.prototype['stepEvalProgram_'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  var n = state.n_ || 0;
  if (node.body[n]) {
    state.n_ = n + 1;
    this.stateStack.push({ node: node.body[n] });
  } else {
    this.stateStack.pop();
    this.stateStack[this.stateStack.length - 1].value = this.value;
  }
};

Interpreter.prototype['stepExpressionStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  if (!state.done_) {
    state.done_ = true;
    this.stateStack.push({ node: state.node.expression });
  } else {
    this.stateStack.pop();
    // Save this value to interpreter.value for use as a return value if
    // this code is inside an eval function.
    this.value = state.value;
  }
};

Interpreter.prototype['stepForInStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.doneVariable_) {
    state.doneVariable_ = true;
    var left = node.left;
    if (left.type == 'VariableDeclaration') {
      // Inline variable declaration: for (var x in y)
      left = left.declarations[0].id;
    }
    this.stateStack.push({ node: left, components: true });
    return;
  }
  if (!state.doneObject_) {
    state.doneObject_ = true;
    state.variable_ = state.value;
    this.stateStack.push({ node: node.right });
    return;
  }
  if (typeof state.iterator_ == 'undefined') {
    // First iteration.
    state.object_ = state.value;
    state.iterator_ = 0;
  }
  var name = null;
  done: do {
    var i = state.iterator_;
    for (var prop in state.object_.properties) {
      if (state.object_.notEnumerable[prop]) {
        continue;
      }
      if (i == 0) {
        // Found the i'th enumerable property.
        name = prop;
        break done;
      }
      i--;
    }
    state.object_ = state.object_.parent && state.object_.parent.properties.prototype;
    state.iterator_ = 0;
  } while (state.object_);

  if (name === null) {
    // Done, exit loop.
    this.stateStack.pop();
  } else {
    // Execute the body.
    if (!state.doneSetter_) {
      var value = this.createPrimitive(name);
      var setter = this.setValue(state.variable_, value);
      if (setter) {
        state.doneSetter_ = true;
        this.pushSetter_(setter, state.variable_, value);
        return;
      }
    }
    state.doneSetter_ = false;
    if (node.body) {
      state.isLoop = true;
      this.stateStack.push({ node: node.body });
    }
    state.iterator_++;
  }
};

Interpreter.prototype['stepForStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  var mode = state.mode_ || 0;
  if (mode == 0) {
    state.mode_ = 1;
    if (node.init) {
      this.stateStack.push({ node: node.init });
    }
  } else if (mode == 1) {
    state.mode_ = 2;
    if (node.test) {
      this.stateStack.push({ node: node.test });
    }
  } else if (mode == 2) {
    state.mode_ = 3;
    if (node.test && state.value && !state.value.toBoolean()) {
      // Done, exit loop.
      this.stateStack.pop();
    } else if (node.body) {
      // Execute the body.
      state.isLoop = true;
      this.stateStack.push({ node: node.body });
    }
  } else if (mode == 3) {
    state.mode_ = 1;
    if (node.update) {
      this.stateStack.push({ node: node.update });
    }
  }
};

Interpreter.prototype['stepFunctionDeclaration'] = function () {
  // This was found and handled when the scope was populated.
  this.stateStack.pop();
};

Interpreter.prototype['stepFunctionExpression'] = function () {
  var state = this.stateStack.pop();
  this.stateStack[this.stateStack.length - 1].value = this.createFunction(state.node, this.getScope());
};

Interpreter.prototype['stepIdentifier'] = function () {
  var state = this.stateStack.pop();
  var nameStr = state.node.name;
  var name = this.createPrimitive(nameStr);
  var value = state.components ? name : this.getValueFromScope(name);
  // An identifier could be a getter if it's a property on the global object.
  if (value && value.isGetter) {
    // Clear the getter flag and call the getter function.
    value.isGetter = false;
    var scope = this.getScope();
    while (!this.hasProperty(scope, nameStr)) {
      scope = scope.parentScope;
    }
    var func = /** @type {!Interpreter.Object} */value;
    this.pushGetter_(func, this.global);
  } else {
    this.stateStack[this.stateStack.length - 1].value = value;
  }
};

Interpreter.prototype['stepIfStatement'] = Interpreter.prototype['stepConditionalExpression'];

Interpreter.prototype['stepLabeledStatement'] = function () {
  // No need to hit this node again on the way back up the stack.
  var state = this.stateStack.pop();
  this.stateStack.push({ node: state.node.body,
    label: state.node.label.name });
};

Interpreter.prototype['stepLiteral'] = function () {
  var state = this.stateStack.pop();
  this.stateStack[this.stateStack.length - 1].value = this.createPrimitive(state.node.value);
};

Interpreter.prototype['stepLogicalExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (node.operator != '&&' && node.operator != '||') {
    throw SyntaxError('Unknown logical operator: ' + node.operator);
  }
  if (!state.doneLeft_) {
    state.doneLeft_ = true;
    this.stateStack.push({ node: node.left });
  } else if (!state.doneRight_) {
    if (node.operator == '&&' && !state.value.toBoolean() || node.operator == '||' && state.value.toBoolean()) {
      // Shortcut evaluation.
      this.stateStack.pop();
      this.stateStack[this.stateStack.length - 1].value = state.value;
    } else {
      state.doneRight_ = true;
      this.stateStack.push({ node: node.right });
    }
  } else {
    this.stateStack.pop();
    this.stateStack[this.stateStack.length - 1].value = state.value;
  }
};

Interpreter.prototype['stepMemberExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.doneObject_) {
    state.doneObject_ = true;
    this.stateStack.push({ node: node.object });
  } else if (!state.doneProperty_) {
    state.doneProperty_ = true;
    state.object_ = state.value;
    this.stateStack.push({
      node: node.property,
      components: !node.computed
    });
  } else {
    this.stateStack.pop();
    if (state.components) {
      this.stateStack[this.stateStack.length - 1].value = [state.object_, state.value];
    } else {
      var value = this.getProperty(state.object_, state.value);
      if (!value) {
        this.stateStack.push({});
        this.throwException(this.TYPE_ERROR, "Cannot read property '" + state.value + "' of " + state.object_.toString());
        return;
      }
      if (value.isGetter) {
        // Clear the getter flag and call the getter function.
        value.isGetter = false;
        var func = /** @type {!Interpreter.Object} */value;
        this.pushGetter_(func, state.object_);
      } else {
        this.stateStack[this.stateStack.length - 1].value = value;
      }
    }
  }
};

Interpreter.prototype['stepNewExpression'] = Interpreter.prototype['stepCallExpression'];

Interpreter.prototype['stepObjectExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  var valueToggle = state.valueToggle_;
  var n = state.n_ || 0;
  if (!state.object) {
    state.object = this.createObject(this.OBJECT);
    state.properties = Object.create(null);
  } else {
    if (valueToggle) {
      state.key_ = state.value;
    } else {
      if (!state.properties[state.key_]) {
        // Create temp object to collect value, getter, and/or setter.
        state.properties[state.key_] = {};
      }
      state.properties[state.key_][state.kind_] = state.value;
    }
  }
  if (node.properties[n]) {
    if (valueToggle) {
      state.n_ = n + 1;
      this.stateStack.push({ node: node.properties[n].value });
    } else {
      state.kind_ = node.properties[n].kind;
      this.stateStack.push({ node: node.properties[n].key, components: true });
    }
    state.valueToggle_ = !valueToggle;
  } else {
    for (var key in state.properties) {
      var kinds = state.properties[key];
      if ('get' in kinds || 'set' in kinds) {
        // Set a property with a getter or setter.
        var descriptor = {
          configurable: true,
          enumerable: true,
          get: kinds['get'],
          set: kinds['set']
        };
        this.setProperty(state.object, key, null, descriptor);
      } else {
        // Set a normal property with a value.
        this.setProperty(state.object, key, kinds['init']);
      }
    }
    this.stateStack.pop();
    this.stateStack[this.stateStack.length - 1].value = state.object;
  }
};

Interpreter.prototype['stepProgram'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  var n = state.n_ || 0;
  if (node.body[n]) {
    state.done = false;
    state.n_ = n + 1;
    this.stateStack.push({ node: node.body[n] });
  } else {
    state.done = true;
    // Don't pop the stateStack.
    // Leave the root scope on the tree in case the program is appended to.
  }
};

Interpreter.prototype['stepReturnStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (node.argument && !state.done_) {
    state.done_ = true;
    this.stateStack.push({ node: node.argument });
  } else {
    var value = state.value || this.UNDEFINED;
    var i = this.stateStack.length - 1;
    state = this.stateStack[i];
    while (state.node.type != 'CallExpression' && state.node.type != 'NewExpression') {
      if (state.node.type != 'TryStatement') {
        this.stateStack.splice(i, 1);
      }
      i--;
      if (i < 0) {
        // Syntax error, do not allow this error to be trapped.
        throw SyntaxError('Illegal return statement');
      }
      state = this.stateStack[i];
    }
    state.value = value;
  }
};

Interpreter.prototype['stepSequenceExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  var n = state.n_ || 0;
  if (node.expressions[n]) {
    state.n_ = n + 1;
    this.stateStack.push({ node: node.expressions[n] });
  } else {
    this.stateStack.pop();
    this.stateStack[this.stateStack.length - 1].value = state.value;
  }
};

Interpreter.prototype['stepSwitchStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];

  if (!state.test_) {
    state.test_ = true;
    this.stateStack.push({ node: state.node.discriminant });
    return;
  }
  if (!state.switchValue_) {
    // Preserve switch value between case tests.
    state.switchValue_ = state.value;
    state.checked_ = [];
  }

  var index = state.index_ || 0;
  var switchCase = state.node.cases[index];
  if (switchCase) {
    if (!state.done_ && !state.checked_[index] && switchCase.test) {
      state.checked_[index] = true;
      this.stateStack.push({ node: switchCase.test });
      return;
    }
    // Test on the default case will be null.
    if (state.done_ || !switchCase.test || this.comp(state.value, state.switchValue_) == 0) {
      state.done_ = true;
      var n = state.n_ || 0;
      if (switchCase.consequent[n]) {
        state.isSwitch = true;
        this.stateStack.push({ node: switchCase.consequent[n] });
        state.n_ = n + 1;
        return;
      }
    }
    state.n_ = 0;
    state.index_ = index + 1;
  } else {
    this.stateStack.pop();
  }
};

Interpreter.prototype['stepThisExpression'] = function () {
  this.stateStack.pop();
  for (var i = this.stateStack.length - 1; i >= 0; i--) {
    if (this.stateStack[i].thisExpression) {
      this.stateStack[this.stateStack.length - 1].value = this.stateStack[i].thisExpression;
      return;
    }
  }
  throw Error('No this expression found.');
};

Interpreter.prototype['stepThrowStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.done_) {
    state.done_ = true;
    this.stateStack.push({ node: node.argument });
  } else {
    this.throwException(state.value);
  }
};

Interpreter.prototype['stepTryStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.doneBlock_) {
    state.doneBlock_ = true;
    this.stateStack.push({ node: node.block });
  } else if (state.throwValue && !state.doneHandler_ && node.handler) {
    state.doneHandler_ = true;
    this.stateStack.push({ node: node.handler, throwValue: state.throwValue });
    state.throwValue = null; // This error has been handled, don't rethrow.
  } else if (!state.doneFinalizer_ && node.finalizer) {
    state.doneFinalizer_ = true;
    this.stateStack.push({ node: node.finalizer });
  } else if (state.throwValue) {
    // There was no catch handler, or the catch/finally threw an error.
    // Throw the error up to a higher try.
    this.executeException(state.throwValue);
  } else {
    this.stateStack.pop();
  }
};

Interpreter.prototype['stepUnaryExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.done_) {
    state.done_ = true;
    var nextState = {
      node: node.argument,
      components: node.operator == 'delete'
    };
    this.stateStack.push(nextState);
    return;
  }
  this.stateStack.pop();
  var value = state.value;
  if (node.operator == '-') {
    value = -value.toNumber();
  } else if (node.operator == '+') {
    value = value.toNumber();
  } else if (node.operator == '!') {
    value = !value.toBoolean();
  } else if (node.operator == '~') {
    value = ~value.toNumber();
  } else if (node.operator == 'delete') {
    if (value.length) {
      var obj = value[0];
      var name = value[1];
    } else {
      var obj = this.getScope();
      var name = value;
    }
    value = this.deleteProperty(obj, name);
    if (!value && this.getScope().strict) {
      this.throwException(this.TYPE_ERROR, 'Cannot delete property \'' + name + '\' of \'' + obj + '\'');
      return;
    }
  } else if (node.operator == 'typeof') {
    value = value.type;
  } else if (node.operator == 'void') {
    value = undefined;
  } else {
    throw SyntaxError('Unknown unary operator: ' + node.operator);
  }
  this.stateStack[this.stateStack.length - 1].value = this.createPrimitive(value);
};

Interpreter.prototype['stepUpdateExpression'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.doneLeft_) {
    state.doneLeft_ = true;
    this.stateStack.push({ node: node.argument, components: true });
    return;
  }
  if (!state.leftSide_) {
    state.leftSide_ = state.value;
  }
  if (state.doneGetter_) {
    state.leftValue_ = state.value;
  }
  if (!state.doneGetter_) {
    state.leftValue_ = this.getValue(state.leftSide_);
    if (!state.leftValue_) {
      return; // Thrown error, but trapped.
    }
    if (state.leftValue_.isGetter) {
      // Clear the getter flag and call the getter function.
      state.leftValue_.isGetter = false;
      state.doneGetter_ = true;
      var func = /** @type {!Interpreter.Object} */state.leftValue_;
      this.pushGetter_(func, state.leftSide_);
      return;
    }
  }
  if (state.doneSetter_) {
    // Return if setter function.
    // Setter method on property has completed.
    // Ignore its return value, and use the original set value instead.
    this.stateStack.pop();
    this.stateStack[this.stateStack.length - 1].value = state.doneSetter_;
    return;
  }
  var leftValue = state.leftValue_.toNumber();
  var changeValue;
  if (node.operator == '++') {
    changeValue = this.createPrimitive(leftValue + 1);
  } else if (node.operator == '--') {
    changeValue = this.createPrimitive(leftValue - 1);
  } else {
    throw SyntaxError('Unknown update expression: ' + node.operator);
  }
  var returnValue = node.prefix ? changeValue : this.createPrimitive(leftValue);
  var setter = this.setValue(state.leftSide_, changeValue);
  if (setter) {
    state.doneSetter_ = returnValue;
    this.pushSetter_(setter, state.leftSide_, changeValue);
    return;
  }
  // Return if no setter function.
  this.stateStack.pop();
  this.stateStack[this.stateStack.length - 1].value = returnValue;
};

Interpreter.prototype['stepVariableDeclaration'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  var n = state.n_ || 0;
  var declarationNode = node.declarations[n];
  if (state.value && declarationNode) {
    // This setValue call never needs to deal with calling a setter function.
    this.setValue(this.createPrimitive(declarationNode.id.name), state.value);
    state.value = null;
    declarationNode = node.declarations[++n];
  }
  while (declarationNode) {
    // Skip any declarations that are not initialized.  They have already
    // been defined as undefined in populateScope_.
    if (declarationNode.init) {
      state.n_ = n;
      this.stateStack.push({ node: declarationNode.init });
      return;
    }
    declarationNode = node.declarations[++n];
  }
  this.stateStack.pop();
};

Interpreter.prototype['stepWithStatement'] = function () {
  var state = this.stateStack[this.stateStack.length - 1];
  var node = state.node;
  if (!state.doneObject_) {
    state.doneObject_ = true;
    this.stateStack.push({ node: node.object });
  } else if (!state.doneBody_) {
    state.doneBody_ = true;
    var scope = this.createSpecialScope(this.getScope(), state.value);
    this.stateStack.push({ node: node.body, scope: scope });
  } else {
    this.stateStack.pop();
  }
};

Interpreter.prototype['stepWhileStatement'] = Interpreter.prototype['stepDoWhileStatement'];

// Preserve top-level API functions from being pruned by JS compilers.
// Add others as needed.
if (typeof window !== 'undefined') {
  window.Interpreter = Interpreter;
}
Interpreter.prototype['appendCode'] = Interpreter.prototype.appendCode;
Interpreter.prototype['createAsyncFunction'] = Interpreter.prototype.createAsyncFunction;
Interpreter.prototype['step'] = Interpreter.prototype.step;
Interpreter.prototype['run'] = Interpreter.prototype.run;

module.exports = Interpreter;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

(function (global, factory) {
   true ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.acorn = global.acorn || {})));
}(this, (function (exports) { 'use strict';

// Reserved word lists for various dialects of the language

var reservedWords = {
  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
  5: "class enum extends super const export import",
  6: "enum",
  strict: "implements interface let package private protected public static yield",
  strictBind: "eval arguments"
}

// And the keywords

var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"

var keywords = {
  5: ecma5AndLessKeywords,
  6: ecma5AndLessKeywords + " const class extends export import super"
}

// ## Character categories

// Big ugly regular expressions that match characters in the
// whitespace, identifier, and identifier-start categories. These
// are only applied when a character is found to actually have a
// code point above 128.
// Generated by `bin/generate-identifier-regex.js`.

var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0-\u08b4\u08b6-\u08bd\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fd5\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ae\ua7b0-\ua7b7\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc"
var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d4-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d01-\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf8\u1cf9\u1dc0-\u1df5\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f"

var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]")
var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]")

nonASCIIidentifierStartChars = nonASCIIidentifierChars = null

// These are a run-length and offset encoded representation of the
// >0xffff code points that are a valid part of identifiers. The
// offset starts at 0x10000, and each pair of numbers represents an
// offset to the next range, and then a size of the range. They were
// generated by bin/generate-identifier-regex.js
var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541]
var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239]

// This has a complexity linear to the value of the code. The
// assumption is that looking up astral identifier characters is
// rare.
function isInAstralSet(code, set) {
  var pos = 0x10000
  for (var i = 0; i < set.length; i += 2) {
    pos += set[i]
    if (pos > code) return false
    pos += set[i + 1]
    if (pos >= code) return true
  }
}

// Test whether a given character code starts an identifier.

function isIdentifierStart(code, astral) {
  if (code < 65) return code === 36
  if (code < 91) return true
  if (code < 97) return code === 95
  if (code < 123) return true
  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))
  if (astral === false) return false
  return isInAstralSet(code, astralIdentifierStartCodes)
}

// Test whether a given character is part of an identifier.

function isIdentifierChar(code, astral) {
  if (code < 48) return code === 36
  if (code < 58) return true
  if (code < 65) return false
  if (code < 91) return true
  if (code < 97) return code === 95
  if (code < 123) return true
  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))
  if (astral === false) return false
  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
}

// ## Token types

// The assignment of fine-grained, information-carrying type objects
// allows the tokenizer to store the information it has about a
// token in a way that is very cheap for the parser to look up.

// All token type variables start with an underscore, to make them
// easy to recognize.

// The `beforeExpr` property is used to disambiguate between regular
// expressions and divisions. It is set on all token types that can
// be followed by an expression (thus, a slash after them would be a
// regular expression).
//
// The `startsExpr` property is used to check if the token ends a
// `yield` expression. It is set on all token types that either can
// directly start an expression (like a quotation mark) or can
// continue an expression (like the body of a string).
//
// `isLoop` marks a keyword as starting a loop, which is important
// to know when parsing a label, in order to allow or disallow
// continue jumps to that label.

var TokenType = function TokenType(label, conf) {
  if ( conf === void 0 ) conf = {};

  this.label = label
  this.keyword = conf.keyword
  this.beforeExpr = !!conf.beforeExpr
  this.startsExpr = !!conf.startsExpr
  this.isLoop = !!conf.isLoop
  this.isAssign = !!conf.isAssign
  this.prefix = !!conf.prefix
  this.postfix = !!conf.postfix
  this.binop = conf.binop || null
  this.updateContext = null
};

function binop(name, prec) {
  return new TokenType(name, {beforeExpr: true, binop: prec})
}
var beforeExpr = {beforeExpr: true};
var startsExpr = {startsExpr: true};
// Map keyword names to token types.

var keywordTypes = {}

// Succinct definitions of keyword token types
function kw(name, options) {
  if ( options === void 0 ) options = {};

  options.keyword = name
  return keywordTypes[name] = new TokenType(name, options)
}

var tt = {
  num: new TokenType("num", startsExpr),
  regexp: new TokenType("regexp", startsExpr),
  string: new TokenType("string", startsExpr),
  name: new TokenType("name", startsExpr),
  eof: new TokenType("eof"),

  // Punctuation token types.
  bracketL: new TokenType("[", {beforeExpr: true, startsExpr: true}),
  bracketR: new TokenType("]"),
  braceL: new TokenType("{", {beforeExpr: true, startsExpr: true}),
  braceR: new TokenType("}"),
  parenL: new TokenType("(", {beforeExpr: true, startsExpr: true}),
  parenR: new TokenType(")"),
  comma: new TokenType(",", beforeExpr),
  semi: new TokenType(";", beforeExpr),
  colon: new TokenType(":", beforeExpr),
  dot: new TokenType("."),
  question: new TokenType("?", beforeExpr),
  arrow: new TokenType("=>", beforeExpr),
  template: new TokenType("template"),
  ellipsis: new TokenType("...", beforeExpr),
  backQuote: new TokenType("`", startsExpr),
  dollarBraceL: new TokenType("${", {beforeExpr: true, startsExpr: true}),

  // Operators. These carry several kinds of properties to help the
  // parser use them properly (the presence of these properties is
  // what categorizes them as operators).
  //
  // `binop`, when present, specifies that this operator is a binary
  // operator, and will refer to its precedence.
  //
  // `prefix` and `postfix` mark the operator as a prefix or postfix
  // unary operator.
  //
  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
  // binary operators with a very low precedence, that should result
  // in AssignmentExpression nodes.

  eq: new TokenType("=", {beforeExpr: true, isAssign: true}),
  assign: new TokenType("_=", {beforeExpr: true, isAssign: true}),
  incDec: new TokenType("++/--", {prefix: true, postfix: true, startsExpr: true}),
  prefix: new TokenType("prefix", {beforeExpr: true, prefix: true, startsExpr: true}),
  logicalOR: binop("||", 1),
  logicalAND: binop("&&", 2),
  bitwiseOR: binop("|", 3),
  bitwiseXOR: binop("^", 4),
  bitwiseAND: binop("&", 5),
  equality: binop("==/!=", 6),
  relational: binop("</>", 7),
  bitShift: binop("<</>>", 8),
  plusMin: new TokenType("+/-", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),
  modulo: binop("%", 10),
  star: binop("*", 10),
  slash: binop("/", 10),
  starstar: new TokenType("**", {beforeExpr: true}),

  // Keyword token types.
  _break: kw("break"),
  _case: kw("case", beforeExpr),
  _catch: kw("catch"),
  _continue: kw("continue"),
  _debugger: kw("debugger"),
  _default: kw("default", beforeExpr),
  _do: kw("do", {isLoop: true, beforeExpr: true}),
  _else: kw("else", beforeExpr),
  _finally: kw("finally"),
  _for: kw("for", {isLoop: true}),
  _function: kw("function", startsExpr),
  _if: kw("if"),
  _return: kw("return", beforeExpr),
  _switch: kw("switch"),
  _throw: kw("throw", beforeExpr),
  _try: kw("try"),
  _var: kw("var"),
  _const: kw("const"),
  _while: kw("while", {isLoop: true}),
  _with: kw("with"),
  _new: kw("new", {beforeExpr: true, startsExpr: true}),
  _this: kw("this", startsExpr),
  _super: kw("super", startsExpr),
  _class: kw("class"),
  _extends: kw("extends", beforeExpr),
  _export: kw("export"),
  _import: kw("import"),
  _null: kw("null", startsExpr),
  _true: kw("true", startsExpr),
  _false: kw("false", startsExpr),
  _in: kw("in", {beforeExpr: true, binop: 7}),
  _instanceof: kw("instanceof", {beforeExpr: true, binop: 7}),
  _typeof: kw("typeof", {beforeExpr: true, prefix: true, startsExpr: true}),
  _void: kw("void", {beforeExpr: true, prefix: true, startsExpr: true}),
  _delete: kw("delete", {beforeExpr: true, prefix: true, startsExpr: true})
}

// Matches a whole line break (where CRLF is considered a single
// line break). Used to count lines.

var lineBreak = /\r\n?|\n|\u2028|\u2029/
var lineBreakG = new RegExp(lineBreak.source, "g")

function isNewLine(code) {
  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029
}

var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/

var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g

function isArray(obj) {
  return Object.prototype.toString.call(obj) === "[object Array]"
}

// Checks if an object has a property.

function has(obj, propName) {
  return Object.prototype.hasOwnProperty.call(obj, propName)
}

// These are used when `options.locations` is on, for the
// `startLoc` and `endLoc` properties.

var Position = function Position(line, col) {
  this.line = line
  this.column = col
};

Position.prototype.offset = function offset (n) {
  return new Position(this.line, this.column + n)
};

var SourceLocation = function SourceLocation(p, start, end) {
  this.start = start
  this.end = end
  if (p.sourceFile !== null) this.source = p.sourceFile
};

// The `getLineInfo` function is mostly useful when the
// `locations` option is off (for performance reasons) and you
// want to find the line/column position for a given character
// offset. `input` should be the code string that the offset refers
// into.

function getLineInfo(input, offset) {
  for (var line = 1, cur = 0;;) {
    lineBreakG.lastIndex = cur
    var match = lineBreakG.exec(input)
    if (match && match.index < offset) {
      ++line
      cur = match.index + match[0].length
    } else {
      return new Position(line, offset - cur)
    }
  }
}

// A second optional argument can be given to further configure
// the parser process. These options are recognized:

var defaultOptions = {
  // `ecmaVersion` indicates the ECMAScript version to parse. Must
  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support
  // for strict mode, the set of reserved words, and support for
  // new syntax features. The default is 7.
  ecmaVersion: 7,
  // `sourceType` indicates the mode the code should be parsed in.
  // Can be either `"script"` or `"module"`. This influences global
  // strict mode and parsing of `import` and `export` declarations.
  sourceType: "script",
  // `onInsertedSemicolon` can be a callback that will be called
  // when a semicolon is automatically inserted. It will be passed
  // th position of the comma as an offset, and if `locations` is
  // enabled, it is given the location as a `{line, column}` object
  // as second argument.
  onInsertedSemicolon: null,
  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
  // trailing commas.
  onTrailingComma: null,
  // By default, reserved words are only enforced if ecmaVersion >= 5.
  // Set `allowReserved` to a boolean value to explicitly turn this on
  // an off. When this option has the value "never", reserved words
  // and keywords can also not be used as property names.
  allowReserved: null,
  // When enabled, a return at the top level is not considered an
  // error.
  allowReturnOutsideFunction: false,
  // When enabled, import/export statements are not constrained to
  // appearing at the top of the program.
  allowImportExportEverywhere: false,
  // When enabled, hashbang directive in the beginning of file
  // is allowed and treated as a line comment.
  allowHashBang: false,
  // When `locations` is on, `loc` properties holding objects with
  // `start` and `end` properties in `{line, column}` form (with
  // line being 1-based and column 0-based) will be attached to the
  // nodes.
  locations: false,
  // A function can be passed as `onToken` option, which will
  // cause Acorn to call that function with object in the same
  // format as tokens returned from `tokenizer().getToken()`. Note
  // that you are not allowed to call the parser from the
  // callback—that will corrupt its internal state.
  onToken: null,
  // A function can be passed as `onComment` option, which will
  // cause Acorn to call that function with `(block, text, start,
  // end)` parameters whenever a comment is skipped. `block` is a
  // boolean indicating whether this is a block (`/* */`) comment,
  // `text` is the content of the comment, and `start` and `end` are
  // character offsets that denote the start and end of the comment.
  // When the `locations` option is on, two more parameters are
  // passed, the full `{line, column}` locations of the start and
  // end of the comments. Note that you are not allowed to call the
  // parser from the callback—that will corrupt its internal state.
  onComment: null,
  // Nodes have their start and end characters offsets recorded in
  // `start` and `end` properties (directly on the node, rather than
  // the `loc` object, which holds line/column data. To also add a
  // [semi-standardized][range] `range` property holding a `[start,
  // end]` array with the same numbers, set the `ranges` option to
  // `true`.
  //
  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
  ranges: false,
  // It is possible to parse multiple files into a single AST by
  // passing the tree produced by parsing the first file as
  // `program` option in subsequent parses. This will add the
  // toplevel forms of the parsed file to the `Program` (top) node
  // of an existing parse tree.
  program: null,
  // When `locations` is on, you can pass this to record the source
  // file in every node's `loc` object.
  sourceFile: null,
  // This value, if given, is stored in every node, whether
  // `locations` is on or off.
  directSourceFile: null,
  // When enabled, parenthesized expressions are represented by
  // (non-standard) ParenthesizedExpression nodes
  preserveParens: false,
  plugins: {}
}

// Interpret and default an options object

function getOptions(opts) {
  var options = {}

  for (var opt in defaultOptions)
    options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]

  if (options.ecmaVersion >= 2015)
    options.ecmaVersion -= 2009

  if (options.allowReserved == null)
    options.allowReserved = options.ecmaVersion < 5

  if (isArray(options.onToken)) {
    var tokens = options.onToken
    options.onToken = function (token) { return tokens.push(token); }
  }
  if (isArray(options.onComment))
    options.onComment = pushComment(options, options.onComment)

  return options
}

function pushComment(options, array) {
  return function (block, text, start, end, startLoc, endLoc) {
    var comment = {
      type: block ? 'Block' : 'Line',
      value: text,
      start: start,
      end: end
    }
    if (options.locations)
      comment.loc = new SourceLocation(this, startLoc, endLoc)
    if (options.ranges)
      comment.range = [start, end]
    array.push(comment)
  }
}

// Registered plugins
var plugins = {}

function keywordRegexp(words) {
  return new RegExp("^(" + words.replace(/ /g, "|") + ")$")
}

var Parser = function Parser(options, input, startPos) {
  this.options = options = getOptions(options)
  this.sourceFile = options.sourceFile
  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5])
  var reserved = ""
  if (!options.allowReserved) {
    for (var v = options.ecmaVersion;; v--)
      if (reserved = reservedWords[v]) break
    if (options.sourceType == "module") reserved += " await"
  }
  this.reservedWords = keywordRegexp(reserved)
  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict
  this.reservedWordsStrict = keywordRegexp(reservedStrict)
  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + " " + reservedWords.strictBind)
  this.input = String(input)

  // Used to signal to callers of `readWord1` whether the word
  // contained any escape sequences. This is needed because words with
  // escape sequences must not be interpreted as keywords.
  this.containsEsc = false

  // Load plugins
  this.loadPlugins(options.plugins)

  // Set up token state

  // The current position of the tokenizer in the input.
  if (startPos) {
    this.pos = startPos
    this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1
    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length
  } else {
    this.pos = this.lineStart = 0
    this.curLine = 1
  }

  // Properties of the current token:
  // Its type
  this.type = tt.eof
  // For tokens that include more information than their type, the value
  this.value = null
  // Its start and end offset
  this.start = this.end = this.pos
  // And, if locations are used, the {line, column} object
  // corresponding to those offsets
  this.startLoc = this.endLoc = this.curPosition()

  // Position information for the previous token
  this.lastTokEndLoc = this.lastTokStartLoc = null
  this.lastTokStart = this.lastTokEnd = this.pos

  // The context stack is used to superficially track syntactic
  // context to predict whether a regular expression is allowed in a
  // given position.
  this.context = this.initialContext()
  this.exprAllowed = true

  // Figure out if it's a module code.
  this.inModule = options.sourceType === "module"
  this.strict = this.inModule || this.strictDirective(this.pos)

  // Used to signify the start of a potential arrow function
  this.potentialArrowAt = -1

  // Flags to track whether we are in a function, a generator, an async function.
  this.inFunction = this.inGenerator = this.inAsync = false
  // Positions to delayed-check that yield/await does not exist in default parameters.
  this.yieldPos = this.awaitPos = 0
  // Labels in scope.
  this.labels = []

  // If enabled, skip leading hashbang line.
  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')
    this.skipLineComment(2)
};

// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them
Parser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };
Parser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };

Parser.prototype.extend = function extend (name, f) {
  this[name] = f(this[name])
};

Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {
    var this$1 = this;

  for (var name in pluginConfigs) {
    var plugin = plugins[name]
    if (!plugin) throw new Error("Plugin '" + name + "' not found")
    plugin(this$1, pluginConfigs[name])
  }
};

Parser.prototype.parse = function parse () {
  var node = this.options.program || this.startNode()
  this.nextToken()
  return this.parseTopLevel(node)
};

var pp = Parser.prototype

// ## Parser utilities

var literal = /^(?:'((?:[^\']|\.)*)'|"((?:[^\"]|\.)*)"|;)/
pp.strictDirective = function(start) {
  var this$1 = this;

  for (;;) {
    skipWhiteSpace.lastIndex = start
    start += skipWhiteSpace.exec(this$1.input)[0].length
    var match = literal.exec(this$1.input.slice(start))
    if (!match) return false
    if ((match[1] || match[2]) == "use strict") return true
    start += match[0].length
  }
}

// Predicate that tests whether the next token is of the given
// type, and if yes, consumes it as a side effect.

pp.eat = function(type) {
  if (this.type === type) {
    this.next()
    return true
  } else {
    return false
  }
}

// Tests whether parsed token is a contextual keyword.

pp.isContextual = function(name) {
  return this.type === tt.name && this.value === name
}

// Consumes contextual keyword if possible.

pp.eatContextual = function(name) {
  return this.value === name && this.eat(tt.name)
}

// Asserts that following token is given contextual keyword.

pp.expectContextual = function(name) {
  if (!this.eatContextual(name)) this.unexpected()
}

// Test whether a semicolon can be inserted at the current position.

pp.canInsertSemicolon = function() {
  return this.type === tt.eof ||
    this.type === tt.braceR ||
    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
}

pp.insertSemicolon = function() {
  if (this.canInsertSemicolon()) {
    if (this.options.onInsertedSemicolon)
      this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)
    return true
  }
}

// Consume a semicolon, or, failing that, see if we are allowed to
// pretend that there is a semicolon at this position.

pp.semicolon = function() {
  if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()
}

pp.afterTrailingComma = function(tokType, notNext) {
  if (this.type == tokType) {
    if (this.options.onTrailingComma)
      this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)
    if (!notNext)
      this.next()
    return true
  }
}

// Expect a token of a given type. If found, consume it, otherwise,
// raise an unexpected token error.

pp.expect = function(type) {
  this.eat(type) || this.unexpected()
}

// Raise an unexpected token error.

pp.unexpected = function(pos) {
  this.raise(pos != null ? pos : this.start, "Unexpected token")
}

var DestructuringErrors = function DestructuringErrors() {
  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = -1
};

pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {
  if (!refDestructuringErrors) return
  if (refDestructuringErrors.trailingComma > -1)
    this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element")
  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind
  if (parens > -1) this.raiseRecoverable(parens, "Parenthesized pattern")
}

pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
  var pos = refDestructuringErrors ? refDestructuringErrors.shorthandAssign : -1
  if (!andThrow) return pos >= 0
  if (pos > -1) this.raise(pos, "Shorthand property assignments are valid only in destructuring patterns")
}

pp.checkYieldAwaitInDefaultParams = function() {
  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))
    this.raise(this.yieldPos, "Yield expression cannot be a default value")
  if (this.awaitPos)
    this.raise(this.awaitPos, "Await expression cannot be a default value")
}

pp.isSimpleAssignTarget = function(expr) {
  if (expr.type === "ParenthesizedExpression")
    return this.isSimpleAssignTarget(expr.expression)
  return expr.type === "Identifier" || expr.type === "MemberExpression"
}

var pp$1 = Parser.prototype

// ### Statement parsing

// Parse a program. Initializes the parser, reads any number of
// statements, and wraps them in a Program node.  Optionally takes a
// `program` argument.  If present, the statements will be appended
// to its body instead of creating a new node.

pp$1.parseTopLevel = function(node) {
  var this$1 = this;

  var exports = {}
  if (!node.body) node.body = []
  while (this.type !== tt.eof) {
    var stmt = this$1.parseStatement(true, true, exports)
    node.body.push(stmt)
  }
  this.next()
  if (this.options.ecmaVersion >= 6) {
    node.sourceType = this.options.sourceType
  }
  return this.finishNode(node, "Program")
}

var loopLabel = {kind: "loop"};
var switchLabel = {kind: "switch"};
pp$1.isLet = function() {
  if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != "let") return false
  skipWhiteSpace.lastIndex = this.pos
  var skip = skipWhiteSpace.exec(this.input)
  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)
  if (nextCh === 91 || nextCh == 123) return true // '{' and '['
  if (isIdentifierStart(nextCh, true)) {
    for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}
    var ident = this.input.slice(next, pos)
    if (!this.isKeyword(ident)) return true
  }
  return false
}

// check 'async [no LineTerminator here] function'
// - 'async /*foo*/ function' is OK.
// - 'async /*\n*/ function' is invalid.
pp$1.isAsyncFunction = function() {
  if (this.type !== tt.name || this.options.ecmaVersion < 8 || this.value != "async")
    return false

  skipWhiteSpace.lastIndex = this.pos
  var skip = skipWhiteSpace.exec(this.input)
  var next = this.pos + skip[0].length
  return !lineBreak.test(this.input.slice(this.pos, next)) &&
    this.input.slice(next, next + 8) === "function" &&
    (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))
}

// Parse a single statement.
//
// If expecting a statement and finding a slash operator, parse a
// regular expression literal. This is to handle cases like
// `if (foo) /blah/.exec(foo)`, where looking at the previous token
// does not help.

pp$1.parseStatement = function(declaration, topLevel, exports) {
  var starttype = this.type, node = this.startNode(), kind

  if (this.isLet()) {
    starttype = tt._var
    kind = "let"
  }

  // Most types of statements are recognized by the keyword they
  // start with. Many are trivial to parse, some require a bit of
  // complexity.

  switch (starttype) {
  case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)
  case tt._debugger: return this.parseDebuggerStatement(node)
  case tt._do: return this.parseDoStatement(node)
  case tt._for: return this.parseForStatement(node)
  case tt._function:
    if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()
    return this.parseFunctionStatement(node, false)
  case tt._class:
    if (!declaration) this.unexpected()
    return this.parseClass(node, true)
  case tt._if: return this.parseIfStatement(node)
  case tt._return: return this.parseReturnStatement(node)
  case tt._switch: return this.parseSwitchStatement(node)
  case tt._throw: return this.parseThrowStatement(node)
  case tt._try: return this.parseTryStatement(node)
  case tt._const: case tt._var:
    kind = kind || this.value
    if (!declaration && kind != "var") this.unexpected()
    return this.parseVarStatement(node, kind)
  case tt._while: return this.parseWhileStatement(node)
  case tt._with: return this.parseWithStatement(node)
  case tt.braceL: return this.parseBlock()
  case tt.semi: return this.parseEmptyStatement(node)
  case tt._export:
  case tt._import:
    if (!this.options.allowImportExportEverywhere) {
      if (!topLevel)
        this.raise(this.start, "'import' and 'export' may only appear at the top level")
      if (!this.inModule)
        this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")
    }
    return starttype === tt._import ? this.parseImport(node) : this.parseExport(node, exports)

    // If the statement does not start with a statement keyword or a
    // brace, it's an ExpressionStatement or LabeledStatement. We
    // simply start parsing an expression, and afterwards, if the
    // next token is a colon and the expression was a simple
    // Identifier node, we switch to interpreting it as a label.
  default:
    if (this.isAsyncFunction() && declaration) {
      this.next()
      return this.parseFunctionStatement(node, true)
    }

    var maybeName = this.value, expr = this.parseExpression()
    if (starttype === tt.name && expr.type === "Identifier" && this.eat(tt.colon))
      return this.parseLabeledStatement(node, maybeName, expr)
    else return this.parseExpressionStatement(node, expr)
  }
}

pp$1.parseBreakContinueStatement = function(node, keyword) {
  var this$1 = this;

  var isBreak = keyword == "break"
  this.next()
  if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null
  else if (this.type !== tt.name) this.unexpected()
  else {
    node.label = this.parseIdent()
    this.semicolon()
  }

  // Verify that there is an actual destination to break or
  // continue to.
  for (var i = 0; i < this.labels.length; ++i) {
    var lab = this$1.labels[i]
    if (node.label == null || lab.name === node.label.name) {
      if (lab.kind != null && (isBreak || lab.kind === "loop")) break
      if (node.label && isBreak) break
    }
  }
  if (i === this.labels.length) this.raise(node.start, "Unsyntactic " + keyword)
  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
}

pp$1.parseDebuggerStatement = function(node) {
  this.next()
  this.semicolon()
  return this.finishNode(node, "DebuggerStatement")
}

pp$1.parseDoStatement = function(node) {
  this.next()
  this.labels.push(loopLabel)
  node.body = this.parseStatement(false)
  this.labels.pop()
  this.expect(tt._while)
  node.test = this.parseParenExpression()
  if (this.options.ecmaVersion >= 6)
    this.eat(tt.semi)
  else
    this.semicolon()
  return this.finishNode(node, "DoWhileStatement")
}

// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
// loop is non-trivial. Basically, we have to parse the init `var`
// statement or expression, disallowing the `in` operator (see
// the second parameter to `parseExpression`), and then check
// whether the next token is `in` or `of`. When there is no init
// part (semicolon immediately after the opening parenthesis), it
// is a regular `for` loop.

pp$1.parseForStatement = function(node) {
  this.next()
  this.labels.push(loopLabel)
  this.expect(tt.parenL)
  if (this.type === tt.semi) return this.parseFor(node, null)
  var isLet = this.isLet()
  if (this.type === tt._var || this.type === tt._const || isLet) {
    var init$1 = this.startNode(), kind = isLet ? "let" : this.value
    this.next()
    this.parseVar(init$1, true, kind)
    this.finishNode(init$1, "VariableDeclaration")
    if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1 &&
        !(kind !== "var" && init$1.declarations[0].init))
      return this.parseForIn(node, init$1)
    return this.parseFor(node, init$1)
  }
  var refDestructuringErrors = new DestructuringErrors
  var init = this.parseExpression(true, refDestructuringErrors)
  if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
    this.toAssignable(init)
    this.checkLVal(init)
    this.checkPatternErrors(refDestructuringErrors, true)
    return this.parseForIn(node, init)
  } else {
    this.checkExpressionErrors(refDestructuringErrors, true)
  }
  return this.parseFor(node, init)
}

pp$1.parseFunctionStatement = function(node, isAsync) {
  this.next()
  return this.parseFunction(node, true, false, isAsync)
}

pp$1.isFunction = function() {
  return this.type === tt._function || this.isAsyncFunction()
}

pp$1.parseIfStatement = function(node) {
  this.next()
  node.test = this.parseParenExpression()
  // allow function declarations in branches, but only in non-strict mode
  node.consequent = this.parseStatement(!this.strict && this.isFunction())
  node.alternate = this.eat(tt._else) ? this.parseStatement(!this.strict && this.isFunction()) : null
  return this.finishNode(node, "IfStatement")
}

pp$1.parseReturnStatement = function(node) {
  if (!this.inFunction && !this.options.allowReturnOutsideFunction)
    this.raise(this.start, "'return' outside of function")
  this.next()

  // In `return` (and `break`/`continue`), the keywords with
  // optional arguments, we eagerly look for a semicolon or the
  // possibility to insert one.

  if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null
  else { node.argument = this.parseExpression(); this.semicolon() }
  return this.finishNode(node, "ReturnStatement")
}

pp$1.parseSwitchStatement = function(node) {
  var this$1 = this;

  this.next()
  node.discriminant = this.parseParenExpression()
  node.cases = []
  this.expect(tt.braceL)
  this.labels.push(switchLabel)

  // Statements under must be grouped (by label) in SwitchCase
  // nodes. `cur` is used to keep the node that we are currently
  // adding statements to.

  for (var cur, sawDefault = false; this.type != tt.braceR;) {
    if (this$1.type === tt._case || this$1.type === tt._default) {
      var isCase = this$1.type === tt._case
      if (cur) this$1.finishNode(cur, "SwitchCase")
      node.cases.push(cur = this$1.startNode())
      cur.consequent = []
      this$1.next()
      if (isCase) {
        cur.test = this$1.parseExpression()
      } else {
        if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, "Multiple default clauses")
        sawDefault = true
        cur.test = null
      }
      this$1.expect(tt.colon)
    } else {
      if (!cur) this$1.unexpected()
      cur.consequent.push(this$1.parseStatement(true))
    }
  }
  if (cur) this.finishNode(cur, "SwitchCase")
  this.next() // Closing brace
  this.labels.pop()
  return this.finishNode(node, "SwitchStatement")
}

pp$1.parseThrowStatement = function(node) {
  this.next()
  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
    this.raise(this.lastTokEnd, "Illegal newline after throw")
  node.argument = this.parseExpression()
  this.semicolon()
  return this.finishNode(node, "ThrowStatement")
}

// Reused empty array added for node fields that are always empty.

var empty = []

pp$1.parseTryStatement = function(node) {
  this.next()
  node.block = this.parseBlock()
  node.handler = null
  if (this.type === tt._catch) {
    var clause = this.startNode()
    this.next()
    this.expect(tt.parenL)
    clause.param = this.parseBindingAtom()
    this.checkLVal(clause.param, true)
    this.expect(tt.parenR)
    clause.body = this.parseBlock()
    node.handler = this.finishNode(clause, "CatchClause")
  }
  node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null
  if (!node.handler && !node.finalizer)
    this.raise(node.start, "Missing catch or finally clause")
  return this.finishNode(node, "TryStatement")
}

pp$1.parseVarStatement = function(node, kind) {
  this.next()
  this.parseVar(node, false, kind)
  this.semicolon()
  return this.finishNode(node, "VariableDeclaration")
}

pp$1.parseWhileStatement = function(node) {
  this.next()
  node.test = this.parseParenExpression()
  this.labels.push(loopLabel)
  node.body = this.parseStatement(false)
  this.labels.pop()
  return this.finishNode(node, "WhileStatement")
}

pp$1.parseWithStatement = function(node) {
  if (this.strict) this.raise(this.start, "'with' in strict mode")
  this.next()
  node.object = this.parseParenExpression()
  node.body = this.parseStatement(false)
  return this.finishNode(node, "WithStatement")
}

pp$1.parseEmptyStatement = function(node) {
  this.next()
  return this.finishNode(node, "EmptyStatement")
}

pp$1.parseLabeledStatement = function(node, maybeName, expr) {
  var this$1 = this;

  for (var i = 0; i < this.labels.length; ++i)
    if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, "Label '" + maybeName + "' is already declared")
  var kind = this.type.isLoop ? "loop" : this.type === tt._switch ? "switch" : null
  for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {
    var label = this$1.labels[i$1]
    if (label.statementStart == node.start) {
      label.statementStart = this$1.start
      label.kind = kind
    } else break
  }
  this.labels.push({name: maybeName, kind: kind, statementStart: this.start})
  node.body = this.parseStatement(true)
  if (node.body.type == "ClassDeclaration" ||
      node.body.type == "VariableDeclaration" && (this.strict || node.body.kind != "var") ||
      node.body.type == "FunctionDeclaration" && (this.strict || node.body.generator))
    this.raiseRecoverable(node.body.start, "Invalid labeled declaration")
  this.labels.pop()
  node.label = expr
  return this.finishNode(node, "LabeledStatement")
}

pp$1.parseExpressionStatement = function(node, expr) {
  node.expression = expr
  this.semicolon()
  return this.finishNode(node, "ExpressionStatement")
}

// Parse a semicolon-enclosed block of statements, handling `"use
// strict"` declarations when `allowStrict` is true (used for
// function bodies).

pp$1.parseBlock = function() {
  var this$1 = this;

  var node = this.startNode()
  node.body = []
  this.expect(tt.braceL)
  while (!this.eat(tt.braceR)) {
    var stmt = this$1.parseStatement(true)
    node.body.push(stmt)
  }
  return this.finishNode(node, "BlockStatement")
}

// Parse a regular `for` loop. The disambiguation code in
// `parseStatement` will already have parsed the init statement or
// expression.

pp$1.parseFor = function(node, init) {
  node.init = init
  this.expect(tt.semi)
  node.test = this.type === tt.semi ? null : this.parseExpression()
  this.expect(tt.semi)
  node.update = this.type === tt.parenR ? null : this.parseExpression()
  this.expect(tt.parenR)
  node.body = this.parseStatement(false)
  this.labels.pop()
  return this.finishNode(node, "ForStatement")
}

// Parse a `for`/`in` and `for`/`of` loop, which are almost
// same from parser's perspective.

pp$1.parseForIn = function(node, init) {
  var type = this.type === tt._in ? "ForInStatement" : "ForOfStatement"
  this.next()
  node.left = init
  node.right = this.parseExpression()
  this.expect(tt.parenR)
  node.body = this.parseStatement(false)
  this.labels.pop()
  return this.finishNode(node, type)
}

// Parse a list of variable declarations.

pp$1.parseVar = function(node, isFor, kind) {
  var this$1 = this;

  node.declarations = []
  node.kind = kind
  for (;;) {
    var decl = this$1.startNode()
    this$1.parseVarId(decl)
    if (this$1.eat(tt.eq)) {
      decl.init = this$1.parseMaybeAssign(isFor)
    } else if (kind === "const" && !(this$1.type === tt._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual("of")))) {
      this$1.unexpected()
    } else if (decl.id.type != "Identifier" && !(isFor && (this$1.type === tt._in || this$1.isContextual("of")))) {
      this$1.raise(this$1.lastTokEnd, "Complex binding patterns require an initialization value")
    } else {
      decl.init = null
    }
    node.declarations.push(this$1.finishNode(decl, "VariableDeclarator"))
    if (!this$1.eat(tt.comma)) break
  }
  return node
}

pp$1.parseVarId = function(decl) {
  decl.id = this.parseBindingAtom()
  this.checkLVal(decl.id, true)
}

// Parse a function declaration or literal (depending on the
// `isStatement` parameter).

pp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {
  this.initFunction(node)
  if (this.options.ecmaVersion >= 6 && !isAsync)
    node.generator = this.eat(tt.star)
  if (this.options.ecmaVersion >= 8)
    node.async = !!isAsync

  if (isStatement == null)
    isStatement = this.type == tt.name
  if (isStatement)
    node.id = this.parseIdent()

  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,
      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction
  this.inGenerator = node.generator
  this.inAsync = node.async
  this.yieldPos = 0
  this.awaitPos = 0
  this.inFunction = true

  if (!isStatement && this.type === tt.name)
    node.id = this.parseIdent()
  this.parseFunctionParams(node)
  this.parseFunctionBody(node, allowExpressionBody)

  this.inGenerator = oldInGen
  this.inAsync = oldInAsync
  this.yieldPos = oldYieldPos
  this.awaitPos = oldAwaitPos
  this.inFunction = oldInFunc
  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression")
}

pp$1.parseFunctionParams = function(node) {
  this.expect(tt.parenL)
  node.params = this.parseBindingList(tt.parenR, false, this.options.ecmaVersion >= 8, true)
  this.checkYieldAwaitInDefaultParams()
}

// Parse a class declaration or literal (depending on the
// `isStatement` parameter).

pp$1.parseClass = function(node, isStatement) {
  var this$1 = this;

  this.next()
  if (isStatement == null) isStatement = this.type === tt.name
  this.parseClassId(node, isStatement)
  this.parseClassSuper(node)
  var classBody = this.startNode()
  var hadConstructor = false
  classBody.body = []
  this.expect(tt.braceL)
  while (!this.eat(tt.braceR)) {
    if (this$1.eat(tt.semi)) continue
    var method = this$1.startNode()
    var isGenerator = this$1.eat(tt.star)
    var isAsync = false
    var isMaybeStatic = this$1.type === tt.name && this$1.value === "static"
    this$1.parsePropertyName(method)
    method.static = isMaybeStatic && this$1.type !== tt.parenL
    if (method.static) {
      if (isGenerator) this$1.unexpected()
      isGenerator = this$1.eat(tt.star)
      this$1.parsePropertyName(method)
    }
    if (this$1.options.ecmaVersion >= 8 && !isGenerator && !method.computed &&
        method.key.type === "Identifier" && method.key.name === "async" && this$1.type !== tt.parenL &&
        !this$1.canInsertSemicolon()) {
      isAsync = true
      this$1.parsePropertyName(method)
    }
    method.kind = "method"
    var isGetSet = false
    if (!method.computed) {
      var key = method.key;
      if (!isGenerator && !isAsync && key.type === "Identifier" && this$1.type !== tt.parenL && (key.name === "get" || key.name === "set")) {
        isGetSet = true
        method.kind = key.name
        key = this$1.parsePropertyName(method)
      }
      if (!method.static && (key.type === "Identifier" && key.name === "constructor" ||
          key.type === "Literal" && key.value === "constructor")) {
        if (hadConstructor) this$1.raise(key.start, "Duplicate constructor in the same class")
        if (isGetSet) this$1.raise(key.start, "Constructor can't have get/set modifier")
        if (isGenerator) this$1.raise(key.start, "Constructor can't be a generator")
        if (isAsync) this$1.raise(key.start, "Constructor can't be an async method")
        method.kind = "constructor"
        hadConstructor = true
      }
    }
    this$1.parseClassMethod(classBody, method, isGenerator, isAsync)
    if (isGetSet) {
      var paramCount = method.kind === "get" ? 0 : 1
      if (method.value.params.length !== paramCount) {
        var start = method.value.start
        if (method.kind === "get")
          this$1.raiseRecoverable(start, "getter should have no params")
        else
          this$1.raiseRecoverable(start, "setter should have exactly one param")
      } else {
        if (method.kind === "set" && method.value.params[0].type === "RestElement")
          this$1.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params")
      }
    }
  }
  node.body = this.finishNode(classBody, "ClassBody")
  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
}

pp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {
  method.value = this.parseMethod(isGenerator, isAsync)
  classBody.body.push(this.finishNode(method, "MethodDefinition"))
}

pp$1.parseClassId = function(node, isStatement) {
  node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null
}

pp$1.parseClassSuper = function(node) {
  node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null
}

// Parses module export declaration.

pp$1.parseExport = function(node, exports) {
  var this$1 = this;

  this.next()
  // export * from '...'
  if (this.eat(tt.star)) {
    this.expectContextual("from")
    node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()
    this.semicolon()
    return this.finishNode(node, "ExportAllDeclaration")
  }
  if (this.eat(tt._default)) { // export default ...
    this.checkExport(exports, "default", this.lastTokStart)
    var isAsync
    if (this.type === tt._function || (isAsync = this.isAsyncFunction())) {
      var fNode = this.startNode()
      this.next()
      if (isAsync) this.next()
      node.declaration = this.parseFunction(fNode, null, false, isAsync)
    } else if (this.type === tt._class) {
      var cNode = this.startNode()
      node.declaration = this.parseClass(cNode, null)
    } else {
      node.declaration = this.parseMaybeAssign()
      this.semicolon()
    }
    return this.finishNode(node, "ExportDefaultDeclaration")
  }
  // export var|const|let|function|class ...
  if (this.shouldParseExportStatement()) {
    node.declaration = this.parseStatement(true)
    if (node.declaration.type === "VariableDeclaration")
      this.checkVariableExport(exports, node.declaration.declarations)
    else
      this.checkExport(exports, node.declaration.id.name, node.declaration.id.start)
    node.specifiers = []
    node.source = null
  } else { // export { x, y as z } [from '...']
    node.declaration = null
    node.specifiers = this.parseExportSpecifiers(exports)
    if (this.eatContextual("from")) {
      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()
    } else {
      // check for keywords used as local names
      for (var i = 0; i < node.specifiers.length; i++) {
        if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {
          this$1.unexpected(node.specifiers[i].local.start)
        }
      }

      node.source = null
    }
    this.semicolon()
  }
  return this.finishNode(node, "ExportNamedDeclaration")
}

pp$1.checkExport = function(exports, name, pos) {
  if (!exports) return
  if (Object.prototype.hasOwnProperty.call(exports, name))
    this.raiseRecoverable(pos, "Duplicate export '" + name + "'")
  exports[name] = true
}

pp$1.checkPatternExport = function(exports, pat) {
  var this$1 = this;

  var type = pat.type
  if (type == "Identifier")
    this.checkExport(exports, pat.name, pat.start)
  else if (type == "ObjectPattern")
    for (var i = 0; i < pat.properties.length; ++i)
      this$1.checkPatternExport(exports, pat.properties[i].value)
  else if (type == "ArrayPattern")
    for (var i$1 = 0; i$1 < pat.elements.length; ++i$1) {
      var elt = pat.elements[i$1]
      if (elt) this$1.checkPatternExport(exports, elt)
    }
  else if (type == "AssignmentPattern")
    this.checkPatternExport(exports, pat.left)
  else if (type == "ParenthesizedExpression")
    this.checkPatternExport(exports, pat.expression)
}

pp$1.checkVariableExport = function(exports, decls) {
  var this$1 = this;

  if (!exports) return
  for (var i = 0; i < decls.length; i++)
    this$1.checkPatternExport(exports, decls[i].id)
}

pp$1.shouldParseExportStatement = function() {
  return this.type.keyword === "var"
    || this.type.keyword === "const"
    || this.type.keyword === "class"
    || this.type.keyword === "function"
    || this.isLet()
    || this.isAsyncFunction()
}

// Parses a comma-separated list of module exports.

pp$1.parseExportSpecifiers = function(exports) {
  var this$1 = this;

  var nodes = [], first = true
  // export { x, y as z } [from '...']
  this.expect(tt.braceL)
  while (!this.eat(tt.braceR)) {
    if (!first) {
      this$1.expect(tt.comma)
      if (this$1.afterTrailingComma(tt.braceR)) break
    } else first = false

    var node = this$1.startNode()
    node.local = this$1.parseIdent(true)
    node.exported = this$1.eatContextual("as") ? this$1.parseIdent(true) : node.local
    this$1.checkExport(exports, node.exported.name, node.exported.start)
    nodes.push(this$1.finishNode(node, "ExportSpecifier"))
  }
  return nodes
}

// Parses import declaration.

pp$1.parseImport = function(node) {
  this.next()
  // import '...'
  if (this.type === tt.string) {
    node.specifiers = empty
    node.source = this.parseExprAtom()
  } else {
    node.specifiers = this.parseImportSpecifiers()
    this.expectContextual("from")
    node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()
  }
  this.semicolon()
  return this.finishNode(node, "ImportDeclaration")
}

// Parses a comma-separated list of module imports.

pp$1.parseImportSpecifiers = function() {
  var this$1 = this;

  var nodes = [], first = true
  if (this.type === tt.name) {
    // import defaultObj, { x, y as z } from '...'
    var node = this.startNode()
    node.local = this.parseIdent()
    this.checkLVal(node.local, true)
    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"))
    if (!this.eat(tt.comma)) return nodes
  }
  if (this.type === tt.star) {
    var node$1 = this.startNode()
    this.next()
    this.expectContextual("as")
    node$1.local = this.parseIdent()
    this.checkLVal(node$1.local, true)
    nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"))
    return nodes
  }
  this.expect(tt.braceL)
  while (!this.eat(tt.braceR)) {
    if (!first) {
      this$1.expect(tt.comma)
      if (this$1.afterTrailingComma(tt.braceR)) break
    } else first = false

    var node$2 = this$1.startNode()
    node$2.imported = this$1.parseIdent(true)
    if (this$1.eatContextual("as")) {
      node$2.local = this$1.parseIdent()
    } else {
      node$2.local = node$2.imported
      if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start)
      if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raiseRecoverable(node$2.local.start, "The keyword '" + node$2.local.name + "' is reserved")
    }
    this$1.checkLVal(node$2.local, true)
    nodes.push(this$1.finishNode(node$2, "ImportSpecifier"))
  }
  return nodes
}

var pp$2 = Parser.prototype

// Convert existing expression atom to assignable pattern
// if possible.

pp$2.toAssignable = function(node, isBinding) {
  var this$1 = this;

  if (this.options.ecmaVersion >= 6 && node) {
    switch (node.type) {
      case "Identifier":
      if (this.inAsync && node.name === "await")
        this.raise(node.start, "Can not use 'await' as identifier inside an async function")
      break

    case "ObjectPattern":
    case "ArrayPattern":
      break

    case "ObjectExpression":
      node.type = "ObjectPattern"
      for (var i = 0; i < node.properties.length; i++) {
        var prop = node.properties[i]
        if (prop.kind !== "init") this$1.raise(prop.key.start, "Object pattern can't contain getter or setter")
        this$1.toAssignable(prop.value, isBinding)
      }
      break

    case "ArrayExpression":
      node.type = "ArrayPattern"
      this.toAssignableList(node.elements, isBinding)
      break

    case "AssignmentExpression":
      if (node.operator === "=") {
        node.type = "AssignmentPattern"
        delete node.operator
        this.toAssignable(node.left, isBinding)
        // falls through to AssignmentPattern
      } else {
        this.raise(node.left.end, "Only '=' operator can be used for specifying default value.")
        break
      }

    case "AssignmentPattern":
      break

    case "ParenthesizedExpression":
      node.expression = this.toAssignable(node.expression, isBinding)
      break

    case "MemberExpression":
      if (!isBinding) break

    default:
      this.raise(node.start, "Assigning to rvalue")
    }
  }
  return node
}

// Convert list of expression atoms to binding list.

pp$2.toAssignableList = function(exprList, isBinding) {
  var this$1 = this;

  var end = exprList.length
  if (end) {
    var last = exprList[end - 1]
    if (last && last.type == "RestElement") {
      --end
    } else if (last && last.type == "SpreadElement") {
      last.type = "RestElement"
      var arg = last.argument
      this.toAssignable(arg, isBinding)
      if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern")
        this.unexpected(arg.start)
      --end
    }

    if (isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")
      this.unexpected(last.argument.start)
  }
  for (var i = 0; i < end; i++) {
    var elt = exprList[i]
    if (elt) this$1.toAssignable(elt, isBinding)
  }
  return exprList
}

// Parses spread element.

pp$2.parseSpread = function(refDestructuringErrors) {
  var node = this.startNode()
  this.next()
  node.argument = this.parseMaybeAssign(false, refDestructuringErrors)
  return this.finishNode(node, "SpreadElement")
}

pp$2.parseRest = function(allowNonIdent) {
  var node = this.startNode()
  this.next()

  // RestElement inside of a function parameter must be an identifier
  if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected()
  else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()

  return this.finishNode(node, "RestElement")
}

// Parses lvalue (assignable) atom.

pp$2.parseBindingAtom = function() {
  if (this.options.ecmaVersion < 6) return this.parseIdent()
  switch (this.type) {
  case tt.name:
    return this.parseIdent()

  case tt.bracketL:
    var node = this.startNode()
    this.next()
    node.elements = this.parseBindingList(tt.bracketR, true, true)
    return this.finishNode(node, "ArrayPattern")

  case tt.braceL:
    return this.parseObj(true)

  default:
    this.unexpected()
  }
}

pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {
  var this$1 = this;

  var elts = [], first = true
  while (!this.eat(close)) {
    if (first) first = false
    else this$1.expect(tt.comma)
    if (allowEmpty && this$1.type === tt.comma) {
      elts.push(null)
    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {
      break
    } else if (this$1.type === tt.ellipsis) {
      var rest = this$1.parseRest(allowNonIdent)
      this$1.parseBindingListItem(rest)
      elts.push(rest)
      if (this$1.type === tt.comma) this$1.raise(this$1.start, "Comma is not permitted after the rest element")
      this$1.expect(close)
      break
    } else {
      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc)
      this$1.parseBindingListItem(elem)
      elts.push(elem)
    }
  }
  return elts
}

pp$2.parseBindingListItem = function(param) {
  return param
}

// Parses assignment pattern around given atom if possible.

pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
  left = left || this.parseBindingAtom()
  if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left
  var node = this.startNodeAt(startPos, startLoc)
  node.left = left
  node.right = this.parseMaybeAssign()
  return this.finishNode(node, "AssignmentPattern")
}

// Verify that a node is an lval — something that can be assigned
// to.

pp$2.checkLVal = function(expr, isBinding, checkClashes) {
  var this$1 = this;

  switch (expr.type) {
  case "Identifier":
    if (this.strict && this.reservedWordsStrictBind.test(expr.name))
      this.raiseRecoverable(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode")
    if (checkClashes) {
      if (has(checkClashes, expr.name))
        this.raiseRecoverable(expr.start, "Argument name clash")
      checkClashes[expr.name] = true
    }
    break

  case "MemberExpression":
    if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression")
    break

  case "ObjectPattern":
    for (var i = 0; i < expr.properties.length; i++)
      this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes)
    break

  case "ArrayPattern":
    for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {
      var elem = expr.elements[i$1]
      if (elem) this$1.checkLVal(elem, isBinding, checkClashes)
    }
    break

  case "AssignmentPattern":
    this.checkLVal(expr.left, isBinding, checkClashes)
    break

  case "RestElement":
    this.checkLVal(expr.argument, isBinding, checkClashes)
    break

  case "ParenthesizedExpression":
    this.checkLVal(expr.expression, isBinding, checkClashes)
    break

  default:
    this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue")
  }
}

// A recursive descent parser operates by defining functions for all
// syntactic elements, and recursively calling those, each function
// advancing the input stream and returning an AST node. Precedence
// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
// instead of `(!x)[1]` is handled by the fact that the parser
// function that parses unary prefix operators is called first, and
// in turn calls the function that parses `[]` subscripts — that
// way, it'll receive the node for `x[1]` already parsed, and wraps
// *that* in the unary operator node.
//
// Acorn uses an [operator precedence parser][opp] to handle binary
// operator precedence, because it is much more compact than using
// the technique outlined above, which uses different, nesting
// functions to specify precedence, for all of the ten binary
// precedence levels that JavaScript defines.
//
// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

var pp$3 = Parser.prototype

// Check if property name clashes with already added.
// Object/class getters and setters are not allowed to clash —
// either with each other or with an init property — and in
// strict mode, init properties are also not allowed to be repeated.

pp$3.checkPropClash = function(prop, propHash) {
  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
    return
  var key = prop.key;
  var name
  switch (key.type) {
  case "Identifier": name = key.name; break
  case "Literal": name = String(key.value); break
  default: return
  }
  var kind = prop.kind;
  if (this.options.ecmaVersion >= 6) {
    if (name === "__proto__" && kind === "init") {
      if (propHash.proto) this.raiseRecoverable(key.start, "Redefinition of __proto__ property")
      propHash.proto = true
    }
    return
  }
  name = "$" + name
  var other = propHash[name]
  if (other) {
    var isGetSet = kind !== "init"
    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))
      this.raiseRecoverable(key.start, "Redefinition of property")
  } else {
    other = propHash[name] = {
      init: false,
      get: false,
      set: false
    }
  }
  other[kind] = true
}

// ### Expression parsing

// These nest, from the most general expression type at the top to
// 'atomic', nondivisible expression types at the bottom. Most of
// the functions will simply let the function(s) below them parse,
// and, *if* the syntactic construct they handle is present, wrap
// the AST node that the inner parser gave them in another node.

// Parse a full expression. The optional arguments are used to
// forbid the `in` operator (in for loops initalization expressions)
// and provide reference for storing '=' operator inside shorthand
// property assignment in contexts where both object expression
// and object pattern might appear (so it's possible to raise
// delayed syntax error at correct position).

pp$3.parseExpression = function(noIn, refDestructuringErrors) {
  var this$1 = this;

  var startPos = this.start, startLoc = this.startLoc
  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors)
  if (this.type === tt.comma) {
    var node = this.startNodeAt(startPos, startLoc)
    node.expressions = [expr]
    while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors))
    return this.finishNode(node, "SequenceExpression")
  }
  return expr
}

// Parse an assignment expression. This includes applications of
// operators like `+=`.

pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {
  if (this.inGenerator && this.isContextual("yield")) return this.parseYield()

  var ownDestructuringErrors = false, oldParenAssign = -1
  if (refDestructuringErrors) {
    oldParenAssign = refDestructuringErrors.parenthesizedAssign
    refDestructuringErrors.parenthesizedAssign = -1
  } else {
    refDestructuringErrors = new DestructuringErrors
    ownDestructuringErrors = true
  }

  var startPos = this.start, startLoc = this.startLoc
  if (this.type == tt.parenL || this.type == tt.name)
    this.potentialArrowAt = this.start
  var left = this.parseMaybeConditional(noIn, refDestructuringErrors)
  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc)
  if (this.type.isAssign) {
    this.checkPatternErrors(refDestructuringErrors, true)
    if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors)
    var node = this.startNodeAt(startPos, startLoc)
    node.operator = this.value
    node.left = this.type === tt.eq ? this.toAssignable(left) : left
    refDestructuringErrors.shorthandAssign = -1 // reset because shorthand default was used correctly
    this.checkLVal(left)
    this.next()
    node.right = this.parseMaybeAssign(noIn)
    return this.finishNode(node, "AssignmentExpression")
  } else {
    if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true)
  }
  if (oldParenAssign > -1) refDestructuringErrors.parenthesizedAssign = oldParenAssign
  return left
}

// Parse a ternary conditional (`?:`) operator.

pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc
  var expr = this.parseExprOps(noIn, refDestructuringErrors)
  if (this.checkExpressionErrors(refDestructuringErrors)) return expr
  if (this.eat(tt.question)) {
    var node = this.startNodeAt(startPos, startLoc)
    node.test = expr
    node.consequent = this.parseMaybeAssign()
    this.expect(tt.colon)
    node.alternate = this.parseMaybeAssign(noIn)
    return this.finishNode(node, "ConditionalExpression")
  }
  return expr
}

// Start the precedence parser.

pp$3.parseExprOps = function(noIn, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc
  var expr = this.parseMaybeUnary(refDestructuringErrors, false)
  if (this.checkExpressionErrors(refDestructuringErrors)) return expr
  return this.parseExprOp(expr, startPos, startLoc, -1, noIn)
}

// Parse binary operators with the operator precedence parsing
// algorithm. `left` is the left-hand side of the operator.
// `minPrec` provides context that allows the function to stop and
// defer further parser to one of its callers when it encounters an
// operator that has a lower precedence than the set it is parsing.

pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
  var prec = this.type.binop
  if (prec != null && (!noIn || this.type !== tt._in)) {
    if (prec > minPrec) {
      var logical = this.type === tt.logicalOR || this.type === tt.logicalAND
      var op = this.value
      this.next()
      var startPos = this.start, startLoc = this.startLoc
      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn)
      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical)
      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)
    }
  }
  return left
}

pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {
  var node = this.startNodeAt(startPos, startLoc)
  node.left = left
  node.operator = op
  node.right = right
  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
}

// Parse unary operators, both prefix and postfix.

pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {
  var this$1 = this;

  var startPos = this.start, startLoc = this.startLoc, expr
  if (this.inAsync && this.isContextual("await")) {
    expr = this.parseAwait(refDestructuringErrors)
    sawUnary = true
  } else if (this.type.prefix) {
    var node = this.startNode(), update = this.type === tt.incDec
    node.operator = this.value
    node.prefix = true
    this.next()
    node.argument = this.parseMaybeUnary(null, true)
    this.checkExpressionErrors(refDestructuringErrors, true)
    if (update) this.checkLVal(node.argument)
    else if (this.strict && node.operator === "delete" &&
             node.argument.type === "Identifier")
      this.raiseRecoverable(node.start, "Deleting local variable in strict mode")
    else sawUnary = true
    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression")
  } else {
    expr = this.parseExprSubscripts(refDestructuringErrors)
    if (this.checkExpressionErrors(refDestructuringErrors)) return expr
    while (this.type.postfix && !this.canInsertSemicolon()) {
      var node$1 = this$1.startNodeAt(startPos, startLoc)
      node$1.operator = this$1.value
      node$1.prefix = false
      node$1.argument = expr
      this$1.checkLVal(expr)
      this$1.next()
      expr = this$1.finishNode(node$1, "UpdateExpression")
    }
  }

  if (!sawUnary && this.eat(tt.starstar))
    return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false)
  else
    return expr
}

// Parse call, dot, and `[]`-subscript expressions.

pp$3.parseExprSubscripts = function(refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc
  var expr = this.parseExprAtom(refDestructuringErrors)
  var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")"
  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr
  var result = this.parseSubscripts(expr, startPos, startLoc)
  if (refDestructuringErrors && result.type === "MemberExpression") {
    if (refDestructuringErrors.parenthesizedAssign >= result.start) refDestructuringErrors.parenthesizedAssign = -1
    if (refDestructuringErrors.parenthesizedBind >= result.start) refDestructuringErrors.parenthesizedBind = -1
  }
  return result
}

pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {
  var this$1 = this;

  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" &&
      this.lastTokEnd == base.end && !this.canInsertSemicolon()
  for (var computed;;) {
    if ((computed = this$1.eat(tt.bracketL)) || this$1.eat(tt.dot)) {
      var node = this$1.startNodeAt(startPos, startLoc)
      node.object = base
      node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true)
      node.computed = !!computed
      if (computed) this$1.expect(tt.bracketR)
      base = this$1.finishNode(node, "MemberExpression")
    } else if (!noCalls && this$1.eat(tt.parenL)) {
      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos
      this$1.yieldPos = 0
      this$1.awaitPos = 0
      var exprList = this$1.parseExprList(tt.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors)
      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(tt.arrow)) {
        this$1.checkPatternErrors(refDestructuringErrors, false)
        this$1.checkYieldAwaitInDefaultParams()
        this$1.yieldPos = oldYieldPos
        this$1.awaitPos = oldAwaitPos
        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)
      }
      this$1.checkExpressionErrors(refDestructuringErrors, true)
      this$1.yieldPos = oldYieldPos || this$1.yieldPos
      this$1.awaitPos = oldAwaitPos || this$1.awaitPos
      var node$1 = this$1.startNodeAt(startPos, startLoc)
      node$1.callee = base
      node$1.arguments = exprList
      base = this$1.finishNode(node$1, "CallExpression")
    } else if (this$1.type === tt.backQuote) {
      var node$2 = this$1.startNodeAt(startPos, startLoc)
      node$2.tag = base
      node$2.quasi = this$1.parseTemplate()
      base = this$1.finishNode(node$2, "TaggedTemplateExpression")
    } else {
      return base
    }
  }
}

// Parse an atomic expression — either a single token that is an
// expression, an expression started by a keyword like `function` or
// `new`, or an expression wrapped in punctuation like `()`, `[]`,
// or `{}`.

pp$3.parseExprAtom = function(refDestructuringErrors) {
  var node, canBeArrow = this.potentialArrowAt == this.start
  switch (this.type) {
  case tt._super:
    if (!this.inFunction)
      this.raise(this.start, "'super' outside of function or class")

  case tt._this:
    var type = this.type === tt._this ? "ThisExpression" : "Super"
    node = this.startNode()
    this.next()
    return this.finishNode(node, type)

  case tt.name:
    var startPos = this.start, startLoc = this.startLoc
    var id = this.parseIdent(this.type !== tt.name)
    if (this.options.ecmaVersion >= 8 && id.name === "async" && !this.canInsertSemicolon() && this.eat(tt._function))
      return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true)
    if (canBeArrow && !this.canInsertSemicolon()) {
      if (this.eat(tt.arrow))
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false)
      if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === tt.name) {
        id = this.parseIdent()
        if (this.canInsertSemicolon() || !this.eat(tt.arrow))
          this.unexpected()
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)
      }
    }
    return id

  case tt.regexp:
    var value = this.value
    node = this.parseLiteral(value.value)
    node.regex = {pattern: value.pattern, flags: value.flags}
    return node

  case tt.num: case tt.string:
    return this.parseLiteral(this.value)

  case tt._null: case tt._true: case tt._false:
    node = this.startNode()
    node.value = this.type === tt._null ? null : this.type === tt._true
    node.raw = this.type.keyword
    this.next()
    return this.finishNode(node, "Literal")

  case tt.parenL:
    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow)
    if (refDestructuringErrors) {
      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))
        refDestructuringErrors.parenthesizedAssign = start
      if (refDestructuringErrors.parenthesizedBind < 0)
        refDestructuringErrors.parenthesizedBind = start
    }
    return expr

  case tt.bracketL:
    node = this.startNode()
    this.next()
    node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors)
    return this.finishNode(node, "ArrayExpression")

  case tt.braceL:
    return this.parseObj(false, refDestructuringErrors)

  case tt._function:
    node = this.startNode()
    this.next()
    return this.parseFunction(node, false)

  case tt._class:
    return this.parseClass(this.startNode(), false)

  case tt._new:
    return this.parseNew()

  case tt.backQuote:
    return this.parseTemplate()

  default:
    this.unexpected()
  }
}

pp$3.parseLiteral = function(value) {
  var node = this.startNode()
  node.value = value
  node.raw = this.input.slice(this.start, this.end)
  this.next()
  return this.finishNode(node, "Literal")
}

pp$3.parseParenExpression = function() {
  this.expect(tt.parenL)
  var val = this.parseExpression()
  this.expect(tt.parenR)
  return val
}

pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {
  var this$1 = this;

  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8
  if (this.options.ecmaVersion >= 6) {
    this.next()

    var innerStartPos = this.start, innerStartLoc = this.startLoc
    var exprList = [], first = true, lastIsComma = false
    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart, innerParenStart
    this.yieldPos = 0
    this.awaitPos = 0
    while (this.type !== tt.parenR) {
      first ? first = false : this$1.expect(tt.comma)
      if (allowTrailingComma && this$1.afterTrailingComma(tt.parenR, true)) {
        lastIsComma = true
        break
      } else if (this$1.type === tt.ellipsis) {
        spreadStart = this$1.start
        exprList.push(this$1.parseParenItem(this$1.parseRest()))
        if (this$1.type === tt.comma) this$1.raise(this$1.start, "Comma is not permitted after the rest element")
        break
      } else {
        if (this$1.type === tt.parenL && !innerParenStart) {
          innerParenStart = this$1.start
        }
        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem))
      }
    }
    var innerEndPos = this.start, innerEndLoc = this.startLoc
    this.expect(tt.parenR)

    if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {
      this.checkPatternErrors(refDestructuringErrors, false)
      this.checkYieldAwaitInDefaultParams()
      if (innerParenStart) this.unexpected(innerParenStart)
      this.yieldPos = oldYieldPos
      this.awaitPos = oldAwaitPos
      return this.parseParenArrowList(startPos, startLoc, exprList)
    }

    if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart)
    if (spreadStart) this.unexpected(spreadStart)
    this.checkExpressionErrors(refDestructuringErrors, true)
    this.yieldPos = oldYieldPos || this.yieldPos
    this.awaitPos = oldAwaitPos || this.awaitPos

    if (exprList.length > 1) {
      val = this.startNodeAt(innerStartPos, innerStartLoc)
      val.expressions = exprList
      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)
    } else {
      val = exprList[0]
    }
  } else {
    val = this.parseParenExpression()
  }

  if (this.options.preserveParens) {
    var par = this.startNodeAt(startPos, startLoc)
    par.expression = val
    return this.finishNode(par, "ParenthesizedExpression")
  } else {
    return val
  }
}

pp$3.parseParenItem = function(item) {
  return item
}

pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {
  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)
}

// New's precedence is slightly tricky. It must allow its argument to
// be a `[]` or dot subscript expression, but not a call — at least,
// not without wrapping it in parentheses. Thus, it uses the noCalls
// argument to parseSubscripts to prevent it from consuming the
// argument list.

var empty$1 = []

pp$3.parseNew = function() {
  var node = this.startNode()
  var meta = this.parseIdent(true)
  if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {
    node.meta = meta
    node.property = this.parseIdent(true)
    if (node.property.name !== "target")
      this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target")
    if (!this.inFunction)
      this.raiseRecoverable(node.start, "new.target can only be used in functions")
    return this.finishNode(node, "MetaProperty")
  }
  var startPos = this.start, startLoc = this.startLoc
  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true)
  if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, this.options.ecmaVersion >= 8, false)
  else node.arguments = empty$1
  return this.finishNode(node, "NewExpression")
}

// Parse template expression.

pp$3.parseTemplateElement = function() {
  var elem = this.startNode()
  elem.value = {
    raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, '\n'),
    cooked: this.value
  }
  this.next()
  elem.tail = this.type === tt.backQuote
  return this.finishNode(elem, "TemplateElement")
}

pp$3.parseTemplate = function() {
  var this$1 = this;

  var node = this.startNode()
  this.next()
  node.expressions = []
  var curElt = this.parseTemplateElement()
  node.quasis = [curElt]
  while (!curElt.tail) {
    this$1.expect(tt.dollarBraceL)
    node.expressions.push(this$1.parseExpression())
    this$1.expect(tt.braceR)
    node.quasis.push(curElt = this$1.parseTemplateElement())
  }
  this.next()
  return this.finishNode(node, "TemplateLiteral")
}

// Parse an object literal or binding pattern.

pp$3.parseObj = function(isPattern, refDestructuringErrors) {
  var this$1 = this;

  var node = this.startNode(), first = true, propHash = {}
  node.properties = []
  this.next()
  while (!this.eat(tt.braceR)) {
    if (!first) {
      this$1.expect(tt.comma)
      if (this$1.afterTrailingComma(tt.braceR)) break
    } else first = false

    var prop = this$1.startNode(), isGenerator, isAsync, startPos, startLoc
    if (this$1.options.ecmaVersion >= 6) {
      prop.method = false
      prop.shorthand = false
      if (isPattern || refDestructuringErrors) {
        startPos = this$1.start
        startLoc = this$1.startLoc
      }
      if (!isPattern)
        isGenerator = this$1.eat(tt.star)
    }
    this$1.parsePropertyName(prop)
    if (!isPattern && this$1.options.ecmaVersion >= 8 && !isGenerator && !prop.computed &&
        prop.key.type === "Identifier" && prop.key.name === "async" && this$1.type !== tt.parenL &&
        this$1.type !== tt.colon && !this$1.canInsertSemicolon()) {
      isAsync = true
      this$1.parsePropertyName(prop, refDestructuringErrors)
    } else {
      isAsync = false
    }
    this$1.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors)
    this$1.checkPropClash(prop, propHash)
    node.properties.push(this$1.finishNode(prop, "Property"))
  }
  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
}

pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors) {
  if ((isGenerator || isAsync) && this.type === tt.colon)
    this.unexpected()

  if (this.eat(tt.colon)) {
    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors)
    prop.kind = "init"
  } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {
    if (isPattern) this.unexpected()
    prop.kind = "init"
    prop.method = true
    prop.value = this.parseMethod(isGenerator, isAsync)
  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
             (prop.key.name === "get" || prop.key.name === "set") &&
             (this.type != tt.comma && this.type != tt.braceR)) {
    if (isGenerator || isAsync || isPattern) this.unexpected()
    prop.kind = prop.key.name
    this.parsePropertyName(prop)
    prop.value = this.parseMethod(false)
    var paramCount = prop.kind === "get" ? 0 : 1
    if (prop.value.params.length !== paramCount) {
      var start = prop.value.start
      if (prop.kind === "get")
        this.raiseRecoverable(start, "getter should have no params")
      else
        this.raiseRecoverable(start, "setter should have exactly one param")
    } else {
      if (prop.kind === "set" && prop.value.params[0].type === "RestElement")
        this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params")
    }
  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
    if (this.keywords.test(prop.key.name) ||
        (this.strict ? this.reservedWordsStrict : this.reservedWords).test(prop.key.name) ||
        (this.inGenerator && prop.key.name == "yield") ||
        (this.inAsync && prop.key.name == "await"))
      this.raiseRecoverable(prop.key.start, "'" + prop.key.name + "' can not be used as shorthand property")
    prop.kind = "init"
    if (isPattern) {
      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)
    } else if (this.type === tt.eq && refDestructuringErrors) {
      if (refDestructuringErrors.shorthandAssign < 0)
        refDestructuringErrors.shorthandAssign = this.start
      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)
    } else {
      prop.value = prop.key
    }
    prop.shorthand = true
  } else this.unexpected()
}

pp$3.parsePropertyName = function(prop) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat(tt.bracketL)) {
      prop.computed = true
      prop.key = this.parseMaybeAssign()
      this.expect(tt.bracketR)
      return prop.key
    } else {
      prop.computed = false
    }
  }
  return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true)
}

// Initialize empty function node.

pp$3.initFunction = function(node) {
  node.id = null
  if (this.options.ecmaVersion >= 6) {
    node.generator = false
    node.expression = false
  }
  if (this.options.ecmaVersion >= 8)
    node.async = false
}

// Parse object or class method.

pp$3.parseMethod = function(isGenerator, isAsync) {
  var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync,
      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction

  this.initFunction(node)
  if (this.options.ecmaVersion >= 6)
    node.generator = isGenerator
  if (this.options.ecmaVersion >= 8)
    node.async = !!isAsync

  this.inGenerator = node.generator
  this.inAsync = node.async
  this.yieldPos = 0
  this.awaitPos = 0
  this.inFunction = true

  this.expect(tt.parenL)
  node.params = this.parseBindingList(tt.parenR, false, this.options.ecmaVersion >= 8)
  this.checkYieldAwaitInDefaultParams()
  this.parseFunctionBody(node, false)

  this.inGenerator = oldInGen
  this.inAsync = oldInAsync
  this.yieldPos = oldYieldPos
  this.awaitPos = oldAwaitPos
  this.inFunction = oldInFunc
  return this.finishNode(node, "FunctionExpression")
}

// Parse arrow function expression with given parameters.

pp$3.parseArrowExpression = function(node, params, isAsync) {
  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,
      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction

  this.initFunction(node)
  if (this.options.ecmaVersion >= 8)
    node.async = !!isAsync

  this.inGenerator = false
  this.inAsync = node.async
  this.yieldPos = 0
  this.awaitPos = 0
  this.inFunction = true

  node.params = this.toAssignableList(params, true)
  this.parseFunctionBody(node, true)

  this.inGenerator = oldInGen
  this.inAsync = oldInAsync
  this.yieldPos = oldYieldPos
  this.awaitPos = oldAwaitPos
  this.inFunction = oldInFunc
  return this.finishNode(node, "ArrowFunctionExpression")
}

// Parse function body and check parameters.

pp$3.parseFunctionBody = function(node, isArrowFunction) {
  var isExpression = isArrowFunction && this.type !== tt.braceL
  var oldStrict = this.strict, useStrict = false

  if (isExpression) {
    node.body = this.parseMaybeAssign()
    node.expression = true
  } else {
    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params)
    if (!oldStrict || nonSimple) {
      useStrict = this.strictDirective(this.end)
      // If this is a strict mode function, verify that argument names
      // are not repeated, and it does not try to bind the words `eval`
      // or `arguments`.
      if (useStrict && nonSimple)
        this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list")
    }
    // Start a new scope with regard to labels and the `inFunction`
    // flag (restore them to their old value afterwards).
    var oldLabels = this.labels
    this.labels = []
    if (useStrict) this.strict = true
    node.body = this.parseBlock(true)
    node.expression = false
    this.labels = oldLabels
  }

  if (oldStrict || useStrict) {
    this.strict = true
    if (node.id)
      this.checkLVal(node.id, true)
    this.checkParams(node)
    this.strict = oldStrict
  } else if (isArrowFunction || !this.isSimpleParamList(node.params)) {
    this.checkParams(node)
  }
}

pp$3.isSimpleParamList = function(params) {
  for (var i = 0; i < params.length; i++)
    if (params[i].type !== "Identifier") return false
  return true
}

// Checks function params for various disallowed patterns such as using "eval"
// or "arguments" and duplicate parameters.

pp$3.checkParams = function(node) {
  var this$1 = this;

  var nameHash = {}
  for (var i = 0; i < node.params.length; i++) this$1.checkLVal(node.params[i], true, nameHash)
}

// Parses a comma-separated list of expressions, and returns them as
// an array. `close` is the token type that ends the list, and
// `allowEmpty` can be turned on to allow subsequent commas with
// nothing in between them to be parsed as `null` (which is needed
// for array literals).

pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
  var this$1 = this;

  var elts = [], first = true
  while (!this.eat(close)) {
    if (!first) {
      this$1.expect(tt.comma)
      if (allowTrailingComma && this$1.afterTrailingComma(close)) break
    } else first = false

    var elt
    if (allowEmpty && this$1.type === tt.comma)
      elt = null
    else if (this$1.type === tt.ellipsis) {
      elt = this$1.parseSpread(refDestructuringErrors)
      if (refDestructuringErrors && this$1.type === tt.comma && refDestructuringErrors.trailingComma < 0)
        refDestructuringErrors.trailingComma = this$1.start
    } else {
      elt = this$1.parseMaybeAssign(false, refDestructuringErrors)
    }
    elts.push(elt)
  }
  return elts
}

// Parse the next token as an identifier. If `liberal` is true (used
// when parsing properties), it will also convert keywords into
// identifiers.

pp$3.parseIdent = function(liberal) {
  var node = this.startNode()
  if (liberal && this.options.allowReserved == "never") liberal = false
  if (this.type === tt.name) {
    if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&
        (this.options.ecmaVersion >= 6 ||
         this.input.slice(this.start, this.end).indexOf("\\") == -1))
      this.raiseRecoverable(this.start, "The keyword '" + this.value + "' is reserved")
    if (this.inGenerator && this.value === "yield")
      this.raiseRecoverable(this.start, "Can not use 'yield' as identifier inside a generator")
    if (this.inAsync && this.value === "await")
      this.raiseRecoverable(this.start, "Can not use 'await' as identifier inside an async function")
    node.name = this.value
  } else if (liberal && this.type.keyword) {
    node.name = this.type.keyword
  } else {
    this.unexpected()
  }
  this.next()
  return this.finishNode(node, "Identifier")
}

// Parses yield expression inside generator.

pp$3.parseYield = function() {
  if (!this.yieldPos) this.yieldPos = this.start

  var node = this.startNode()
  this.next()
  if (this.type == tt.semi || this.canInsertSemicolon() || (this.type != tt.star && !this.type.startsExpr)) {
    node.delegate = false
    node.argument = null
  } else {
    node.delegate = this.eat(tt.star)
    node.argument = this.parseMaybeAssign()
  }
  return this.finishNode(node, "YieldExpression")
}

pp$3.parseAwait = function() {
  if (!this.awaitPos) this.awaitPos = this.start

  var node = this.startNode()
  this.next()
  node.argument = this.parseMaybeUnary(null, true)
  return this.finishNode(node, "AwaitExpression")
}

var pp$4 = Parser.prototype

// This function is used to raise exceptions on parse errors. It
// takes an offset integer (into the current `input`) to indicate
// the location of the error, attaches the position to the end
// of the error message, and then raises a `SyntaxError` with that
// message.

pp$4.raise = function(pos, message) {
  var loc = getLineInfo(this.input, pos)
  message += " (" + loc.line + ":" + loc.column + ")"
  var err = new SyntaxError(message)
  err.pos = pos; err.loc = loc; err.raisedAt = this.pos
  throw err
}

pp$4.raiseRecoverable = pp$4.raise

pp$4.curPosition = function() {
  if (this.options.locations) {
    return new Position(this.curLine, this.pos - this.lineStart)
  }
}

var Node = function Node(parser, pos, loc) {
  this.type = ""
  this.start = pos
  this.end = 0
  if (parser.options.locations)
    this.loc = new SourceLocation(parser, loc)
  if (parser.options.directSourceFile)
    this.sourceFile = parser.options.directSourceFile
  if (parser.options.ranges)
    this.range = [pos, 0]
};

// Start an AST node, attaching a start offset.

var pp$5 = Parser.prototype

pp$5.startNode = function() {
  return new Node(this, this.start, this.startLoc)
}

pp$5.startNodeAt = function(pos, loc) {
  return new Node(this, pos, loc)
}

// Finish an AST node, adding `type` and `end` properties.

function finishNodeAt(node, type, pos, loc) {
  node.type = type
  node.end = pos
  if (this.options.locations)
    node.loc.end = loc
  if (this.options.ranges)
    node.range[1] = pos
  return node
}

pp$5.finishNode = function(node, type) {
  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
}

// Finish node at given position

pp$5.finishNodeAt = function(node, type, pos, loc) {
  return finishNodeAt.call(this, node, type, pos, loc)
}

// The algorithm used to determine whether a regexp can appear at a
// given point in the program is loosely based on sweet.js' approach.
// See https://github.com/mozilla/sweet.js/wiki/design

var TokContext = function TokContext(token, isExpr, preserveSpace, override) {
  this.token = token
  this.isExpr = !!isExpr
  this.preserveSpace = !!preserveSpace
  this.override = override
};

var types = {
  b_stat: new TokContext("{", false),
  b_expr: new TokContext("{", true),
  b_tmpl: new TokContext("${", true),
  p_stat: new TokContext("(", false),
  p_expr: new TokContext("(", true),
  q_tmpl: new TokContext("`", true, true, function (p) { return p.readTmplToken(); }),
  f_expr: new TokContext("function", true)
}

var pp$6 = Parser.prototype

pp$6.initialContext = function() {
  return [types.b_stat]
}

pp$6.braceIsBlock = function(prevType) {
  if (prevType === tt.colon) {
    var parent = this.curContext()
    if (parent === types.b_stat || parent === types.b_expr)
      return !parent.isExpr
  }
  if (prevType === tt._return)
    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
  if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)
    return true
  if (prevType == tt.braceL)
    return this.curContext() === types.b_stat
  return !this.exprAllowed
}

pp$6.updateContext = function(prevType) {
  var update, type = this.type
  if (type.keyword && prevType == tt.dot)
    this.exprAllowed = false
  else if (update = type.updateContext)
    update.call(this, prevType)
  else
    this.exprAllowed = type.beforeExpr
}

// Token-specific context update code

tt.parenR.updateContext = tt.braceR.updateContext = function() {
  if (this.context.length == 1) {
    this.exprAllowed = true
    return
  }
  var out = this.context.pop()
  if (out === types.b_stat && this.curContext() === types.f_expr) {
    this.context.pop()
    this.exprAllowed = false
  } else if (out === types.b_tmpl) {
    this.exprAllowed = true
  } else {
    this.exprAllowed = !out.isExpr
  }
}

tt.braceL.updateContext = function(prevType) {
  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)
  this.exprAllowed = true
}

tt.dollarBraceL.updateContext = function() {
  this.context.push(types.b_tmpl)
  this.exprAllowed = true
}

tt.parenL.updateContext = function(prevType) {
  var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while
  this.context.push(statementParens ? types.p_stat : types.p_expr)
  this.exprAllowed = true
}

tt.incDec.updateContext = function() {
  // tokExprAllowed stays unchanged
}

tt._function.updateContext = function(prevType) {
  if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&
      !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))
    this.context.push(types.f_expr)
  this.exprAllowed = false
}

tt.backQuote.updateContext = function() {
  if (this.curContext() === types.q_tmpl)
    this.context.pop()
  else
    this.context.push(types.q_tmpl)
  this.exprAllowed = false
}

// Object type used to represent tokens. Note that normally, tokens
// simply exist as properties on the parser object. This is only
// used for the onToken callback and the external tokenizer.

var Token = function Token(p) {
  this.type = p.type
  this.value = p.value
  this.start = p.start
  this.end = p.end
  if (p.options.locations)
    this.loc = new SourceLocation(p, p.startLoc, p.endLoc)
  if (p.options.ranges)
    this.range = [p.start, p.end]
};

// ## Tokenizer

var pp$7 = Parser.prototype

// Are we running under Rhino?
var isRhino = typeof Packages == "object" && Object.prototype.toString.call(Packages) == "[object JavaPackage]"

// Move to the next token

pp$7.next = function() {
  if (this.options.onToken)
    this.options.onToken(new Token(this))

  this.lastTokEnd = this.end
  this.lastTokStart = this.start
  this.lastTokEndLoc = this.endLoc
  this.lastTokStartLoc = this.startLoc
  this.nextToken()
}

pp$7.getToken = function() {
  this.next()
  return new Token(this)
}

// If we're in an ES6 environment, make parsers iterable
if (typeof Symbol !== "undefined")
  pp$7[Symbol.iterator] = function () {
    var self = this
    return {next: function () {
      var token = self.getToken()
      return {
        done: token.type === tt.eof,
        value: token
      }
    }}
  }

// Toggle strict mode. Re-reads the next number or string to please
// pedantic tests (`"use strict"; 010;` should fail).

pp$7.curContext = function() {
  return this.context[this.context.length - 1]
}

// Read a single token, updating the parser object's token-related
// properties.

pp$7.nextToken = function() {
  var curContext = this.curContext()
  if (!curContext || !curContext.preserveSpace) this.skipSpace()

  this.start = this.pos
  if (this.options.locations) this.startLoc = this.curPosition()
  if (this.pos >= this.input.length) return this.finishToken(tt.eof)

  if (curContext.override) return curContext.override(this)
  else this.readToken(this.fullCharCodeAtPos())
}

pp$7.readToken = function(code) {
  // Identifier or keyword. '\uXXXX' sequences are allowed in
  // identifiers, so '\' also dispatches to that.
  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */)
    return this.readWord()

  return this.getTokenFromCode(code)
}

pp$7.fullCharCodeAtPos = function() {
  var code = this.input.charCodeAt(this.pos)
  if (code <= 0xd7ff || code >= 0xe000) return code
  var next = this.input.charCodeAt(this.pos + 1)
  return (code << 10) + next - 0x35fdc00
}

pp$7.skipBlockComment = function() {
  var this$1 = this;

  var startLoc = this.options.onComment && this.curPosition()
  var start = this.pos, end = this.input.indexOf("*/", this.pos += 2)
  if (end === -1) this.raise(this.pos - 2, "Unterminated comment")
  this.pos = end + 2
  if (this.options.locations) {
    lineBreakG.lastIndex = start
    var match
    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
      ++this$1.curLine
      this$1.lineStart = match.index + match[0].length
    }
  }
  if (this.options.onComment)
    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,
                           startLoc, this.curPosition())
}

pp$7.skipLineComment = function(startSkip) {
  var this$1 = this;

  var start = this.pos
  var startLoc = this.options.onComment && this.curPosition()
  var ch = this.input.charCodeAt(this.pos+=startSkip)
  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
    ++this$1.pos
    ch = this$1.input.charCodeAt(this$1.pos)
  }
  if (this.options.onComment)
    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,
                           startLoc, this.curPosition())
}

// Called at the start of the parse and after every token. Skips
// whitespace and comments, and.

pp$7.skipSpace = function() {
  var this$1 = this;

  loop: while (this.pos < this.input.length) {
    var ch = this$1.input.charCodeAt(this$1.pos)
    switch (ch) {
      case 32: case 160: // ' '
        ++this$1.pos
        break
      case 13:
        if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {
          ++this$1.pos
        }
      case 10: case 8232: case 8233:
        ++this$1.pos
        if (this$1.options.locations) {
          ++this$1.curLine
          this$1.lineStart = this$1.pos
        }
        break
      case 47: // '/'
        switch (this$1.input.charCodeAt(this$1.pos + 1)) {
          case 42: // '*'
            this$1.skipBlockComment()
            break
          case 47:
            this$1.skipLineComment(2)
            break
          default:
            break loop
        }
        break
      default:
        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
          ++this$1.pos
        } else {
          break loop
        }
    }
  }
}

// Called at the end of every token. Sets `end`, `val`, and
// maintains `context` and `exprAllowed`, and skips the space after
// the token, so that the next one's `start` will point at the
// right position.

pp$7.finishToken = function(type, val) {
  this.end = this.pos
  if (this.options.locations) this.endLoc = this.curPosition()
  var prevType = this.type
  this.type = type
  this.value = val

  this.updateContext(prevType)
}

// ### Token reading

// This is the function that is called to fetch the next token. It
// is somewhat obscure, because it works in character codes rather
// than characters, and because operator parsing has been inlined
// into it.
//
// All in the name of speed.
//
pp$7.readToken_dot = function() {
  var next = this.input.charCodeAt(this.pos + 1)
  if (next >= 48 && next <= 57) return this.readNumber(true)
  var next2 = this.input.charCodeAt(this.pos + 2)
  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'
    this.pos += 3
    return this.finishToken(tt.ellipsis)
  } else {
    ++this.pos
    return this.finishToken(tt.dot)
  }
}

pp$7.readToken_slash = function() { // '/'
  var next = this.input.charCodeAt(this.pos + 1)
  if (this.exprAllowed) {++this.pos; return this.readRegexp()}
  if (next === 61) return this.finishOp(tt.assign, 2)
  return this.finishOp(tt.slash, 1)
}

pp$7.readToken_mult_modulo_exp = function(code) { // '%*'
  var next = this.input.charCodeAt(this.pos + 1)
  var size = 1
  var tokentype = code === 42 ? tt.star : tt.modulo

  // exponentiation operator ** and **=
  if (this.options.ecmaVersion >= 7 && next === 42) {
    ++size
    tokentype = tt.starstar
    next = this.input.charCodeAt(this.pos + 2)
  }

  if (next === 61) return this.finishOp(tt.assign, size + 1)
  return this.finishOp(tokentype, size)
}

pp$7.readToken_pipe_amp = function(code) { // '|&'
  var next = this.input.charCodeAt(this.pos + 1)
  if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)
  if (next === 61) return this.finishOp(tt.assign, 2)
  return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)
}

pp$7.readToken_caret = function() { // '^'
  var next = this.input.charCodeAt(this.pos + 1)
  if (next === 61) return this.finishOp(tt.assign, 2)
  return this.finishOp(tt.bitwiseXOR, 1)
}

pp$7.readToken_plus_min = function(code) { // '+-'
  var next = this.input.charCodeAt(this.pos + 1)
  if (next === code) {
    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&
        lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {
      // A `-->` line comment
      this.skipLineComment(3)
      this.skipSpace()
      return this.nextToken()
    }
    return this.finishOp(tt.incDec, 2)
  }
  if (next === 61) return this.finishOp(tt.assign, 2)
  return this.finishOp(tt.plusMin, 1)
}

pp$7.readToken_lt_gt = function(code) { // '<>'
  var next = this.input.charCodeAt(this.pos + 1)
  var size = 1
  if (next === code) {
    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2
    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)
    return this.finishOp(tt.bitShift, size)
  }
  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&
      this.input.charCodeAt(this.pos + 3) == 45) {
    if (this.inModule) this.unexpected()
    // `<!--`, an XML-style comment that should be interpreted as a line comment
    this.skipLineComment(4)
    this.skipSpace()
    return this.nextToken()
  }
  if (next === 61) size = 2
  return this.finishOp(tt.relational, size)
}

pp$7.readToken_eq_excl = function(code) { // '=!'
  var next = this.input.charCodeAt(this.pos + 1)
  if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)
  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'
    this.pos += 2
    return this.finishToken(tt.arrow)
  }
  return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)
}

pp$7.getTokenFromCode = function(code) {
  switch (code) {
    // The interpretation of a dot depends on whether it is followed
    // by a digit or another two dots.
  case 46: // '.'
    return this.readToken_dot()

    // Punctuation tokens.
  case 40: ++this.pos; return this.finishToken(tt.parenL)
  case 41: ++this.pos; return this.finishToken(tt.parenR)
  case 59: ++this.pos; return this.finishToken(tt.semi)
  case 44: ++this.pos; return this.finishToken(tt.comma)
  case 91: ++this.pos; return this.finishToken(tt.bracketL)
  case 93: ++this.pos; return this.finishToken(tt.bracketR)
  case 123: ++this.pos; return this.finishToken(tt.braceL)
  case 125: ++this.pos; return this.finishToken(tt.braceR)
  case 58: ++this.pos; return this.finishToken(tt.colon)
  case 63: ++this.pos; return this.finishToken(tt.question)

  case 96: // '`'
    if (this.options.ecmaVersion < 6) break
    ++this.pos
    return this.finishToken(tt.backQuote)

  case 48: // '0'
    var next = this.input.charCodeAt(this.pos + 1)
    if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number
    if (this.options.ecmaVersion >= 6) {
      if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number
      if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number
    }
    // Anything else beginning with a digit is an integer, octal
    // number, or float.
  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
    return this.readNumber(false)

    // Quotes produce strings.
  case 34: case 39: // '"', "'"
    return this.readString(code)

    // Operators are parsed inline in tiny state machines. '=' (61) is
    // often referred to. `finishOp` simply skips the amount of
    // characters it is given as second argument, and returns a token
    // of the type given by its first argument.

  case 47: // '/'
    return this.readToken_slash()

  case 37: case 42: // '%*'
    return this.readToken_mult_modulo_exp(code)

  case 124: case 38: // '|&'
    return this.readToken_pipe_amp(code)

  case 94: // '^'
    return this.readToken_caret()

  case 43: case 45: // '+-'
    return this.readToken_plus_min(code)

  case 60: case 62: // '<>'
    return this.readToken_lt_gt(code)

  case 61: case 33: // '=!'
    return this.readToken_eq_excl(code)

  case 126: // '~'
    return this.finishOp(tt.prefix, 1)
  }

  this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'")
}

pp$7.finishOp = function(type, size) {
  var str = this.input.slice(this.pos, this.pos + size)
  this.pos += size
  return this.finishToken(type, str)
}

// Parse a regular expression. Some context-awareness is necessary,
// since a '/' inside a '[]' set does not end the expression.

function tryCreateRegexp(src, flags, throwErrorAt, parser) {
  try {
    return new RegExp(src, flags)
  } catch (e) {
    if (throwErrorAt !== undefined) {
      if (e instanceof SyntaxError) parser.raise(throwErrorAt, "Error parsing regular expression: " + e.message)
      throw e
    }
  }
}

var regexpUnicodeSupport = !!tryCreateRegexp("\uffff", "u")

pp$7.readRegexp = function() {
  var this$1 = this;

  var escaped, inClass, start = this.pos
  for (;;) {
    if (this$1.pos >= this$1.input.length) this$1.raise(start, "Unterminated regular expression")
    var ch = this$1.input.charAt(this$1.pos)
    if (lineBreak.test(ch)) this$1.raise(start, "Unterminated regular expression")
    if (!escaped) {
      if (ch === "[") inClass = true
      else if (ch === "]" && inClass) inClass = false
      else if (ch === "/" && !inClass) break
      escaped = ch === "\\"
    } else escaped = false
    ++this$1.pos
  }
  var content = this.input.slice(start, this.pos)
  ++this.pos
  // Need to use `readWord1` because '\uXXXX' sequences are allowed
  // here (don't ask).
  var mods = this.readWord1()
  var tmp = content, tmpFlags = ""
  if (mods) {
    var validFlags = /^[gim]*$/
    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/
    if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag")
    if (mods.indexOf("u") >= 0) {
      if (regexpUnicodeSupport) {
        tmpFlags = "u"
      } else {
        // Replace each astral symbol and every Unicode escape sequence that
        // possibly represents an astral symbol or a paired surrogate with a
        // single ASCII symbol to avoid throwing on regular expressions that
        // are only valid in combination with the `/u` flag.
        // Note: replacing with the ASCII symbol `x` might cause false
        // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
        // perfectly valid pattern that is equivalent to `[a-b]`, but it would
        // be replaced by `[x-b]` which throws an error.
        tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (_match, code, offset) {
          code = Number("0x" + code)
          if (code > 0x10FFFF) this$1.raise(start + offset + 3, "Code point out of bounds")
          return "x"
        })
        tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x")
        tmpFlags = tmpFlags.replace("u", "")
      }
    }
  }
  // Detect invalid regular expressions.
  var value = null
  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,
  // so don't do detection if we are running under Rhino
  if (!isRhino) {
    tryCreateRegexp(tmp, tmpFlags, start, this)
    // Get a regular expression object for this pattern-flag pair, or `null` in
    // case the current environment doesn't support the flags it uses.
    value = tryCreateRegexp(content, mods)
  }
  return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})
}

// Read an integer in the given radix. Return null if zero digits
// were read, the integer value otherwise. When `len` is given, this
// will return `null` unless the integer has exactly `len` digits.

pp$7.readInt = function(radix, len) {
  var this$1 = this;

  var start = this.pos, total = 0
  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
    var code = this$1.input.charCodeAt(this$1.pos), val
    if (code >= 97) val = code - 97 + 10 // a
    else if (code >= 65) val = code - 65 + 10 // A
    else if (code >= 48 && code <= 57) val = code - 48 // 0-9
    else val = Infinity
    if (val >= radix) break
    ++this$1.pos
    total = total * radix + val
  }
  if (this.pos === start || len != null && this.pos - start !== len) return null

  return total
}

pp$7.readRadixNumber = function(radix) {
  this.pos += 2 // 0x
  var val = this.readInt(radix)
  if (val == null) this.raise(this.start + 2, "Expected number in radix " + radix)
  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number")
  return this.finishToken(tt.num, val)
}

// Read an integer, octal integer, or floating-point number.

pp$7.readNumber = function(startsWithDot) {
  var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48
  if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number")
  if (octal && this.pos == start + 1) octal = false
  var next = this.input.charCodeAt(this.pos)
  if (next === 46 && !octal) { // '.'
    ++this.pos
    this.readInt(10)
    isFloat = true
    next = this.input.charCodeAt(this.pos)
  }
  if ((next === 69 || next === 101) && !octal) { // 'eE'
    next = this.input.charCodeAt(++this.pos)
    if (next === 43 || next === 45) ++this.pos // '+-'
    if (this.readInt(10) === null) this.raise(start, "Invalid number")
    isFloat = true
  }
  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number")

  var str = this.input.slice(start, this.pos), val
  if (isFloat) val = parseFloat(str)
  else if (!octal || str.length === 1) val = parseInt(str, 10)
  else if (/[89]/.test(str) || this.strict) this.raise(start, "Invalid number")
  else val = parseInt(str, 8)
  return this.finishToken(tt.num, val)
}

// Read a string value, interpreting backslash-escapes.

pp$7.readCodePoint = function() {
  var ch = this.input.charCodeAt(this.pos), code

  if (ch === 123) {
    if (this.options.ecmaVersion < 6) this.unexpected()
    var codePos = ++this.pos
    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)
    ++this.pos
    if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds")
  } else {
    code = this.readHexChar(4)
  }
  return code
}

function codePointToString(code) {
  // UTF-16 Decoding
  if (code <= 0xFFFF) return String.fromCharCode(code)
  code -= 0x10000
  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)
}

pp$7.readString = function(quote) {
  var this$1 = this;

  var out = "", chunkStart = ++this.pos
  for (;;) {
    if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, "Unterminated string constant")
    var ch = this$1.input.charCodeAt(this$1.pos)
    if (ch === quote) break
    if (ch === 92) { // '\'
      out += this$1.input.slice(chunkStart, this$1.pos)
      out += this$1.readEscapedChar(false)
      chunkStart = this$1.pos
    } else {
      if (isNewLine(ch)) this$1.raise(this$1.start, "Unterminated string constant")
      ++this$1.pos
    }
  }
  out += this.input.slice(chunkStart, this.pos++)
  return this.finishToken(tt.string, out)
}

// Reads template string tokens.

pp$7.readTmplToken = function() {
  var this$1 = this;

  var out = "", chunkStart = this.pos
  for (;;) {
    if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, "Unterminated template")
    var ch = this$1.input.charCodeAt(this$1.pos)
    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'
      if (this$1.pos === this$1.start && this$1.type === tt.template) {
        if (ch === 36) {
          this$1.pos += 2
          return this$1.finishToken(tt.dollarBraceL)
        } else {
          ++this$1.pos
          return this$1.finishToken(tt.backQuote)
        }
      }
      out += this$1.input.slice(chunkStart, this$1.pos)
      return this$1.finishToken(tt.template, out)
    }
    if (ch === 92) { // '\'
      out += this$1.input.slice(chunkStart, this$1.pos)
      out += this$1.readEscapedChar(true)
      chunkStart = this$1.pos
    } else if (isNewLine(ch)) {
      out += this$1.input.slice(chunkStart, this$1.pos)
      ++this$1.pos
      switch (ch) {
        case 13:
          if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos
        case 10:
          out += "\n"
          break
        default:
          out += String.fromCharCode(ch)
          break
      }
      if (this$1.options.locations) {
        ++this$1.curLine
        this$1.lineStart = this$1.pos
      }
      chunkStart = this$1.pos
    } else {
      ++this$1.pos
    }
  }
}

// Used to read escaped characters

pp$7.readEscapedChar = function(inTemplate) {
  var ch = this.input.charCodeAt(++this.pos)
  ++this.pos
  switch (ch) {
  case 110: return "\n" // 'n' -> '\n'
  case 114: return "\r" // 'r' -> '\r'
  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'
  case 117: return codePointToString(this.readCodePoint()) // 'u'
  case 116: return "\t" // 't' -> '\t'
  case 98: return "\b" // 'b' -> '\b'
  case 118: return "\u000b" // 'v' -> '\u000b'
  case 102: return "\f" // 'f' -> '\f'
  case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\r\n'
  case 10: // ' \n'
    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }
    return ""
  default:
    if (ch >= 48 && ch <= 55) {
      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]
      var octal = parseInt(octalStr, 8)
      if (octal > 255) {
        octalStr = octalStr.slice(0, -1)
        octal = parseInt(octalStr, 8)
      }
      if (octalStr !== "0" && (this.strict || inTemplate)) {
        this.raise(this.pos - 2, "Octal literal in strict mode")
      }
      this.pos += octalStr.length - 1
      return String.fromCharCode(octal)
    }
    return String.fromCharCode(ch)
  }
}

// Used to read character escape sequences ('\x', '\u', '\U').

pp$7.readHexChar = function(len) {
  var codePos = this.pos
  var n = this.readInt(16, len)
  if (n === null) this.raise(codePos, "Bad character escape sequence")
  return n
}

// Read an identifier, and return it as a string. Sets `this.containsEsc`
// to whether the word contained a '\u' escape.
//
// Incrementally adds only escaped chars, adding other chunks as-is
// as a micro-optimization.

pp$7.readWord1 = function() {
  var this$1 = this;

  this.containsEsc = false
  var word = "", first = true, chunkStart = this.pos
  var astral = this.options.ecmaVersion >= 6
  while (this.pos < this.input.length) {
    var ch = this$1.fullCharCodeAtPos()
    if (isIdentifierChar(ch, astral)) {
      this$1.pos += ch <= 0xffff ? 1 : 2
    } else if (ch === 92) { // "\"
      this$1.containsEsc = true
      word += this$1.input.slice(chunkStart, this$1.pos)
      var escStart = this$1.pos
      if (this$1.input.charCodeAt(++this$1.pos) != 117) // "u"
        this$1.raise(this$1.pos, "Expecting Unicode escape sequence \\uXXXX")
      ++this$1.pos
      var esc = this$1.readCodePoint()
      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))
        this$1.raise(escStart, "Invalid Unicode escape")
      word += codePointToString(esc)
      chunkStart = this$1.pos
    } else {
      break
    }
    first = false
  }
  return word + this.input.slice(chunkStart, this.pos)
}

// Read an identifier or keyword token. Will check for reserved
// words when necessary.

pp$7.readWord = function() {
  var word = this.readWord1()
  var type = tt.name
  if (this.keywords.test(word)) {
    if (this.containsEsc) this.raiseRecoverable(this.start, "Escape sequence in keyword " + word)
    type = keywordTypes[word]
  }
  return this.finishToken(type, word)
}

// Acorn is a tiny, fast JavaScript parser written in JavaScript.
//
// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and
// various contributors and released under an MIT license.
//
// Git repositories for Acorn are available at
//
//     http://marijnhaverbeke.nl/git/acorn
//     https://github.com/ternjs/acorn.git
//
// Please use the [github bug tracker][ghbt] to report issues.
//
// [ghbt]: https://github.com/ternjs/acorn/issues
//
// This file defines the main parser interface. The library also comes
// with a [error-tolerant parser][dammit] and an
// [abstract syntax tree walker][walk], defined in other files.
//
// [dammit]: acorn_loose.js
// [walk]: util/walk.js

var version = "4.0.11"

// The main exported interface (under `self.acorn` when in the
// browser) is a `parse` function that takes a code string and
// returns an abstract syntax tree as specified by [Mozilla parser
// API][api].
//
// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

function parse(input, options) {
  return new Parser(options, input).parse()
}

// This function tries to parse a single expression at a given
// offset in a string. Useful for parsing mixed-language formats
// that embed JavaScript expressions.

function parseExpressionAt(input, pos, options) {
  var p = new Parser(options, input, pos)
  p.nextToken()
  return p.parseExpression()
}

// Acorn is organized as a tokenizer and a recursive-descent parser.
// The `tokenizer` export provides an interface to the tokenizer.

function tokenizer(input, options) {
  return new Parser(options, input)
}

// This is a terrible kludge to support the existing, pre-ES6
// interface where the loose parser module retroactively adds exports
// to this module.
function addLooseExports(parse, Parser, plugins) {
  exports.parse_dammit = parse
  exports.LooseParser = Parser
  exports.pluginsLoose = plugins
}

exports.version = version;
exports.parse = parse;
exports.parseExpressionAt = parseExpressionAt;
exports.tokenizer = tokenizer;
exports.addLooseExports = addLooseExports;
exports.Parser = Parser;
exports.plugins = plugins;
exports.defaultOptions = defaultOptions;
exports.Position = Position;
exports.SourceLocation = SourceLocation;
exports.getLineInfo = getLineInfo;
exports.Node = Node;
exports.TokenType = TokenType;
exports.tokTypes = tt;
exports.keywordTypes = keywordTypes;
exports.TokContext = TokContext;
exports.tokContexts = types;
exports.isIdentifierChar = isIdentifierChar;
exports.isIdentifierStart = isIdentifierStart;
exports.Token = Token;
exports.isNewLine = isNewLine;
exports.lineBreak = lineBreak;
exports.lineBreakG = lineBreakG;

Object.defineProperty(exports, '__esModule', { value: true });

})));

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var visited = [];

var copy = function copy(o) {
  var recursion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (!recursion) {
    visited.length = 0;
  }

  var history = visited.find(function (e) {
    return e[0] === o;
  });

  if (history) {
    return history[1];
  }

  if (o instanceof Array) {
    var result = [];
    visited.push([o, result]);

    o.forEach(function (e) {
      return result.push(copy(e, true));
    });

    return result;
  }

  if (o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object') {
    var _result = {};

    try {
      _result = JSON.parse(JSON.stringify(o));
      visited.push([o, _result]);
    } catch (e) {
      visited.push([o, _result]);

      Object.entries(o).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            k = _ref2[0],
            v = _ref2[1];

        _result[k] = copy(v, true);
      });
    }

    _result.__proto__ = o.__proto__;
    return _result;
  }

  visited.push([o, o]);
  return o;
};

module.exports = copy;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(0);


/***/ })
/******/ ]);
});

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

(function() {
  var crypt = __webpack_require__(354),
      utf8 = __webpack_require__(108).utf8,
      bin = __webpack_require__(108).bin,

  // The core
  sha1 = function (message) {
    // Convert to byte array
    if (message.constructor == String)
      message = utf8.stringToBytes(message);
    else if (typeof Buffer !== 'undefined' && typeof Buffer.isBuffer == 'function' && Buffer.isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message))
      message = message.toString();

    // otherwise assume byte array

    var m  = crypt.bytesToWords(message),
        l  = message.length * 8,
        w  = [],
        H0 =  1732584193,
        H1 = -271733879,
        H2 = -1732584194,
        H3 =  271733878,
        H4 = -1009589776;

    // Padding
    m[l >> 5] |= 0x80 << (24 - l % 32);
    m[((l + 64 >>> 9) << 4) + 15] = l;

    for (var i = 0; i < m.length; i += 16) {
      var a = H0,
          b = H1,
          c = H2,
          d = H3,
          e = H4;

      for (var j = 0; j < 80; j++) {

        if (j < 16)
          w[j] = m[i + j];
        else {
          var n = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
          w[j] = (n << 1) | (n >>> 31);
        }

        var t = ((H0 << 5) | (H0 >>> 27)) + H4 + (w[j] >>> 0) + (
                j < 20 ? (H1 & H2 | ~H1 & H3) + 1518500249 :
                j < 40 ? (H1 ^ H2 ^ H3) + 1859775393 :
                j < 60 ? (H1 & H2 | H1 & H3 | H2 & H3) - 1894007588 :
                         (H1 ^ H2 ^ H3) - 899497514);

        H4 = H3;
        H3 = H2;
        H2 = (H1 << 30) | (H1 >>> 2);
        H1 = H0;
        H0 = t;
      }

      H0 += a;
      H1 += b;
      H2 += c;
      H3 += d;
      H4 += e;
    }

    return [H0, H1, H2, H3, H4];
  },

  // Public API
  api = function (message, options) {
    var digestbytes = crypt.wordsToBytes(sha1(message));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

  api._blocksize = 16;
  api._digestsize = 20;

  module.exports = api;
})();


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Class representing an event.
 *
 * @private
 */
class Event {
  /**
   * Create a new `Event`.
   *
   * @param {String} type The name of the event
   * @param {Object} target A reference to the target to which the event was dispatched
   */
  constructor (type, target) {
    this.target = target;
    this.type = type;
  }
}

/**
 * Class representing a message event.
 *
 * @extends Event
 * @private
 */
class MessageEvent extends Event {
  /**
   * Create a new `MessageEvent`.
   *
   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data
   * @param {Boolean} isBinary Specifies if `data` is binary
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor (data, isBinary, target) {
    super('message', target);

    this.binary = isBinary; // non-standard.
    this.data = data;
  }
}

/**
 * Class representing a close event.
 *
 * @extends Event
 * @private
 */
class CloseEvent extends Event {
  /**
   * Create a new `CloseEvent`.
   *
   * @param {Number} code The status code explaining why the connection is being closed
   * @param {String} reason A human-readable string explaining why the connection is closing
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor (code, reason, target) {
    super('close', target);

    this.wasClean = code === undefined || code === 1000;
    this.reason = reason;
    this.target = target;
    this.type = 'close';
    this.code = code;
  }
}

/**
 * Class representing an open event.
 *
 * @extends Event
 * @private
 */
class OpenEvent extends Event {
  /**
   * Create a new `OpenEvent`.
   *
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor (target) {
    super('open', target);
  }
}

/**
 * This provides methods for emulating the `EventTarget` interface. It's not
 * meant to be used directly.
 *
 * @mixin
 */
const EventTarget = {
  /**
   * Register an event listener.
   *
   * @param {String} method A string representing the event type to listen for
   * @param {Function} listener The listener to add
   * @public
   */
  addEventListener (method, listener) {
    if (typeof listener !== 'function') return;

    function onMessage (data, flags) {
      listener.call(this, new MessageEvent(data, !!flags.binary, this));
    }

    function onClose (code, message) {
      listener.call(this, new CloseEvent(code, message, this));
    }

    function onError (event) {
      event.type = 'error';
      event.target = this;
      listener.call(this, event);
    }

    function onOpen () {
      listener.call(this, new OpenEvent(this));
    }

    if (method === 'message') {
      onMessage._listener = listener;
      this.on(method, onMessage);
    } else if (method === 'close') {
      onClose._listener = listener;
      this.on(method, onClose);
    } else if (method === 'error') {
      onError._listener = listener;
      this.on(method, onError);
    } else if (method === 'open') {
      onOpen._listener = listener;
      this.on(method, onOpen);
    } else {
      this.on(method, listener);
    }
  },

  /**
   * Remove an event listener.
   *
   * @param {String} method A string representing the event type to remove
   * @param {Function} listener The listener to remove
   * @public
   */
  removeEventListener (method, listener) {
    const listeners = this.listeners(method);

    for (var i = 0; i < listeners.length; i++) {
      if (listeners[i] === listener || listeners[i]._listener === listener) {
        this.removeListener(method, listeners[i]);
      }
    }
  }
};

module.exports = EventTarget;


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */



try {
  const isValidUTF8 = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"utf-8-validate\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

  module.exports = typeof isValidUTF8 === 'object'
    ? isValidUTF8.Validation.isValidUTF8  // utf-8-validate@<3.0.0
    : isValidUTF8;
} catch (e) {
  module.exports = () => true;
}


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */



const EventEmitter = __webpack_require__(91);
const crypto = __webpack_require__(90);
const Ultron = __webpack_require__(131);
const http = __webpack_require__(137);
const url = __webpack_require__(138);

const PerMessageDeflate = __webpack_require__(57);
const Extensions = __webpack_require__(133);
const constants = __webpack_require__(89);
const WebSocket = __webpack_require__(136);

/**
 * Class representing a WebSocket server.
 *
 * @extends EventEmitter
 */
class WebSocketServer extends EventEmitter {
  /**
   * Create a `WebSocketServer` instance.
   *
   * @param {Object} options Configuration options
   * @param {String} options.host The hostname where to bind the server
   * @param {Number} options.port The port where to bind the server
   * @param {http.Server} options.server A pre-created HTTP/S server to use
   * @param {Function} options.verifyClient An hook to reject connections
   * @param {Function} options.handleProtocols An hook to handle protocols
   * @param {String} options.path Accept only connections matching this path
   * @param {Boolean} options.noServer Enable no server mode
   * @param {Boolean} options.clientTracking Specifies whether or not to track clients
   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate
   * @param {Number} options.maxPayload The maximum allowed message size
   * @param {Function} callback A listener for the `listening` event
   */
  constructor (options, callback) {
    super();

    options = Object.assign({
      maxPayload: 100 * 1024 * 1024,
      perMessageDeflate: true,
      handleProtocols: null,
      clientTracking: true,
      verifyClient: null,
      noServer: false,
      backlog: null, // use default (511 as implemented in net.js)
      server: null,
      host: null,
      path: null,
      port: null
    }, options);

    if (options.port == null && !options.server && !options.noServer) {
      throw new TypeError('missing or invalid options');
    }

    if (options.port != null) {
      this._server = http.createServer((req, res) => {
        const body = http.STATUS_CODES[426];

        res.writeHead(426, {
          'Content-Length': body.length,
          'Content-Type': 'text/plain'
        });
        res.end(body);
      });
      this._server.allowHalfOpen = false;
      this._server.listen(options.port, options.host, options.backlog, callback);
    } else if (options.server) {
      this._server = options.server;
    }

    if (this._server) {
      this._ultron = new Ultron(this._server);
      this._ultron.on('listening', () => this.emit('listening'));
      this._ultron.on('error', (err) => this.emit('error', err));
      this._ultron.on('upgrade', (req, socket, head) => {
        this.handleUpgrade(req, socket, head, (client) => {
          this.emit(`connection${req.url}`, client);
          this.emit('connection', client);
        });
      });
    }

    if (options.clientTracking) this.clients = new Set();
    this.options = options;
    this.path = options.path;
  }

  /**
   * Close the server.
   *
   * @param {Function} cb Callback
   * @public
   */
  close (cb) {
    //
    // Terminate all associated clients.
    //
    if (this.clients) {
      for (const client of this.clients) client.terminate();
    }

    const server = this._server;

    if (server) {
      this._ultron.destroy();
      this._ultron = this._server = null;

      //
      // Close the http server if it was internally created.
      //
      if (this.options.port != null) return server.close(cb);
    }

    if (cb) cb();
  }

  /**
   * See if a given request should be handled by this server instance.
   *
   * @param {http.IncomingMessage} req Request object to inspect
   * @return {Boolean} `true` if the request is valid, else `false`
   * @public
   */
  shouldHandle (req) {
    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {
      return false;
    }

    return true;
  }

  /**
   * Handle a HTTP Upgrade request.
   *
   * @param {http.IncomingMessage} req The request object
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @public
   */
  handleUpgrade (req, socket, head, cb) {
    socket.on('error', socketError);

    const version = +req.headers['sec-websocket-version'];

    if (
      req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' ||
      !req.headers['sec-websocket-key'] || (version !== 8 && version !== 13) ||
      !this.shouldHandle(req)
    ) {
      return abortConnection(socket, 400);
    }

    var protocol = (req.headers['sec-websocket-protocol'] || '').split(/, */);

    //
    // Optionally call external protocol selection handler.
    //
    if (this.options.handleProtocols) {
      protocol = this.options.handleProtocols(protocol);
      if (protocol === false) return abortConnection(socket, 401);
    } else {
      protocol = protocol[0];
    }

    //
    // Optionally call external client verification handler.
    //
    if (this.options.verifyClient) {
      const info = {
        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
        secure: !!(req.connection.authorized || req.connection.encrypted),
        req
      };

      if (this.options.verifyClient.length === 2) {
        this.options.verifyClient(info, (verified, code, message) => {
          if (!verified) return abortConnection(socket, code || 401, message);

          this.completeUpgrade(protocol, version, req, socket, head, cb);
        });
        return;
      } else if (!this.options.verifyClient(info)) {
        return abortConnection(socket, 401);
      }
    }

    this.completeUpgrade(protocol, version, req, socket, head, cb);
  }

  /**
   * Upgrade the connection to WebSocket.
   *
   * @param {String} protocol The chosen subprotocol
   * @param {Number} version The WebSocket protocol version
   * @param {http.IncomingMessage} req The request object
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @private
   */
  completeUpgrade (protocol, version, req, socket, head, cb) {
    //
    // Destroy the socket if the client has already sent a FIN packet.
    //
    if (!socket.readable || !socket.writable) return socket.destroy();

    const key = crypto.createHash('sha1')
      .update(req.headers['sec-websocket-key'] + constants.GUID, 'binary')
      .digest('base64');

    const headers = [
      'HTTP/1.1 101 Switching Protocols',
      'Upgrade: websocket',
      'Connection: Upgrade',
      `Sec-WebSocket-Accept: ${key}`
    ];

    if (protocol) headers.push(`Sec-WebSocket-Protocol: ${protocol}`);

    const offer = Extensions.parse(req.headers['sec-websocket-extensions']);
    var extensions;

    try {
      extensions = acceptExtensions(this.options, offer);
    } catch (err) {
      return abortConnection(socket, 400);
    }

    const props = Object.keys(extensions);

    if (props.length) {
      const serverExtensions = props.reduce((obj, key) => {
        obj[key] = [extensions[key].params];
        return obj;
      }, {});

      headers.push(`Sec-WebSocket-Extensions: ${Extensions.format(serverExtensions)}`);
    }

    //
    // Allow external modification/inspection of handshake headers.
    //
    this.emit('headers', headers);

    socket.write(headers.concat('', '').join('\r\n'));

    const client = new WebSocket([req, socket, head], {
      maxPayload: this.options.maxPayload,
      protocolVersion: version,
      extensions,
      protocol
    });

    if (this.clients) {
      this.clients.add(client);
      client.on('close', () => this.clients.delete(client));
    }

    socket.removeListener('error', socketError);
    cb(client);
  }
}

module.exports = WebSocketServer;

/**
 * Handle premature socket errors.
 *
 * @private
 */
function socketError () {
  this.destroy();
}

/**
 * Accept WebSocket extensions.
 *
 * @param {Object} options The `WebSocketServer` configuration options
 * @param {Object} offer The parsed value of the `sec-websocket-extensions` header
 * @return {Object} Accepted extensions
 * @private
 */
function acceptExtensions (options, offer) {
  const pmd = options.perMessageDeflate;
  const extensions = {};

  if (pmd && offer[PerMessageDeflate.extensionName]) {
    const perMessageDeflate = new PerMessageDeflate(
      pmd !== true ? pmd : {},
      true,
      options.maxPayload
    );

    perMessageDeflate.accept(offer[PerMessageDeflate.extensionName]);
    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
  }

  return extensions;
}

/**
 * Close the connection when preconditions are not fulfilled.
 *
 * @param {net.Socket} socket The socket of the upgrade request
 * @param {Number} code The HTTP response status code
 * @param {String} [message] The HTTP response body
 * @private
 */
function abortConnection (socket, code, message) {
  if (socket.writable) {
    message = message || http.STATUS_CODES[code];
    socket.write(
      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` +
      'Connection: close\r\n' +
      'Content-type: text/html\r\n' +
      `Content-Length: ${Buffer.byteLength(message)}\r\n` +
      '\r\n' +
      message
    );
  }

  socket.removeListener('error', socketError);
  socket.destroy();
}


/***/ }),
/* 361 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "crwdns18731:0crwdne18731:0",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "crwdns18732:0crwdne18732:0",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "crwdns18733:0crwdne18733:0",
	"4d064726954a17487f94e931f5b157b733ec22ed": "crwdns18734:0crwdne18734:0",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "crwdns18735:0crwdne18735:0",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "crwdns18736:0crwdne18736:0",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "crwdns18737:0crwdne18737:0",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "crwdns18738:0crwdne18738:0",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "crwdns18739:0crwdne18739:0",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "crwdns18740:0crwdne18740:0",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "crwdns18741:0crwdne18741:0",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "crwdns18742:0crwdne18742:0",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "crwdns18743:0crwdne18743:0",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "crwdns18744:0crwdne18744:0",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "crwdns18745:0crwdne18745:0",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "crwdns18746:0crwdne18746:0",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "crwdns18747:0crwdne18747:0",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "crwdns18748:0crwdne18748:0",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "crwdns18749:0crwdne18749:0",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "crwdns18750:0crwdne18750:0",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "crwdns18751:0crwdne18751:0",
	"4152043e8c670075d2c919677e835edb0d923cab": "crwdns18752:0crwdne18752:0",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "crwdns18753:0crwdne18753:0",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "crwdns18756:0crwdne18756:0",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "crwdns18755:0crwdne18755:0",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "crwdns18754:0crwdne18754:0",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "crwdns18761:0crwdne18761:0",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "crwdns18762:0crwdne18762:0",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "crwdns18763:0crwdne18763:0",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "crwdns18764:0crwdne18764:0",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "crwdns18765:0crwdne18765:0",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "crwdns18766:0crwdne18766:0",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "crwdns18767:0crwdne18767:0",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "crwdns18768:0crwdne18768:0",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "crwdns18769:0crwdne18769:0",
	"90eef613042c5a51f542421065b68b886d473807": "crwdns18770:0crwdne18770:0",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "crwdns18771:0crwdne18771:0",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "crwdns18772:0crwdne18772:0",
	"db1c784524e1b54011a95823026161f7c8517fe0": "crwdns18773:0crwdne18773:0",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "crwdns18774:0crwdne18774:0",
	"6541776503f0f949109cde78e6634d07d3528cd3": "crwdns18775:0crwdne18775:0",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "crwdns18776:0crwdne18776:0",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "crwdns18777:0crwdne18777:0",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "crwdns18778:0crwdne18778:0",
	"772fbced18230220d2d9be1456be16fc1b271d25": "crwdns18779:0crwdne18779:0",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "crwdns18780:0crwdne18780:0",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "crwdns18781:0crwdne18781:0",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "crwdns18782:0crwdne18782:0",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "crwdns18783:0crwdne18783:0",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "crwdns18784:0crwdne18784:0",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "crwdns18785:0crwdne18785:0",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "crwdns18786:0crwdne18786:0",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "crwdns18787:0crwdne18787:0",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "crwdns18788:0crwdne18788:0",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "crwdns18789:0crwdne18789:0",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "crwdns18790:0crwdne18790:0",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "crwdns18791:0crwdne18791:0",
	"78d7103a319e808455d397513279d99f3b3f3768": "crwdns18792:0crwdne18792:0",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "crwdns18793:0crwdne18793:0",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "crwdns18794:0crwdne18794:0",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "crwdns18795:0crwdne18795:0",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "crwdns18796:0crwdne18796:0",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "crwdns18797:0crwdne18797:0",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "crwdns18798:0crwdne18798:0",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "crwdns18799:0crwdne18799:0",
	"7674920c033ca14277c577e19c037a6754d4fa80": "crwdns18800:0crwdne18800:0",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "crwdns18801:0crwdne18801:0",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "crwdns18802:0crwdne18802:0",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "crwdns18803:0crwdne18803:0",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "crwdns18804:0crwdne18804:0",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "crwdns18805:0crwdne18805:0",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "crwdns18806:0crwdne18806:0",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "crwdns18807:0crwdne18807:0",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "crwdns18808:0crwdne18808:0",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "crwdns18809:0crwdne18809:0",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "crwdns18810:0crwdne18810:0",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "crwdns18811:0crwdne18811:0",
	"78988010b890ce6f4d2136481f392787ec6d6106": "crwdns18812:0crwdne18812:0",
	"062787aa328047e189774b3703d983b83938f6e9": "crwdns18813:0crwdne18813:0",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "crwdns18814:0crwdne18814:0",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "crwdns18815:0crwdne18815:0",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "crwdns18816:0crwdne18816:0",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "crwdns18817:0crwdne18817:0",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "crwdns18818:0crwdne18818:0",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "crwdns18819:0crwdne18819:0",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "crwdns18820:0crwdne18820:0",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "crwdns18821:0crwdne18821:0",
	"c098658ce3d3a258e4d155949a60072966b36db7": "crwdns18822:0crwdne18822:0",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "crwdns18823:0crwdne18823:0",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "crwdns18824:0crwdne18824:0",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "crwdns18825:0crwdne18825:0",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "crwdns18826:0crwdne18826:0",
	"18a63f5512afb5573e5b44deba78d629f0635317": "crwdns18827:0crwdne18827:0",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "crwdns18828:0crwdne18828:0",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "crwdns18829:0crwdne18829:0",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "crwdns18830:0crwdne18830:0",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "crwdns18831:0crwdne18831:0",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "crwdns18832:0crwdne18832:0",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "crwdns18833:0crwdne18833:0",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "crwdns18834:0crwdne18834:0",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "crwdns18835:0crwdne18835:0",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "crwdns18836:0crwdne18836:0",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "crwdns18837:0crwdne18837:0",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "crwdns18838:0crwdne18838:0",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "crwdns18839:0crwdne18839:0",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "crwdns18840:0crwdne18840:0",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "crwdns18841:0crwdne18841:0",
	"f7de1f66f0979667da275b7e8996e805395025a1": "crwdns18842:0crwdne18842:0",
	"a431deecd4c2258097adae418d496fe9a8179fee": "crwdns18843:0crwdne18843:0",
	"91a64e3f83c91acf336c631fba295f297f94c399": "crwdns18844:0crwdne18844:0",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "crwdns18845:0crwdne18845:0",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "crwdns18846:0crwdne18846:0",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "crwdns18847:0crwdne18847:0",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "crwdns18848:0crwdne18848:0",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "crwdns19104:0crwdne19104:0",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "crwdns19105:0crwdne19105:0",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "crwdns19106:0crwdne19106:0",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "crwdns18849:0crwdne18849:0",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "crwdns18850:0crwdne18850:0",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "crwdns18851:0crwdne18851:0",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "crwdns18852:0crwdne18852:0",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "crwdns18853:0crwdne18853:0",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "crwdns18854:0crwdne18854:0",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "crwdns18855:0crwdne18855:0",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "crwdns18856:0crwdne18856:0",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "crwdns18857:0crwdne18857:0",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "crwdns18858:0crwdne18858:0",
	"05a2f240d737a283370d315c199ba2671176f9b8": "crwdns18859:0crwdne18859:0",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "crwdns18860:0crwdne18860:0",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "crwdns18861:0crwdne18861:0",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "crwdns18862:0crwdne18862:0",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "crwdns18863:0crwdne18863:0",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "crwdns18864:0crwdne18864:0",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "crwdns18865:0crwdne18865:0",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "crwdns18866:0crwdne18866:0",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "crwdns18867:0crwdne18867:0",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "crwdns18868:0crwdne18868:0",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "crwdns18869:0crwdne18869:0",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "crwdns18870:0crwdne18870:0",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "crwdns18871:0crwdne18871:0",
	"11ee9c5d534cc8d22651092222b532917594161a": "crwdns18872:0crwdne18872:0",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "crwdns18873:0crwdne18873:0",
	"ace1342bc3720b77ce510b93074041e7386d209e": "crwdns18874:0crwdne18874:0",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "crwdns18875:0crwdne18875:0",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "crwdns18876:0crwdne18876:0",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "crwdns18877:0crwdne18877:0",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "crwdns18878:0crwdne18878:0",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "crwdns18879:0crwdne18879:0",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "crwdns19057:0crwdne19057:0",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "crwdns18881:0crwdne18881:0",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "crwdns18882:0crwdne18882:0",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "crwdns18883:0crwdne18883:0",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "crwdns18884:0crwdne18884:0",
	"34c59389053701a04127f74d32315e0206e076f8": "crwdns18885:0crwdne18885:0",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "crwdns18886:0crwdne18886:0",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "crwdns18887:0crwdne18887:0",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "crwdns18888:0crwdne18888:0",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "crwdns18889:0crwdne18889:0",
	"f90691af95e0735042635eb7fd2367812d800516": "crwdns18890:0crwdne18890:0",
	"a571293591257b7a4e97484de6054ab919bc3a04": "crwdns18891:0crwdne18891:0",
	"952f375412e89ff213a8aca383d18e5691354347": "crwdns18892:0crwdne18892:0",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "crwdns18893:0crwdne18893:0",
	"34040fc10f01da331c08a8241356fde27bcdda32": "crwdns18894:0crwdne18894:0",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "crwdns18895:0crwdne18895:0",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "crwdns18896:0crwdne18896:0",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "crwdns18897:0crwdne18897:0",
	"bf33cc2e57180686002e873efb1564c214405c77": "crwdns18898:0crwdne18898:0",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "crwdns18899:0crwdne18899:0",
	"4a1e616226c329a94da7768bc0435a3284478010": "crwdns19071:0crwdne19071:0",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "crwdns19072:0crwdne19072:0",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "crwdns19073:0crwdne19073:0",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "crwdns19074:0crwdne19074:0",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "crwdns19075:0crwdne19075:0",
	"a48e81d4a8da67637b46725824177a959fe99b21": "crwdns19076:0crwdne19076:0",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "crwdns19077:0crwdne19077:0",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "crwdns19078:0crwdne19078:0",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "crwdns19079:0crwdne19079:0",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "crwdns19080:0crwdne19080:0",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "crwdns19081:0crwdne19081:0",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "crwdns19082:0crwdne19082:0",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "crwdns19083:0crwdne19083:0",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "crwdns19084:0crwdne19084:0",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "crwdns19085:0crwdne19085:0",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "crwdns19086:0crwdne19086:0",
	"f5c47fd3b3553b10441a06054078cea745177dea": "crwdns19087:0crwdne19087:0",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "crwdns19088:0crwdne19088:0",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "crwdns19089:0crwdne19089:0",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "crwdns19090:0crwdne19090:0",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "crwdns19091:0crwdne19091:0",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "crwdns19092:0crwdne19092:0",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "crwdns18949:0crwdne18949:0",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "crwdns18950:0crwdne18950:0",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "crwdns18951:0crwdne18951:0",
	"011b5c3886f99f18d9239534f3423849fd75450b": "crwdns18952:0crwdne18952:0",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "crwdns18953:0crwdne18953:0",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "crwdns18954:0crwdne18954:0",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "crwdns18955:0crwdne18955:0",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "crwdns18956:0crwdne18956:0",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "crwdns18957:0crwdne18957:0",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "crwdns18958:0crwdne18958:0",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "crwdns18959:0crwdne18959:0",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "crwdns18960:0crwdne18960:0",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "crwdns18961:0crwdne18961:0",
	"343fda69c73b78b84967055aae97f790c422adfd": "crwdns18962:0crwdne18962:0",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "crwdns18963:0crwdne18963:0",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "crwdns18964:0crwdne18964:0",
	"87da93a46d143f6019979b3548414d9d7adabb35": "crwdns18965:0crwdne18965:0",
	"160f06d4799c85021a810f68c5b517eea37a2737": "crwdns18966:0crwdne18966:0",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "crwdns18967:0crwdne18967:0",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "crwdns18968:0crwdne18968:0",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "crwdns18969:0crwdne18969:0",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "crwdns18970:0crwdne18970:0",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "crwdns18971:0crwdne18971:0",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "crwdns18972:0crwdne18972:0",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "crwdns18973:0crwdne18973:0",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "crwdns18974:0crwdne18974:0",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "crwdns18975:0crwdne18975:0",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "crwdns18976:0crwdne18976:0",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "crwdns18977:0crwdne18977:0",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "crwdns18978:0crwdne18978:0",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "crwdns18979:0crwdne18979:0",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "crwdns18980:0crwdne18980:0",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "crwdns18981:0crwdne18981:0",
	"05bef508aadd62bf3967dcf67d769da296f19989": "crwdns18982:0crwdne18982:0",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "crwdns18983:0crwdne18983:0",
	"cdb31fc857f01a59f664413498293c714285f46d": "crwdns18984:0crwdne18984:0",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "crwdns18985:0crwdne18985:0",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "crwdns18986:0crwdne18986:0",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "crwdns18987:0crwdne18987:0",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "crwdns18988:0crwdne18988:0",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "crwdns18989:0crwdne18989:0",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "crwdns18990:0crwdne18990:0",
	"5e9023e299575f2bc81242b931c10019b63f407a": "crwdns18991:0crwdne18991:0",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "crwdns18992:0crwdne18992:0",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "crwdns18993:0crwdne18993:0",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "crwdns18994:0crwdne18994:0",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "crwdns18995:0crwdne18995:0",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "crwdns18996:0crwdne18996:0",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "crwdns18997:0crwdne18997:0",
	"17649cac8739adcae95e641f794880272ad33bd1": "crwdns18998:0crwdne18998:0",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "crwdns18999:0crwdne18999:0",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "crwdns19000:0crwdne19000:0",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "crwdns19061:0crwdne19061:0",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "crwdns19002:0crwdne19002:0",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "crwdns19003:0crwdne19003:0",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "crwdns19004:0crwdne19004:0",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "crwdns19005:0crwdne19005:0",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "crwdns19006:0crwdne19006:0",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "crwdns19007:0crwdne19007:0",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "crwdns19008:0crwdne19008:0",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "crwdns19009:0crwdne19009:0",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "crwdns19010:0crwdne19010:0",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "crwdns19011:0crwdne19011:0",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "crwdns19012:0crwdne19012:0",
	"02349f7b8f107a4b438066130a593735f2d31609": "crwdns19013:0crwdne19013:0",
	"1f4698382842477e211eb46de81fa506f01a8c34": "crwdns19014:0crwdne19014:0",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "crwdns19015:0crwdne19015:0",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "crwdns19016:0crwdne19016:0",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "crwdns19017:0crwdne19017:0",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "crwdns19018:0crwdne19018:0",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "crwdns19019:0crwdne19019:0",
	"911348bf6fef082476779805cd1bda16bef66d2d": "crwdns19020:0crwdne19020:0",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "crwdns19021:0crwdne19021:0",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "crwdns19022:0crwdne19022:0",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "crwdns19023:0crwdne19023:0",
	"eabf5342bcb460c4f8261faa18695d851712614a": "crwdns19024:0crwdne19024:0",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "crwdns19025:0crwdne19025:0",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "crwdns19026:0crwdne19026:0",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "crwdns19027:0crwdne19027:0",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "crwdns19028:0crwdne19028:0",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "crwdns19029:0crwdne19029:0",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "crwdns19030:0crwdne19030:0",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "crwdns19031:0crwdne19031:0",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "crwdns19032:0crwdne19032:0",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "crwdns19033:0crwdne19033:0",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "crwdns19034:0crwdne19034:0",
	"974da601086448d0060aeed90e53ddd5acd17b91": "crwdns19035:0crwdne19035:0",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "crwdns19036:0crwdne19036:0",
	"58de49791c64aba14e36e5887244a5ef088286cd": "crwdns19037:0crwdne19037:0",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "crwdns19038:0crwdne19038:0",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "crwdns19039:0crwdne19039:0",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "crwdns19040:0crwdne19040:0",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "crwdns19041:0crwdne19041:0",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "crwdns19107:0crwdne19107:0",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "crwdns19108:0crwdne19108:0",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "crwdns19109:0crwdne19109:0",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "crwdns19110:0crwdne19110:0",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "crwdns19111:0crwdne19111:0",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "crwdns19042:0crwdne19042:0",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "crwdns19043:0crwdne19043:0",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "crwdns19044:0crwdne19044:0",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "crwdns19045:0crwdne19045:0",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "crwdns19046:0crwdne19046:0",
	"347775a293c14362d492f019e677c965be1d6e7d": "crwdns19047:0crwdne19047:0",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "crwdns19048:0crwdne19048:0",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "crwdns19049:0crwdne19049:0",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "crwdns19050:0crwdne19050:0",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "crwdns19051:0crwdne19051:0",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "crwdns19052:0crwdne19052:0",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "crwdns19053:0crwdne19053:0",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "crwdns19054:0crwdne19054:0",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "crwdns19055:0crwdne19055:0",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "crwdns19056:0crwdne19056:0"
};

/***/ }),
/* 362 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "Logik",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "Mathematik",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "Text",
	"4d064726954a17487f94e931f5b157b733ec22ed": "Fortgeschritten",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "Liste",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "Variable",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "Funktionen",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "Schleife",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binary",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "Handelsdefinition",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "Vor dem Kauf",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "Während des Kaufs",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "Nach dem Kauf",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "Tick-Analyse",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "Werkzeuge",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "Zeit",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "Kerze",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "Sonstiges",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "Indikatoren",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "Realitätscheck",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "Der Optionshandel kann zu einer wirklichen Abhängigkeit führen, so wie jede andere Aktivität, die bis zu ihren Grenzen ausgeübt wird. Um die Gefahr einer solchen Äbhängigkeit zu vermeiden, bieten wir einen Realitätscheck an, der Ihnen eine regelmäßige Zusammenfassung Ihrer Geschäfte und Konten gibt.",
	"4152043e8c670075d2c919677e835edb0d923cab": "Bitte geben Sie Ihren bevorzugten Realitätscheck Intervall in Minuten an",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "Bitte geben Sie eine Zahl zwischen 10 und 20 ein.",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "Handel fortsetzen",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "Erklärung",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "Abmelden",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "Anmelden",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "Ergebnisse",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "Zusammenfassung",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "Anzahl der Laufzeiten",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "Gesamteinsatz",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "Gesamtauszahlung",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "Gewinn",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "Verlust",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "Gesamter Gewinn/Verlust",
	"90eef613042c5a51f542421065b68b886d473807": "Guthaben",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "Kontrakte",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "Anzahl",
	"db1c784524e1b54011a95823026161f7c8517fe0": "Referenz",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "Kontrakttyp",
	"6541776503f0f949109cde78e6634d07d3528cd3": "Startkurs",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "Schlusskurs",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "Kaufpreis",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "Endpreis",
	"772fbced18230220d2d9be1456be16fc1b271d25": "Gewinn/Verlust",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Binary Bot",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "Handeln Sie effektiver als Sie es jemals für möglich gehalten hätten",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "Sie sind daran interessiert, Ihre bevorzugten Strategien für den Handel mit binären Optionen zu automatisieren?",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Binary Bot ist unsere führende Tool-Programmierung, die Ihnen erlaubt, Handels Apps mit einer einfachen „jigsaw puzzle ähnlichen” Drag-and-Drop-Funktion zu erstellen.",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "Erträumen Sie sich eine beliebige Anzahl an binären Optionshandels Bots, von unglaublich einfachen Formeln bis hin zu umfangreich komplexen Algorithmen. Dann lassen Sie sie, sogar während Sie schlafen, für sich handeln.",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "Das Beste ist, sobald Sie erst einmal einen Bot erstellt haben, können wir Ihnen dabei helfen es an andere Händler im",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Binary.com Shop zu verkaufen",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "Erhalten Sie 80% des Umsatzes von jedem Kauf Ihres Bots in unserem AppStore.",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "Beginnen Sie jetzt, einen Bot zu erstellen",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "Benötigen Sie weitere Hilfe?",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "Kontaktieren Sie uns",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "Auszahlung",
	"78d7103a319e808455d397513279d99f3b3f3768": "Einsatz",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "Erklärung",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "Briefkurs",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "Auszahlung",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "Gewinn",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "Vertragstyp",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "Startkurs",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "Eingabewert",
	"7674920c033ca14277c577e19c037a6754d4fa80": "Schlusskurs",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "Exit-Wert",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "Schwelle",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "Ergebnis",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "Steigen",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "Fallen",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "Keine Änderung",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "String",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "Anzahl",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "grün",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "blau",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "gelb",
	"78988010b890ce6f4d2136481f392787ec6d6106": "rot",
	"062787aa328047e189774b3703d983b83938f6e9": "Höher",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "Tiefer",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "Ziel",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "Kein Ziel",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "Endet innerhalb",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "Endet außerhalb",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "Bleibt unter",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "Geht über",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "Asiatisches Hoch",
	"c098658ce3d3a258e4d155949a60072966b36db7": "Asiatisches Tief",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "Gleich",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "Verschieden",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "Gerade",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "Ungerade",
	"18a63f5512afb5573e5b44deba78d629f0635317": "Über",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "Unter",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "Offen",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "Hoch",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "Tief",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "Schluss",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "Offene Zeit",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "Ticks",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "Sekunden",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "Minuten",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "Stunden",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "Auf/Ab",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "Asiaten",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "Ziffern",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "Ziel/kein Ziel",
	"f7de1f66f0979667da275b7e8996e805395025a1": "Endet Innerhalb/Außerhalb",
	"a431deecd4c2258097adae418d496fe9a8179fee": "Bleibt Unter/Geht Über",
	"91a64e3f83c91acf336c631fba295f297f94c399": "Nach n Sekunden laufen",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "Alle n Sekunden laufen",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "obere",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "mittlere",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "niedrigere",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "Histogramm",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "MACD",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "Signal",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "Es wurde ein nicht-leeres Array erwartet, aber das gegebene Array ist leer.",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "Es wurde ein nicht-leeres Array erwartet, vorausgesetzt:",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "Es wurde ein nicht-leeres Array erwartet, aber keines war gegeben.",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "Es wurde ein Kerzen-Objekt erwartet, aber das gegebene Objekt ist keine Kerze.",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "Es wurde ein Kerzen-Objekt erwartet, vorausgesetzt:",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "Es wurde ein Kerzen-Objekt erwartet, aber keines war gegeben.",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "Erwarteter Tick, vorausgesetzt:",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "Es wurde ein Tick erwartet, aber keiner war gegeben.",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "es muss eine Zahl sein, vorausgesetzt:",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "kann nicht Null sein.",
	"05a2f240d737a283370d315c199ba2671176f9b8": "der Indikator Zeitraum muss kürzer als die Länge der Eingabeliste sein.",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "der Indikator Zeitraum kann nicht Null sein.",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "Maximale Anzahl von Geschäften erreicht",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "Maximale Schadenhöhe erreicht",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "Datei wird nicht unterstützt:",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "Sie sind abgemeldet!",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "Die Verbindung wurde, bevor die Antwort vom Server empfangen wurde, verloren",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "Gekauft",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "Blöcke müssen innerhalb des Blockhalters, Hauptblöcke oder Funktionen sein",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "Blöcke sind erfolgreich geladen",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "Download",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "Unbekanntes Dateiformat.",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "Die Dauer muss eine positive ganze Zahl sein",
	"11ee9c5d534cc8d22651092222b532917594161a": "Mindestdauer beträgt",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "Die Anzahl der Ticks muss zwischen 5 und 10 liegen",
	"ace1342bc3720b77ce510b93074041e7386d209e": "Die Ablaufzeit darf nicht mit der Startzeit übereinstimmen",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "Die Vorhersage muss eine Ziffer sein",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "müssen in den Handelsblock hinzugefügt werden",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "muss in den vor-dem-Kauf Block hinzugefügt werden",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "muss in den während-des-Kaufs Block hinzugefügt werden",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "muss in den nach-dem-Kauf Block hinzugefügt werden",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "muss hineingefügt werden",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "Klicken Sie um auszuwählen",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "Remote Blöcke die zu laden sind, müssen eine Sammlung sein.",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "Ziel muss eine XML-Datei sein",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "Diese URL ist schon geladen",
	"34c59389053701a04127f74d32315e0206e076f8": "Beim laden der URL ist ein Fehler aufgetreten",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "Stellen Sie sicher, dass die „Access-Control-Allow-Origin” in der Antwort des Servers vorhanden ist",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "Die maximale zulässige Anzahl von Geschäften für jede Sitzung ist 100.",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "Sowohl die Anzahl der Geschäfte als auch die Schadenhöhe sind erforderlich.",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "Handelseinschränkungen",
	"f90691af95e0735042635eb7fd2367812d800516": "Maximale Anzahl von Geschäften",
	"a571293591257b7a4e97484de6054ab919bc3a04": "Maximale Schadenhöhe",
	"952f375412e89ff213a8aca383d18e5691354347": "Start",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "Es ist ein Fehler aufgetreten, Neustart...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "Neustart in",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "Abbrechen",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "Speicher Blöcke als",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "Dateiname",
	"bf33cc2e57180686002e873efb1564c214405c77": "Als Kollektion speichern",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "Speichern",
	"4a1e616226c329a94da7768bc0435a3284478010": "Speichern Sie die vorhandenen Blöcke (XML-Datei)",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "Weiter",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "Zurück",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "Abgeschlossen",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "Machen Sie eine kurze Tour",
	"a48e81d4a8da67637b46725824177a959fe99b21": "Sind Sie dazu bereit zu lernen, wie man Binary Bot verwendet?",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "Nicht mehr nachfragen.",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "Nein, danke",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "Ja",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "Arbeitsbereich",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "Ziehen und legen Sie Block-Dateien.",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "Laden Sie Beispielsstrategien herunter",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "Machen Sie Ihre eigenen Strategien",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "Blöcke-Toolbox",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "Fügen Sie weitere Blöcke von hier zu Ihrem Bot hinzu.",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "Konten",
	"f5c47fd3b3553b10441a06054078cea745177dea": "Melden Sie sich an, bevor Sie Ihren Bot starten. Testen Sie Ihre Strategien immer mit Ihrem virtuellen Konto.",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Bot-Steuerungen",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "Steuern Sie Ihre Blöcke. Für weitere Informationen, halten Sie den Cursor auf jede Taste gedrückt.",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "Viel Spaß!",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "Sie möchten ein Problem melden oder um Hilfe bitten?",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "Klicken Sie hier",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "Ergebnis ist",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "Richtig, wenn das Ergebnis mit der Auswahl übereinstimmt",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "Kontraktdaten",
	"011b5c3886f99f18d9239534f3423849fd75450b": "Gibt die Liste der Angaben für den abgeschlossenen Kontrakt zurück",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) Erhalten Sie Ihr Handelsergebnis und handeln Sie nochmals",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "Erhalten Sie die vorherige Handelsinformation und das Ergebnis, dann handeln Sie nochmals (Läuft aufs Handelsende)",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "Kontraktdaten:",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "Liest eine ausgewählte Option von der Kontraktdatenliste",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "Kontraktergebnis",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "Gibt das Ergebnis des abgeschlossenen Kontrakts zurück",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "Nochmals Handeln",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "Läuft den Handelsblock erneut",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "Briefkurs",
	"343fda69c73b78b84967055aae97f790c422adfd": "Briefkurs für den ausgewählten Antrag",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) Beobachten und kaufen Sie Ihren Kontrakt",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "Beobachten Sie den Tick-Stream und kaufen Sie den gewünschten Kontrakt (Läuft auf Tick-Update)",
	"87da93a46d143f6019979b3548414d9d7adabb35": "Auszahlung für den ausgewählten Antrag",
	"160f06d4799c85021a810f68c5b517eea37a2737": "Kauf",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "Kauft einen ausgewählten Kontrakt.",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "Verkauf verfügbar ist",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "Richtig, wenn Verkauf am Markt verfügbar ist",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) Beobachten und verkaufen Sie Ihren gekauften Kontrakt",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "Beobachten Sie die Informationen des gekauften Kontrakts und verkaufen Sie am Markt, falls dies verfügbar ist (Läuft auf Kontrakt-Update)",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "Am Markt verkaufen",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "Am Markt verkaufen.",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "Gewinn/Verlust verkaufen",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "Gibt den Gewinn für den Verkauf am Markt wieder.",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "Lesen",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "in",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "letzte Kerze",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "Lesen Sie den ausgewählten Kerzenwert in der n-t letzten Kerze",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "Richtung ist",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "Richtig, wenn die Richtung mit der Auswahl übereinstimmt",
	"05bef508aadd62bf3967dcf67d769da296f19989": "Tick Richtung",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "Gibt die Tick-Richtung, die von einem vor-dem-Kauf Block erhalten wurde zurück; sein Wert könnte nach „oben” gehen, wenn der Tick mehr als vorher ist, nach „unten”, wenn er weniger als zuvor ist, und leer („”), wenn der Tick dem letzten Tick entspricht",
	"cdb31fc857f01a59f664413498293c714285f46d": "in der Kerzenliste",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "erhalten Sie # vom Ende",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "Erhalten Sie die n-t letzte Kerze",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "Letzte Ziffer",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "Gibt die letzte Ziffer des letzten Ticks zurück",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "Kerzenliste",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "Gibt die Kerzenliste zurück",
	"5e9023e299575f2bc81242b931c10019b63f407a": "Kerzenwerte",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "Gibt eine Liste der ausgewählten Kerzenwerte zurück",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "Letzter Tick",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "Gibt den Tick-Wert, der von einem vor-dem-Kauf Block erhalten wurde, wieder",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "Dieser Block wird bei jedem Tick herangezogen",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "Sie können diesen Block, unabhängig von Ihren Geschäften, zur Analyse der kommenden Ticks verwenden",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "Ticks Liste",
	"17649cac8739adcae95e641f794880272ad33bd1": "Gibt die Liste der Tick-Werte zurück",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "Guthaben:",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "Erhalten Sie die Zahl des Guthabens oder des Strings",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "Blöcke im Inneren werden ignoriert",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "Setzen Sie Ihre Blöcke hier hinein, um zu verhindern, dass sie entfernt werden",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "Laden des Blocks aus",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "Blöcke aus der URL laden",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "Benachrichtigen",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "Erstellt Benachrichtigung",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "Gesamter Gewinn",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "Gibt den gesamten Gewinn zurück",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "Anzahl der Durchläufe",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "Gibt die Anzahl der Durchläufe seit dem Beginn",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "Fügen Sie ein Zeichen zu einer Nummer hinzu, um eine Schwelle auszugleichen.",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "Markt",
	"02349f7b8f107a4b438066130a593735f2d31609": "Neustarten im Fehlerfall (Mit Vorsicht verwenden)",
	"1f4698382842477e211eb46de81fa506f01a8c34": "Beide",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "Kontrakttyp:",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "Kerzenintervall:",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "Dauer:",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "Auszahlung:",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "Währung:",
	"911348bf6fef082476779805cd1bda16bef66d2d": "Schwellenverschiebung",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "Vorhersage:",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) Definieren Sie Ihren Handelskontrakt",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "Definieren Sie Ihren Handelskontrakt und starten Sie den Handel, fügen Sie Initialisierungen hier hinzu. (Läuft auf Start)",
	"eabf5342bcb460c4f8261faa18695d851712614a": "Melden Sie sich bitte an.",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "Alle Handelstypen sind erforderlich",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "ist die Kerze schwarz?",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "Überprüft, ob die gegebene Kerze schwarz ist; kommt „true” zurück, wenn der Schluss weniger offen ist, als die gegebene Kerze.",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "in Kerze",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "Lesen Sie ein Feld in einer Kerze (lesen Sie aus der Kerzenliste)",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "Bollinger Bänder",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "Eingabeliste",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "Zeitraum",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "Std. Dev. Up-Multiplikator",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "Std. Dev. Down-Multiplikator",
	"974da601086448d0060aeed90e53ddd5acd17b91": "Berechnet Bollinger Bänder (BB) aus einer befristeten Liste",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "Bollinger Bänder Array",
	"58de49791c64aba14e36e5887244a5ef088286cd": "Berechnet Bollinger Bänder (BB) Liste aus einer befristeten Liste",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "Exponentieller gleitender Durchschnitt",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "Berechnet Exponentiellen gleitenden Durchschnitt (exponentieller GD) aus einer befristeten Liste",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "Exponentieller gleitender Durchschnitt Array",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "Berechnet Exponentiell gleitende Durchschnitt-Liste (exponentieller GD) aus einer befristeten Werte-Liste",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "MACD-Array",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "Schnelle EMA Periode",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "Langsame EMA Periode",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "SMA Periode (fürs Signal)",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "Berechnet die Indikator für die Konvergenz/Divergenz des gleitenden Durchschnitts (MACD)-Liste von einer Liste",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "Relative Stärke Index",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "Relative Stärke Index (RSI) aus einer befristeten Liste",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "Relative Stärke Index Array",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "Berechnet den Relativen Stärke Index (RSI) aus einer befristeten Werte-Liste",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "Einfacher gleitender Durchschnitt",
	"347775a293c14362d492f019e677c965be1d6e7d": "Berechnet einfachen gleitenden Durchschnitt (einfacher GD) aus einer befristeten Liste",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "Einfacher gleitender Durchschnitt Array",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "Berechnet einfache gleitende Durchschnitt-Liste (einfacher GD) aus einer befristeten Werte-Liste",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Sekunden seit Epoche",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "Gibt die Epochenzeit wieder (Sekunden seit Epoche)",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "Durchlaufen Sie jede",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "Sekunde(n)",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "Durchlaufen Sie die Blöcke innerhalb von n Sekunden",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "Durchlaufen nach",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "Laufen Sie die Blöcke nach n Sekunden drinnen"
};

/***/ }),
/* 363 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "Logic",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "Math",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "Text",
	"4d064726954a17487f94e931f5b157b733ec22ed": "Advanced",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "List",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "Variable",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "Functions",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "Loop",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binary",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "Trade Definition",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "Before Purchase",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "During Purchase",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "After Purchase",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "Tick Analysis",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "Tools",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "Time",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "Candle",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "Misc.",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "Indicators",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "Reality Check",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "Options trading can become a real addiction, as can any other activity pushed to its limits. To avoid the danger of such an addiction, we provide a reality-check that gives you a summary of your trades and accounts on a regular basis.",
	"4152043e8c670075d2c919677e835edb0d923cab": "Please specify your preferred reality-check interval in minutes",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "Please enter a number between 10 to 120.",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "Continue Trading",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "Statement",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "Log out",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "Log in",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "Results",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "Summary",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "No. of runs",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "Total Stake",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "Total Payout",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "Win",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "Loss",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "Total Profit/Loss",
	"90eef613042c5a51f542421065b68b886d473807": "Balance",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "Trades",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "Number",
	"db1c784524e1b54011a95823026161f7c8517fe0": "Reference",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "Trade Type",
	"6541776503f0f949109cde78e6634d07d3528cd3": "Entry Spot",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "Exit Spot",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "Buy Price",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "Final Price",
	"772fbced18230220d2d9be1456be16fc1b271d25": "Profit/Loss",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Binary Bot",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "Trade More Efficiently Than You Ever Thought Possible",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "Interested in automating your preferred strategies for trading binary options?",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Binary Bot is our leading-edge programming tool which allows you to build trading apps with a simple “jigsaw puzzle-like” drag-and-drop function.",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "Dream up any number of binary options trading bots, from incredibly simple formulas to vastly complex algorithms. Then let them trade for you, even while you sleep.",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "Best of all, once you’ve built a bot, we can help you sell it to fellow traders in the",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Binary.com Shop",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "Receive 80% of the sales revenue from every purchase of your bot in our app store.",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "Begin Building a Bot Now",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "Need further assistance?",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "Contact us",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "Payout",
	"78d7103a319e808455d397513279d99f3b3f3768": "Stake",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "statement",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "ask price",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "payout",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "profit",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "contract type",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "entry spot",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "entry value",
	"7674920c033ca14277c577e19c037a6754d4fa80": "exit spot",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "exit value",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "barrier",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "result",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "Rise",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "Fall",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "No Change",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "string",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "number",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "green",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "blue",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "yellow",
	"78988010b890ce6f4d2136481f392787ec6d6106": "red",
	"062787aa328047e189774b3703d983b83938f6e9": "Higher",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "Lower",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "Touch",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "No Touch",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "Ends In",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "Ends Out",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "Stays In",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "Goes Out",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "Asian Up",
	"c098658ce3d3a258e4d155949a60072966b36db7": "Asian Down",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "Matches",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "Differs",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "Even",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "Odd",
	"18a63f5512afb5573e5b44deba78d629f0635317": "Over",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "Under",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "Open",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "High",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "Low",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "Close",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "Open Time",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "Ticks",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "Seconds",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "Minutes",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "Hours",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "Up/Down",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "Asians",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "Digits",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "Touch/No Touch",
	"f7de1f66f0979667da275b7e8996e805395025a1": "Ends In/Out",
	"a431deecd4c2258097adae418d496fe9a8179fee": "Stays In/Goes Out",
	"91a64e3f83c91acf336c631fba295f297f94c399": "Run After n Seconds",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "Run Every n Seconds",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "upper",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "middle",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "lower",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "Histogram",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "MACD",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "Signal",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "Expected non-empty array, but the given array is empty.",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "Expected non-empty array, given:",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "Expected non-empty array, but nothing was given.",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "Expected candle object, but the given object is not a candle.",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "Expected candle object, given:",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "Expected candle object, but nothing was given.",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "Expected tick, given:",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "Expected tick, but nothing was given.",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "must be a number, given:",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "cannot be zero.",
	"05a2f240d737a283370d315c199ba2671176f9b8": "indicator period must be less than the length of input list.",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "indicator period cannot be zero.",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "Maximum number of trades reached",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "Maximum loss amount reached",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "File is not supported:",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "Logged you out!",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "Connection lost before receiving the response from the server",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "Purchased",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "Blocks must be inside block holders, main blocks or functions",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "Blocks are loaded successfully",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "Download",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "Unrecognized file format.",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "Duration must be a positive integer",
	"11ee9c5d534cc8d22651092222b532917594161a": "Minimum duration is",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "Number of ticks must be between 5 and 10",
	"ace1342bc3720b77ce510b93074041e7386d209e": "Expiry time cannot be equal to start time",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "Prediction must be one digit",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "must be added inside the trade block",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "must be added inside the before purchase block",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "must be added inside the during purchase block",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "must be added inside the after purchase block",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "must be added inside",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "Click to select",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "Remote blocks to load must be a collection.",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "Target must be an xml file",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "This url is already loaded",
	"34c59389053701a04127f74d32315e0206e076f8": "An error occurred while trying to load the url",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "Make sure 'Access-Control-Allow-Origin' exists in the response from the server",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "Maximum allowed number of trades for each session is 100.",
	"c6513dc7b36426bcbf221917ff5deafced86a00f": "Both number of trades and loss amount have to be positive values.",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "Trade Limitations",
	"f90691af95e0735042635eb7fd2367812d800516": "Maximum number of trades",
	"a571293591257b7a4e97484de6054ab919bc3a04": "Maximum loss amount",
	"952f375412e89ff213a8aca383d18e5691354347": "Start",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "An error occurred, restarting...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "Restarting in",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "Cancel",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "Save blocks as",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "Filename",
	"bf33cc2e57180686002e873efb1564c214405c77": "Save As Collection",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "Save",
	"4a1e616226c329a94da7768bc0435a3284478010": "Save the existing blocks (xml file)",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "Next",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "Back",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "Done",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "Take a quick tour",
	"a48e81d4a8da67637b46725824177a959fe99b21": "Ready to learn how to use Binary Bot?",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "Do not ask me again.",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "No Thanks",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "Yes",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "Workspace",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "Drag and drop block files.",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "Download sample strategies",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "Make your own strategies",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "Blocks toolbox",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "Add more blocks from here to your bot.",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "Accounts",
	"f5c47fd3b3553b10441a06054078cea745177dea": "Login before starting your bot. Always test your strategies with the virtual account.",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Bot controls",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "Control your blocks. Hold the cursor on each button for more info.",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "Enjoy!",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "Want to report an issue or ask for help?",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "Click here",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "Result is",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "True if the result matches the selection",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "Contract Details",
	"011b5c3886f99f18d9239534f3423849fd75450b": "Returns the list of details for the finished contract",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) Get your trade result and trade again",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "Get the previous trade information and result, then trade again (Runs on trade finish)",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "Contract Detail:",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "Reads a selected option from contract details list",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "Contract Result",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "Returns the result of the finished contract",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "Trade Again",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "Runs the trade block again",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "Sell is available",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "True if sell at market is available",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) Watch and sell your purchased contract",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "Watch the purchased contract info and sell at market if available (Runs on contract update)",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "Sell at market",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "Sell at market.",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "Sell profit/loss",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "Returns the profit for sell at market.",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "Ask Price",
	"343fda69c73b78b84967055aae97f790c422adfd": "Ask Price for selected proposal",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) Watch and purchase your contract",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "Watch the tick stream and purchase the desired contract (Runs on tick update)",
	"87da93a46d143f6019979b3548414d9d7adabb35": "Payout for selected proposal",
	"160f06d4799c85021a810f68c5b517eea37a2737": "Purchase",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "Purchases a chosen contract.",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "Read",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "in",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "recent candle",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "Read the selected candle value in the nth recent candle",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "Direction is",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "True if the direction matches the selection",
	"05bef508aadd62bf3967dcf67d769da296f19989": "Tick Direction",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "Returns the tick direction received by a before purchase block, its value could be 'up' if the tick is more than before, 'down' if less than before and empty ('') if the tick is equal to the previous tick",
	"cdb31fc857f01a59f664413498293c714285f46d": "in candle list",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "get # from end",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "Get the nth recent candle",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "Last Digit",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "Returns the last digit of the latest tick",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "Candles List",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "Returns the candle list",
	"5e9023e299575f2bc81242b931c10019b63f407a": "Candle Values",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "Returns a list of the selected candle values",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "Last Tick",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "Returns the tick value received by a before purchase block",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "This block is called on every tick",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "You can use this block to analyze the ticks comming regardless of your trades",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "Ticks List",
	"17649cac8739adcae95e641f794880272ad33bd1": "Returns the list of tick values",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "Balance:",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "Get balance number or string",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "Blocks inside are ignored",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "Put your blocks in here to prevent them from being removed",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "Load Block From",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "Load blocks from url",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "Notify",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "Creates notification",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "Total Profit",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "Returns the total profit",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "No. Of Runs",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "Returns the number of runs since the beginning",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "Add sign to a number to make a Barrier Offset.",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "Market",
	"02349f7b8f107a4b438066130a593735f2d31609": "Restart On Error (Use with caution)",
	"1f4698382842477e211eb46de81fa506f01a8c34": "Both",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "Contract Type:",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "Candle Interval:",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "Duration:",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "Payout:",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "Currency:",
	"911348bf6fef082476779805cd1bda16bef66d2d": "Barrier Offset",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "Prediction:",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) Define your trade contract",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "Define your trade contract and start the trade, add initializations here. (Runs on start)",
	"eabf5342bcb460c4f8261faa18695d851712614a": "Please login.",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "All trade types are required",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "is candle black?",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "Checks if the given candle is black, returns true if close is less than open in the given candle.",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "in candle",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "Read a field in a candle (read from the Candles list)",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "Bollinger Bands",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "Input List",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "Period",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "Std. Dev. Up Multiplier",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "Std. Dev. Down Multiplier",
	"974da601086448d0060aeed90e53ddd5acd17b91": "Calculates Bollinger Bands (BB) from a list with a period",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "Bollinger Bands Array",
	"58de49791c64aba14e36e5887244a5ef088286cd": "Calculates Bollinger Bands (BB) list from a list with a period",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "Exponential Moving Average",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "Calculates Exponential Moving Average (EMA) from a list with a period",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "Exponential Moving Average Array",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "Calculates Exponential Moving Average (EMA) list from a list of values with a period",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "MACD Array",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "Fast EMA Period",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "Slow EMA Period",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "SMA Period (for Signal)",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "Calculates Moving Average Convergence Divergence (MACD) list from a list",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "Relative Strength Index",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "Relative Strength Index (RSI) from a list with a period",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "Relative Strength Index Array",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "Calculates Relative Strength Index (RSI) list from a list of values with a period",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "Simple Moving Average",
	"347775a293c14362d492f019e677c965be1d6e7d": "Calculates Simple Moving Average (SMA) from a list with a period",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "Simple Moving Average Array",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "Calculates Simple Moving Average (SMA) list from a list of values with a period",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Seconds Since Epoch",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "Returns the epoch time (seconds since epoch)",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "Run Every",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "Second(s)",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "Run the blocks inside every n seconds",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "Run After",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "Run the blocks inside after n seconds"
};

/***/ }),
/* 364 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "Logic",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "Math",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "Text",
	"4d064726954a17487f94e931f5b157b733ec22ed": "Advanced",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "List",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "Variable",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "Functions",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "Loop",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binary",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "Trade Definition",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "Before Purchase",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "During Purchase",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "After Purchase",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "Tick Analysis",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "Tools",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "Time",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "Candle",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "Misc.",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "Indicators",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "Reality Check",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "Options trading can become a real addiction, as can any other activity pushed to its limits. To avoid the danger of such an addiction, we provide a reality-check that gives you a summary of your trades and accounts on a regular basis.",
	"4152043e8c670075d2c919677e835edb0d923cab": "Please specify your preferred reality-check interval in minutes",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "Please enter a number between 10 to 120.",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "Continue Trading",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "Statement",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "Log out",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "Log in",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "Results",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "Summary",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "No. of runs",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "Total Stake",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "Total Payout",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "Win",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "Loss",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "Total Profit/Loss",
	"90eef613042c5a51f542421065b68b886d473807": "Balance",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "Trades",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "Number",
	"db1c784524e1b54011a95823026161f7c8517fe0": "Reference",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "Trade Type",
	"6541776503f0f949109cde78e6634d07d3528cd3": "Entry Spot",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "Exit Spot",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "Buy Price",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "Final Price",
	"772fbced18230220d2d9be1456be16fc1b271d25": "Profit/Loss",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Binary Bot",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "Trade More Efficiently Than You Ever Thought Possible",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "Interested in automating your preferred strategies for trading binary options?",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Binary Bot is our leading-edge programming tool which allows you to build trading apps with a simple “jigsaw puzzle-like” drag-and-drop function.",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "Dream up any number of binary options trading bots, from incredibly simple formulas to vastly complex algorithms. Then let them trade for you, even while you sleep.",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "Best of all, once you’ve built a bot, we can help you sell it to fellow traders in the",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Binary.com Shop",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "Receive 80% of the sales revenue from every purchase of your bot in our app store.",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "Begin Building a Bot Now",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "Need further assistance?",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "Contact us",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "Payout",
	"78d7103a319e808455d397513279d99f3b3f3768": "Stake",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "statement",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "ask price",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "payout",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "profit",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "contract type",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "entry spot",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "entry value",
	"7674920c033ca14277c577e19c037a6754d4fa80": "exit spot",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "exit value",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "barrier",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "result",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "Rise",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "Fall",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "No Change",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "string",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "number",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "green",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "blue",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "yellow",
	"78988010b890ce6f4d2136481f392787ec6d6106": "red",
	"062787aa328047e189774b3703d983b83938f6e9": "Higher",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "Lower",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "Touch",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "No Touch",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "Ends In",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "Ends Out",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "Stays In",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "Goes Out",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "Asian Up",
	"c098658ce3d3a258e4d155949a60072966b36db7": "Asian Down",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "Matches",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "Differs",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "Even",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "Odd",
	"18a63f5512afb5573e5b44deba78d629f0635317": "Over",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "Under",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "Open",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "High",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "Low",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "Close",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "Open Time",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "Ticks",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "Seconds",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "Minutes",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "Hours",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "Up/Down",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "Asians",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "Digits",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "Touch/No Touch",
	"f7de1f66f0979667da275b7e8996e805395025a1": "Ends In/Out",
	"a431deecd4c2258097adae418d496fe9a8179fee": "Stays In/Goes Out",
	"91a64e3f83c91acf336c631fba295f297f94c399": "Run After n Seconds",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "Run Every n Seconds",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "upper",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "middle",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "lower",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "Histogram",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "MACD",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "Signal",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "Expected non-empty array, but the given array is empty.",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "Expected non-empty array, given:",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "Expected non-empty array, but nothing was given.",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "Expected candle object, but the given object is not a candle.",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "Expected candle object, given:",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "Expected candle object, but nothing was given.",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "Expected tick, given:",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "Expected tick, but nothing was given.",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "must be a number, given:",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "cannot be zero.",
	"05a2f240d737a283370d315c199ba2671176f9b8": "indicator period must be less than the length of input list.",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "indicator period cannot be zero.",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "Maximum number of trades reached",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "Maximum loss amount reached",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "File is not supported:",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "Logged you out!",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "Connection lost before receiving the response from the server",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "Purchased",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "Blocks must be inside block holders, main blocks or functions",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "Blocks are loaded successfully",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "Download",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "Unrecognized file format.",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "Duration must be a positive integer",
	"11ee9c5d534cc8d22651092222b532917594161a": "Minimum duration is",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "Number of ticks must be between 5 and 10",
	"ace1342bc3720b77ce510b93074041e7386d209e": "Expiry time cannot be equal to start time",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "Prediction must be one digit",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "must be added inside the trade block",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "must be added inside the before purchase block",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "must be added inside the during purchase block",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "must be added inside the after purchase block",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "must be added inside",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "Click to select",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "Remote blocks to load must be a collection.",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "Target must be an xml file",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "This url is already loaded",
	"34c59389053701a04127f74d32315e0206e076f8": "An error occurred while trying to load the url",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "Make sure 'Access-Control-Allow-Origin' exists in the response from the server",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "Maximum allowed number of trades for each session is 100.",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "Both number of trades and loss amount are required.",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "Trade Limitations",
	"f90691af95e0735042635eb7fd2367812d800516": "Maximum number of trades",
	"a571293591257b7a4e97484de6054ab919bc3a04": "Maximum loss amount",
	"952f375412e89ff213a8aca383d18e5691354347": "Start",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "An error occurred, restarting...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "Restarting in",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "Cancel",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "Save blocks as",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "Filename",
	"bf33cc2e57180686002e873efb1564c214405c77": "Save As Collection",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "Save",
	"4a1e616226c329a94da7768bc0435a3284478010": "Save the existing blocks (xml file)",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "Next",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "Back",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "Done",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "Take a quick tour",
	"a48e81d4a8da67637b46725824177a959fe99b21": "Ready to learn how to use Binary Bot?",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "Do not ask me again.",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "No Thanks",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "Yes",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "Workspace",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "Drag and drop block files.",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "Download sample strategies",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "Make your own strategies",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "Blocks toolbox",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "Add more blocks from here to your bot.",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "Accounts",
	"f5c47fd3b3553b10441a06054078cea745177dea": "Login before starting your bot. Always test your strategies with the virtual account.",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Bot controls",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "Control your blocks. Hold the cursor on each button for more info.",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "Enjoy!",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "Want to report an issue or ask for help?",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "Click here",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "Result is",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "True if the result matches the selection",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "Contract Details",
	"011b5c3886f99f18d9239534f3423849fd75450b": "Returns the list of details for the finished contract",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) Get your trade result and trade again",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "Get the previous trade information and result, then trade again (Runs on trade finish)",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "Contract Detail:",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "Reads a selected option from contract details list",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "Contract Result",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "Returns the result of the finished contract",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "Trade Again",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "Runs the trade block again",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "Ask Price",
	"343fda69c73b78b84967055aae97f790c422adfd": "Ask Price for selected proposal",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) Watch and purchase your contract",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "Watch the tick stream and purchase the desired contract (Runs on tick update)",
	"87da93a46d143f6019979b3548414d9d7adabb35": "Payout for selected proposal",
	"160f06d4799c85021a810f68c5b517eea37a2737": "Purchase",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "Purchases a chosen contract.",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "Sell is available",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "True if sell at market is available",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) Watch and sell your purchased contract",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "Watch the purchased contract info and sell at market if available (Runs on contract update)",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "Sell at market",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "Sell at market.",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "Sell profit/loss",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "Returns the profit for sell at market.",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "Read",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "in",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "recent candle",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "Read the selected candle value in the nth recent candle",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "Direction is",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "True if the direction matches the selection",
	"05bef508aadd62bf3967dcf67d769da296f19989": "Tick Direction",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "Returns the tick direction received by a before purchase block, its value could be 'up' if the tick is more than before, 'down' if less than before and empty ('') if the tick is equal to the previous tick",
	"cdb31fc857f01a59f664413498293c714285f46d": "in candle list",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "get # from end",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "Get the nth recent candle",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "Last Digit",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "Returns the last digit of the latest tick",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "Candles List",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "Returns the candle list",
	"5e9023e299575f2bc81242b931c10019b63f407a": "Candle Values",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "Returns a list of the selected candle values",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "Last Tick",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "Returns the tick value received by a before purchase block",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "This block is called on every tick",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "You can use this block to analyze the ticks comming regardless of your trades",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "Ticks List",
	"17649cac8739adcae95e641f794880272ad33bd1": "Returns the list of tick values",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "Balance:",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "Get balance number or string",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "Blocks inside are ignored",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "Put your blocks in here to prevent them from being removed",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "Load Block From",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "Load blocks from url",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "Notify",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "Creates notification",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "Total Profit",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "Returns the total profit",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "No. Of Runs",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "Returns the number of runs since the beginning",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "Add sign to a number to make a Barrier Offset.",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "Market",
	"02349f7b8f107a4b438066130a593735f2d31609": "Restart On Error (Use with caution)",
	"1f4698382842477e211eb46de81fa506f01a8c34": "Both",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "Contract Type:",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "Candle Interval:",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "Duration:",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "Payout:",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "Currency:",
	"911348bf6fef082476779805cd1bda16bef66d2d": "Barrier Offset",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "Prediction:",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) Define your trade contract",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "Define your trade contract and start the trade, add initializations here. (Runs on start)",
	"eabf5342bcb460c4f8261faa18695d851712614a": "Please login.",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "All trade types are required",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "is candle black?",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "Checks if the given candle is black, returns true if close is less than open in the given candle.",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "in candle",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "Read a field in a candle (read from the Candles list)",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "Bollinger Bands",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "Input List",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "Period",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "Std. Dev. Up Multiplier",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "Std. Dev. Down Multiplier",
	"974da601086448d0060aeed90e53ddd5acd17b91": "Calculates Bollinger Bands (BB) from a list with a period",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "Bollinger Bands Array",
	"58de49791c64aba14e36e5887244a5ef088286cd": "Calculates Bollinger Bands (BB) list from a list with a period",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "Exponential Moving Average",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "Calculates Exponential Moving Average (EMA) from a list with a period",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "Exponential Moving Average Array",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "Calculates Exponential Moving Average (EMA) list from a list of values with a period",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "MACD Array",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "Fast EMA Period",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "Slow EMA Period",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "SMA Period (for Signal)",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "Calculates Moving Average Convergence Divergence (MACD) list from a list",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "Relative Strength Index",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "Relative Strength Index (RSI) from a list with a period",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "Relative Strength Index Array",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "Calculates Relative Strength Index (RSI) list from a list of values with a period",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "Simple Moving Average",
	"347775a293c14362d492f019e677c965be1d6e7d": "Calculates Simple Moving Average (SMA) from a list with a period",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "Simple Moving Average Array",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "Calculates Simple Moving Average (SMA) list from a list of values with a period",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Seconds Since Epoch",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "Returns the epoch time (seconds since epoch)",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "Run Every",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "Second(s)",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "Run the blocks inside every n seconds",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "Run After",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "Run the blocks inside after n seconds"
};

/***/ }),
/* 365 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "Logique",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "Mathématique",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "Texte",
	"4d064726954a17487f94e931f5b157b733ec22ed": "Options avancées",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "Liste",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "Text for Translation\nVariable",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "Fonctions",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "Boucle",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binaire",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "Définition de l'option",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "Avant l'achat",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "Pendant l'achat",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "Après l'achat",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "Analyse des ticks",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "Outils",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "Périodicité",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "Chandeliers",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "Divers",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "Indicateurs",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "Relevé d'activité",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "Le trading d'options binaires peut devenir une véritable addiction, au même titre que toute autre activité pratiquée de façon trop intensive. Pour éviter le danger d'une telle addiction, nous mettons en œuvre suivi réaliste de votre situation en vous fournissant régulièrement un relevé de vos opérations et de vos comptes.",
	"4152043e8c670075d2c919677e835edb0d923cab": "Veuillez indiquer la périodicité souhaitée en minutes pour les relevés d'activité",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "Veuillez saisir un chiffre entre 10 et 120.",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "Poursuivre les opérations de trading",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "Relevé",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "Déconnexion",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "Connexion",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "Résultats",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "Synthèse",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "Nb. d'exécutions",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "Investissement total",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "Paiement total",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "Gain",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "Perte",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "Total des profits/pertes",
	"90eef613042c5a51f542421065b68b886d473807": "Solde",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "Opérations",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "Nombre",
	"db1c784524e1b54011a95823026161f7c8517fe0": "Référence",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "Type d'option",
	"6541776503f0f949109cde78e6634d07d3528cd3": "Point d'entrée",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "Point de sortie",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "Prix d'achat",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "Prix final",
	"772fbced18230220d2d9be1456be16fc1b271d25": "Profits/pertes",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Binary Bot",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "Gérez vos opérations de trading plus efficacement que jamais",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "Vous envisagez d'automatiser vos meilleures stratégies de trading d'options binaires ?",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Binary Bot, notre outil de programmation de pointe, vous permet de développer des applications de trading sur un modèle en « puzzle », en ajoutant chaque « pièce » à l'aide d'une simple fonction de glisser-déposer.",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "Inventez autant de robots de trading d'options binaires que vous le souhaitez, des formules les plus simples aux algorithmes les plus complexes. Ensuite, laissez-les gérer vos opérations pour vous, même lorsque vous dormez.",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "Encore mieux : une fois votre robot terminé, nous pouvons vous aider à le vendre à d'autres traders sur la",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Boutique Binary.com",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "Vous percevrez 80 % des recettes de vente pour chaque achat de votre robot sur notre marché d'applications.",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "Commencez dès maintenant la création de votre robot",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "Besoin de renseignements supplémentaires ?",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "Contactez-nous",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "Paiement",
	"78d7103a319e808455d397513279d99f3b3f3768": "Investissement",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "relevé",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "prix de demande",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "paiement",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "profits",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "type de contrat",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "point d'entrée",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "valeur d'entrée",
	"7674920c033ca14277c577e19c037a6754d4fa80": "point de sortie",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "valeur de sortie",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "barrière",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "résultat",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "Hausse",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "Baisse",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "Pas de changement",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "string",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "nombre",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "vert",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "bleu",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "jaune",
	"78988010b890ce6f4d2136481f392787ec6d6106": "rouge",
	"062787aa328047e189774b3703d983b83938f6e9": "Supérieur",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "Inférieur",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "Touche",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "Ne touche pas",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "Termine dans la zone",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "Termine hors de la zone",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "Reste dans la zone",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "Sort de la zone",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "Asiatique/hausse",
	"c098658ce3d3a258e4d155949a60072966b36db7": "Asiatique/baisse",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "Égal",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "Différent",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "Pair",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "Impair",
	"18a63f5512afb5573e5b44deba78d629f0635317": "Au dessus",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "En dessous",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "Ouverture",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "Haut",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "Bas",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "Fermeture",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "Heure d'ouverture",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "Ticks",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "Secondes",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "Minutes",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "Heures",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "Hausse/Baisse",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "Asiatiques",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "Chiffres",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "Touche/Ne touche pas",
	"f7de1f66f0979667da275b7e8996e805395025a1": "Termine dans/hors de la zone",
	"a431deecd4c2258097adae418d496fe9a8179fee": "Reste dans/Sort de la zone",
	"91a64e3f83c91acf336c631fba295f297f94c399": "Exécuter après n secondes",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "Exécuter toutes les n secondes",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "supérieur",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "médian",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "inférieur",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "Histogram",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "MACD",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "Signal",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "Tableau non vide attendu, mais le tableau fourni est vide.",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "Tableau non vide attendu, fourni :",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "Tableau non vide attendu, mais rien n'a été fourni.",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "Objet de type chandelier attendu, mais l'objet fourni n'est pas un chandelier.",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "Objet de type chandelier attendu, fourni :",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "Objet de type chandelier attendu, mais rien n'a été fourni.",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "Tick attendu, fourni :",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "Tick attendu, mais rien n'a été fourni.",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "doit être un nombre, fourni :",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "ne peut être zéro.",
	"05a2f240d737a283370d315c199ba2671176f9b8": "la période de l'indicateur doit être inférieure à la longueur de la liste d'entrée.",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "la période de l'indicateur ne peut être zéro.",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "Nombre maximal de transactions atteint",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "Montant maximal de perte atteint",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "Format non pris en charge :",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "Vous avez été déconnecté !",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "Connexion perdue avant réception de la réponse du serveur",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "Acheté",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "Les blocs doivent être à l'intérieur des porte-blocs, des blocs principaux ou des fonctions principales",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "Les blocs ont bien été chargés",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "Télécharger",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "Format de fichier non reconnu.",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "La durée doit être un nombre entier positif",
	"11ee9c5d534cc8d22651092222b532917594161a": "La durée minimale est",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "Le nombre de ticks doit se situer entre 5 et 10",
	"ace1342bc3720b77ce510b93074041e7386d209e": "L'heure d'expiration ne peut être identique à l'heure de début",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "La prédiction doit être un chiffre",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "doit être ajouté dans le bloc de trading",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "doit être ajouté dans le bloc « avant l'achat »",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "doit être ajouté dans le bloc « pendant l'achat »",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "doit être ajouté dans le bloc « après l'achat »",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "doit être ajouté dans",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "Cliquez pour sélectionner",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "Les blocs distants à télécharger doivent être une collection.",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "La cible doit être un fichier xml",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "Cette URL est déjà chargée",
	"34c59389053701a04127f74d32315e0206e076f8": "Une erreur est survenue lors de la tentative de chargement de l'URL",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "Vérifiez l'existence de « Access-Control-Allow-Origin » dans la réponse du serveur",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "Le nombre maximal de transactions autorisées pour chaque session est de 100.",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "Le nombre de transactions et le montant de perte sont requis.",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "Limites de trading",
	"f90691af95e0735042635eb7fd2367812d800516": "Nombre maximal de transactions",
	"a571293591257b7a4e97484de6054ab919bc3a04": "Montant maximal des pertes",
	"952f375412e89ff213a8aca383d18e5691354347": "Début",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "Une erreur s'est produite, redémarrage en cours...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "Redémarrage dans",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "Annuler",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "Enregistrer les blocs sous",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "Nom de fichier",
	"bf33cc2e57180686002e873efb1564c214405c77": "Enregistrer en tant que collection",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "Enregistrer",
	"4a1e616226c329a94da7768bc0435a3284478010": "Enregistrer les blocs existants (fichier xml)",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "Suivant",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "Retour",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "Terminé",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "Accédez à un aperçu rapide",
	"a48e81d4a8da67637b46725824177a959fe99b21": "Êtes-vous prêt(e) à apprendre comment utiliser Binary Bot ?",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "Ne plus me le demander.",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "Non merci",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "Oui",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "Espace de travail",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "Utilisez le glisser-déposer pour ajouter des fichiers de bloc.",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "Téléchargez des exemples de stratégies",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "Élaborez vos propres stratégies",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "Boîte à outils des blocs",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "Ajoutez des blocs à votre robot à partir d'ici.",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "Comptes",
	"f5c47fd3b3553b10441a06054078cea745177dea": "Connectez-vous avant de démarrer votre robot. Veillez à toujours tester vos stratégies avec un compte virtuel.",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Commandes robot",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "Contrôlez vos blocs. Pour obtenir des informations supplémentaires, maintenez le curseur sur chaque bouton.",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "Nous vous souhaitons un agréable moment !",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "Vous souhaitez signaler un problème ou demander de l’aide ?",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "Cliquez ici",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "Le résultat est",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "Vrai si le résultat correspond à la sélection",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "Détails du contrat",
	"011b5c3886f99f18d9239534f3423849fd75450b": "Fournit la liste des informations relatives au contrat clôturé",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) Obtenir le résultat de votre opération et effectuer à nouveau une opération",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "Obtenir les informations et le résultat de l'opération précédente, puis effectuer à nouveau une opération (s'exécute à la clôture de l'opération)",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "Détail du contrat :",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "Affiche une option sélectionnée dans la liste des détails du contrat",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "Résultat du contrat",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "Fournit le résultat du contrat clôturé",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "Exécuter à nouveau l'opération",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "Exécute à nouveau le bloc de trading",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "Prix de la demande",
	"343fda69c73b78b84967055aae97f790c422adfd": "Prix de demande pour la proposition sélectionnée",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) Suivre et acheter votre contrat",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "Suivre le flux des ticks et acheter le contrat souhaité (s'exécute à la mise à jour des ticks)",
	"87da93a46d143f6019979b3548414d9d7adabb35": "Paiement pour la proposition sélectionnée",
	"160f06d4799c85021a810f68c5b517eea37a2737": "Acheter",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "Achète le contrat sélectionné.",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "Une option de vente est disponible",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "Vrai si la vente au prix du marché est disponible",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) Suivre et vendre le contrat acheté",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "Suivre les informations relatives au contrat acheté et vendre au prix du marché sicette option est disponible (s'exécute à la mise à jour du contrat)",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "Vendre au marché",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "Vendre au marché.",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "Profits/pertes de vente",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "Indique les profits pour une vente au prix du marché.",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "Lire",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "dans",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "chandelier récent",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "Afficher la valeur de chandelier sélectionnée dans le énième chandelier récent",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "La direction est",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "Vrai si la direction correspond à la sélection",
	"05bef508aadd62bf3967dcf67d769da296f19989": "Direction du tick",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "Indique la direction du tick reçu par un bloc « avant l'achat », sa valeur peut être « hausse » si le tick est supérieur au précédent, « baisse » si le tick est inférieur au précédent, ou vide ('') si le tick est égal au précédent",
	"cdb31fc857f01a59f664413498293c714285f46d": "dans la liste de chandeliers",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "get # from end",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "Obtenir le énième chandelier récent",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "Dernier chiffre",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "Indique le dernier chiffre du dernier tick",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "Liste de chandeliers",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "Fournit la liste des chandeliers",
	"5e9023e299575f2bc81242b931c10019b63f407a": "Valeurs de chandelier",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "Fournit une liste des valeurs de chandelier sélectionnées",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "Dernier tick",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "Indique la valeur de tick reçue par un bloc « avant l'achat »",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "Ce bloc est appelé pour chaque tick",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "Vous pouvez utiliser ce bloc pour analyser les ticks indépendamment de vos transactions",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "Liste des ticks",
	"17649cac8739adcae95e641f794880272ad33bd1": "Fournit la liste des valeurs de tick",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "Solde :",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "Get balance number or string",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "Les blocs situés à l'intérieur sont ignorés",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "Placez vos blocs ici pour empêcher leur suppression",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "Télécharger bloc à partir de",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "Télécharger des blocs à partir de l'URL",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "Notifier",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "Crée une notification",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "Total des profits",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "Indique le total des profits",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "Nb. d'exécutions",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "Indique le nombre d'exécutions depuis le début",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "Ajouter un signe à un nombre pour définir une Marge de barrière.",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "Marché",
	"02349f7b8f107a4b438066130a593735f2d31609": "Redémarrer après erreur (à utiliser avec prudence)",
	"1f4698382842477e211eb46de81fa506f01a8c34": "Les deux",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "Type de contrat :",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "Intevalle de chandelier :",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "Durée :",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "Paiement :",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "Devise :",
	"911348bf6fef082476779805cd1bda16bef66d2d": "Marge de barrière",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "Prédiction :",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) Définir votre contrat binaire",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "Définissez votre contrat de trading et initiez la transaction, ajoutez des initialisations ici. (Exécution à l'initialisation)",
	"eabf5342bcb460c4f8261faa18695d851712614a": "Veuillez vous connecter.",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "Tous les types de transaction sont requis",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "la bougie est-elle noire ?",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "Vérifie si la bougie concernée est noire et indique vrai si le cours de clôture est inférieur au cours d'ouverture dans la bougie en question.",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "dans la bougie",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "Afficher un champ dans un chandelier (afficher à partir de la liste des chandeliers)",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "Bandes de Bollinger",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "Liste d'entrée",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "Période",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "\nMultiplicateur Std. Dev. Up",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "Multiplicateur Std. Dev. Down",
	"974da601086448d0060aeed90e53ddd5acd17b91": "Calcule les bandes de Bolliger (BB) à partir d'une liste avec une période",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "Tableau des bandes de Bollinger",
	"58de49791c64aba14e36e5887244a5ef088286cd": "Calcule la liste des bandes de Bolliger (BB) à partir d'une liste avec une période",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "Moyenne mobile exponentielle",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "Calcule la moyenne mobile exponentielle (MME) à partir d'une liste avec une période",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "Tableau de la moyenne mobile exponentielle",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "Calcule la liste de moyenne mobile exponentielle (MME) à partir d'une liste de valeurs avec une période",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "MACD Array",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "Fast EMA Period",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "Slow EMA Period",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "SMA Period (for Signal)",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "Calculates Moving Average Convergence Divergence (MACD) list from a list",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "Relative Strength Index",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "Relative Strength Index (RSI) à partir d'une liste avec une période",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "Tableau du Relative Strength Index",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "Calcule la liste de Relative Strength Index (RSI) à partir d'une liste de valeurs avec une période",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "Moyenne mobile simple",
	"347775a293c14362d492f019e677c965be1d6e7d": "Calcule la moyenne mobile simple (MMS) à partir d'une liste avec une période",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "Tableau de la moyenne mobile simple",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "Calcule laliste de moyenne mobile simple (MMS) à partir d'une liste de valeurs avec une période",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Secondes depuis époque",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "Indique le temps d'époque (secondes depuis époque)",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "Exécuter toutes les",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "Seconde(s)",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "Exécuter les blocs inclus toutes les n secondes",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "Exécuter après",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "Exécuter les blocs inclus après n secondes"
};

/***/ }),
/* 366 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "Logika",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "Matematika",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "Teks",
	"4d064726954a17487f94e931f5b157b733ec22ed": "Lanjutan",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "Daftar",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "Variabel",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "Fungsi",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "Loop",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binary",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "Definisi Trading",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "Sebelum Membeli",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "Selama Pembelian",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "Setelah Pembelian",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "Analisis Tik",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "Alat",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "Waktu",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "Lilin",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "Lainnya.",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "Indikator",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "Pemeriksaan Realitas",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "Trading opsi dapat menyebabkan ketagihan, sebagaimana kegiatan lain yang dilakukan di luar batas. Untuk menghidari bahaya ketagihan tersebut, kami menyediakan pengecekan yang memberikan ringkasan trading Anda secara teratur.",
	"4152043e8c670075d2c919677e835edb0d923cab": "Silahkan tentukan interval cek-realitas pilihan Anda dalam menit",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "Masukkan angka antara 10 dan 120.",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "Melanjutkan trading",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "Pernyataan",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "Keluar",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "Masuk",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "Hasil",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "Ringkasan",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "Jumlah Kontrak",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "Total Modal",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "Total Hasil",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "Untung",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "Rugi",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "Total Untung/Rugi",
	"90eef613042c5a51f542421065b68b886d473807": "Saldo",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "Trading",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "Jumlah",
	"db1c784524e1b54011a95823026161f7c8517fe0": "Referensi",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "Jenis Trading",
	"6541776503f0f949109cde78e6634d07d3528cd3": "Spot Awal",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "Spot Akhir",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "Harga Beli",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "Harga Akhir",
	"772fbced18230220d2d9be1456be16fc1b271d25": "Untung/Rugi",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Binary Bot",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "Trading Lebih Efisien Dari Apa Yang Anda Pikirkan",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "Tertarik untuk mengotomatisasi strategi pilihan Anda pada trading opsi binary?",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Binary Bot adalah alat pemrograman utama yang memungkinkan Anda untuk membangun aplikasi trading sesederhana menyusun “potongan-potongan gambar“ dengan fungsi tarik dan lepaskan.",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "Impikan berapapun jumlah trading opsi binary bot, dari formula yang sangat sederhana hingga menggunakan algoritma yang lebih kompleks. Kemudian biarkan mereka bertrading untuk Anda, meskipun Anda sedang tidur.",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "Terpenting, kami dapat membantu Anda menjual bot Anda kepada trader di",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Toko Binary.com",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "Dapatkan 80% dari penjualan pada setiap pembelian bot Anda pada app store kami.",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "Mulai Bangun Bot Sekarang",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "Perlu bantuan lebih lanjut?",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "Hubungi kami",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "Hasil",
	"78d7103a319e808455d397513279d99f3b3f3768": "Modal",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "pernyataan",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "harga ask",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "hasil",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "keuntungan",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "jenis kontrak",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "spot awal",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "nilai awal",
	"7674920c033ca14277c577e19c037a6754d4fa80": "spot akhir",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "nilai akhir",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "batasan",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "hasil",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "Rise",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "Fall",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "Tidak Berubah",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "string",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "jumlah",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "hijau",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "biru",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "kuning",
	"78988010b890ce6f4d2136481f392787ec6d6106": "merah",
	"062787aa328047e189774b3703d983b83938f6e9": "Higher",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "Lower",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "Touch",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "No Touch",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "Ends In",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "Ends Out",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "Stays In",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "Goes Out",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "Asian Up",
	"c098658ce3d3a258e4d155949a60072966b36db7": "Asian Down",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "Matches",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "Differs",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "Even",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "Odd",
	"18a63f5512afb5573e5b44deba78d629f0635317": "Over",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "Under",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "Open",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "High",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "Low",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "Close",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "Waktu Buka",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "Tik",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "Detik",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "Menit",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "Jam",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "Up/Down",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "Asian",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "Digit",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "Touch/No Touch",
	"f7de1f66f0979667da275b7e8996e805395025a1": "Ends In/Out",
	"a431deecd4c2258097adae418d496fe9a8179fee": "Stays In/Goes Out",
	"91a64e3f83c91acf336c631fba295f297f94c399": "Tampilkan Setelah n Detik",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "Tampilkan Setiap n Detik",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "atas",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "tengah",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "bawah",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "Histogram",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "MACD",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "Signal",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "Aarray tidak boleh kosong, array yang diberikan kosong.",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "Array tidak boleh kosong, yang diberikan:",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "Array tidak boleh kosong, array tidak diberikan.",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "Objek berupa candle, namun objek yang diberikan bukan candle.",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "Objek berupa candle, yang diberikan:",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "Objek candle, namun tidak ada yang diberikan.",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "Tik diperlukan, diberi:",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "Diperlukan tik, namun tidak ada yang diberi.",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "harus berupa angka, yang diberi:",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "tidak boleh nol.",
	"05a2f240d737a283370d315c199ba2671176f9b8": "periode indikator harus lebih pendek dari daftar input.",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "periode indikator tidak boleh nol.",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "Jumlah maksimum trading tercapai",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "Jumlah kerugian maksimum tercapai",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "File tidak didukung:",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "Mengeluarkan Anda!",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "Koneksi terputus sebelum menerima respon dari server",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "Dibeli",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "Blok harus berada didalam pemegang blok, blok utama atau fungsi",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "Blok berhasil dimuat",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "Men-download",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "Format file tidak dikenali.",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "Durasi harus bilangan bulat positif",
	"11ee9c5d534cc8d22651092222b532917594161a": "Durasi minimum",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "Jumlah tik harus antara 5 dan 10",
	"ace1342bc3720b77ce510b93074041e7386d209e": "Waktu berakhir tidak dapat setara dengan waktu mulai",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "Analisa harus berupa satu digit",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "harus ditambahkan dalam blok trading",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "harus ditambahkan didalam sebelum membeli blok",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "harus ditambahkan di dalamnya selama pembelian blok",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "harus ditambahkan kedalam setelah pembelian blok",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "harus ditambahkan didalam",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "Klik untuk memilih",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "Remote blok untuk memuat harus berupa koleksi.",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "Target harus berupa file xml",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "Url ini telah dimuat",
	"34c59389053701a04127f74d32315e0206e076f8": "Error terjadi saat mencoba untuk memuat url",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "Pastikan 'Access-Control-Allow-Origin' tersedia pada respon dari server",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "Maksimal jumlah transaksi diperbolehkan untuk setiap sesi adalah 100.",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "Kedua nilai jumlah trading dan kerugian diperlukan.",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "Batasan Trading",
	"f90691af95e0735042635eb7fd2367812d800516": "Jumlah maksimum kontrak",
	"a571293591257b7a4e97484de6054ab919bc3a04": "Jumlah maksimum kerugian",
	"952f375412e89ff213a8aca383d18e5691354347": "Mulai",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "Terjadi error, restart...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "Merestart pada",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "Batal",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "Simpan balok sebagai",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "Nama file",
	"bf33cc2e57180686002e873efb1564c214405c77": "Simpan Sebagai Koleksi",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "Simpan",
	"4a1e616226c329a94da7768bc0435a3284478010": "Simpan blok yang ada (xml file)",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "Berikutnya",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "Kembali",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "Selesai",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "Mengambil tur singkat",
	"a48e81d4a8da67637b46725824177a959fe99b21": "Siap untuk belajar bagaimana menggunakan Bot Binary?",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "Jangan tanya saya lagi.",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "Tidak terima kasih",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "Ya",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "Ruang kerja",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "Drag dan drop file blok.",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "Men-download contoh strategi",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "Membuat strategi Anda sendiri",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "Perlengkapan blok",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "Tambahkan lebih banyak blok kedalam bot Anda.",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "Akun",
	"f5c47fd3b3553b10441a06054078cea745177dea": "Login sebelum memulai bot Anda. Selalu menguji strategi Anda dengan akun virtual.",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Kontrol bot",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "Kontrol blok. Tahan kursor tombol masing-masing untuk info lebih lanjut.",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "Selamat Menikmati!",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "Ingin melaporkan masalah atau memerlukan bantuan?",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "Klik di sini",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "Hasilnya adalah",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "Benar jika hasilnya sesuai pilihan",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "Rincian Kontrak",
	"011b5c3886f99f18d9239534f3423849fd75450b": "Menampilkan daftar rinci untuk kontrak yang telah diselesaikan",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) Dapatkan hasil trading Anda dan bertrading lagi",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "Dapatkan informasi trading sebelumnya beserta hasil, kemudian trading lagi (Tampilkan kontrak yang telah selesai)",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "Rincian Kontrak:",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "Baca pilihan opsi dari daftar rincian kontrak",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "Hasil Kontrak",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "Tampilkan hasil dari kontrak yang telah diselesaikan",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "Trading Kembali",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "Tampilkan blok kembali",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "Harga Ask",
	"343fda69c73b78b84967055aae97f790c422adfd": "Harga Ask bagi proposal yang dipilih",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) Lihat dan beli kontrak Anda",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "Lihat stream tik dan beli kontrak yang Anda inginkan (Tampilkan tik terbaru)",
	"87da93a46d143f6019979b3548414d9d7adabb35": "Hasil bagi proposal yang dipilih",
	"160f06d4799c85021a810f68c5b517eea37a2737": "Beli",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "Beli kontrak terpilih.",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "Penjualan tersedia",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "Benar jika penjualan pada pasar tersedia",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) Lihat dan jual kontrak yang Anda beli",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "Lihat info kontrak yang dibeli dan jual pada pasar jika tersedia (Tampilkan kontrak terbaru)",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "Jual pada pasar",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "Jual pada pasar.",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "Jual untung/rugi",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "Menampilkan keuntungan jual pada pasar.",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "Baca",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "dalam",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "candle terbaru",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "Baca nilai candle terpilih dalam candle terbaru",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "Arah adalah",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "Benar jika arah sesuai dengan pilihan",
	"05bef508aadd62bf3967dcf67d769da296f19989": "Arah Tik",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "Menampilkan arah tik yang diterima sebelum membeli blok, nilai bisa 'up' jika nilai tik lebih dari sebelumnya, 'down' jika kurang dari sebelumnya dan kosong ('') jika tik sama dengan tik sebelumnya",
	"cdb31fc857f01a59f664413498293c714285f46d": "dalam daftar candle",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "dapatkan # dari akhir",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "Dapatkan candle terbaru",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "Digit Terakhir",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "Menampilkan digit terakhir pada tik terbaru",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "Daftar Candle",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "Menampilkan daftar candle",
	"5e9023e299575f2bc81242b931c10019b63f407a": "Nilai Candle",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "Menampilkan daftar nilai candle yang dipilih",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "Tik Terakhir",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "Menampilkan nilai tik yang diterima sebelum pembelian blok",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "Blok ini menampilkan setiap tik",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "Anda dapat menggunakan blok untuk menganalisa tik apapun kontrak Anda",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "Daftar Tik",
	"17649cac8739adcae95e641f794880272ad33bd1": "Menampilkan daftar nilai tik",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "Saldo:",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "Dapatkan sisa saldo atau string",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "Blok di dalam tidak diperhitungkan",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "Tempatkan blok di sini untuk mencegah penghapusan",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "Muat Blok Dari",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "Muat blok daru url",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "Memberitahukan",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "Menciptakan pemberitahuan",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "Total Profit",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "Menampilkan total profit",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "Jumlah Transaksi",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "Menampilkan jumlah transaksi sejak awal",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "Tambahkan tanda untuk membuat Barrier Offset.",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "Pasar",
	"02349f7b8f107a4b438066130a593735f2d31609": "Restart pada error (Gunakan dengan hati-hati)",
	"1f4698382842477e211eb46de81fa506f01a8c34": "Kedua",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "Jenis Kontrak:",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "Cande Interval:",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "Durasi:",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "Hasil:",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "Mata uang:",
	"911348bf6fef082476779805cd1bda16bef66d2d": "Barrier Offset",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "Analisa:",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) Tentukan kontrak trading Anda",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "Tentukan kontrak trading Anda dan mulai trading, tambahkan inisialisasi disini. (Tampilkan pada awal)",
	"eabf5342bcb460c4f8261faa18695d851712614a": "Silahkan masuk.",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "Semua jenis kontrak diperlukan",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "apakah candle hitam?",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "Periksa apakah candle adalah hitam, laba adalah benar jika close lebih rendah dari open pada candle.",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "dalam candle",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "Membaca sebuah kolom pada candle (Baca dari daftar Candle)",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "Bollinger Bands",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "Daftar Input",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "Periode",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "Std. Dev. Up Multiplier",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "Std. Dev. Down Multiplier",
	"974da601086448d0060aeed90e53ddd5acd17b91": "Menghitung daftar Bollinger band (BB) menggunakan periode",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "Bollinger band Array",
	"58de49791c64aba14e36e5887244a5ef088286cd": "Menghitung daftar Bollinger band (BB) menggunakan periode",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "Exponential Moving Average",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "Menghitung Exponential Moving Average (EMA) dari daftar dengan periode",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "Susunan Exponential Moving Average",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "Menghitung daftar Exponential Moving Average (EMA) dari daftar nilai dengan periode",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "MACD Array",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "Fast EMA Period",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "Slow EMA Period",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "Periode SMA (untuk sinyal)",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "Menghitung Moving Average Convergence Divergence (MACD) dari daftar",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "Indeks Kekuatan Relatif",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "Indeks Kekuatan Relatif (RSI) adalah dari daftar dengan periode",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "Array Indeks Kekuatan Relatif",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "Menghitung daftar Indeks Kekuatan Relatif (RSI) dari nilai dengan periode",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "Simple Moving Average",
	"347775a293c14362d492f019e677c965be1d6e7d": "Menghitung Simple Moving Average (SMA) dari daftar dengan periode",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "Susunan Simple Moving Average",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "Menghitung daftar Simple Moving Average (SMA) dari daftar nilai dengan periode",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Detik Sejak Jangka Waktu",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "Kembali ke jangka waktu (detik setelah jangka waktu)",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "Menjalankan Setiap",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "Detik",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "Tampilkan blok didalam setiap detik",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "Tampilkan Setelah",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "Tampilkan blok setelah beberapa detik"
};

/***/ }),
/* 367 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "Logica",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "Matematica",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "Testo",
	"4d064726954a17487f94e931f5b157b733ec22ed": "Avanzato",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "Elenco",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "Variabile",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "Funzioni",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "Loop",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binario",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "Definizione di trade",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "Prima dell'acquisto",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "Durante l'acquisto",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "Dopo l'acquisto",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "Analisi dei tick",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "Strumenti",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "Orario",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "Candela",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "Misc.",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "Indicatori",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "Controllo della situazione",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "Il trading in opzioni può diventare una vera e propria dipendenza, così come qualsiasi altra attività spinta al limite. Per evitare il pericolo di tale dipendenza, ti forniamo un controllo della situazione in grado di offrirti regolarmente la sintesi dei tuoi trade e dei tuoi account.",
	"4152043e8c670075d2c919677e835edb0d923cab": "Indica l'intervallo di tempo preferito, espresso in minuti, per il controllo della situazione",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "Inserire un numero compreso tra 10 e 120.",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "Continua il trading",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "Statement",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "Esci",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "Accedi",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "Risultati",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "Riepilogo",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "N. di utilizzi",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "Puntata totale",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "Payout totale",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "Vincita",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "Perdita",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "Profitto/Perdita totale",
	"90eef613042c5a51f542421065b68b886d473807": "Saldo",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "Trade",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "Numero",
	"db1c784524e1b54011a95823026161f7c8517fe0": "Riferimento",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "Tipologia di trade",
	"6541776503f0f949109cde78e6634d07d3528cd3": "Spot d'ingresso",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "Spot d'uscita",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "Prezzo d'acquisto",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "Prezzo finale",
	"772fbced18230220d2d9be1456be16fc1b271d25": "Profitto/Perdita",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Binary Bot",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "Negozia nel modo in assoluto più efficiente",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "Sei interessato ad automatizzare le tue strategie preferite per il trading in opzioni binarie?",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Binary Bot è il nostro strumento di programmazione all'avanguardia che ti consente di costruire app di trading con una semplice funzione \"trascina e rilascia\" come un puzzle.",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "Dream up any number of binary options trading bots, from incredibly simple formulas to vastly complex algorithms. Then let them trade for you, even while you sleep.",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "Best of all, once you’ve built a bot, we can help you sell it to fellow traders in the",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Shop di Binary.com",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "Ricevi l'80% dei ricavi delle vendite da ogni acquisto del tuo bot nel nostro app store.",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "Inizia a costruire un bot ora",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "Hai bisogno di ulteriore assistenza?",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "Contattaci",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "Payout",
	"78d7103a319e808455d397513279d99f3b3f3768": "Puntata",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "statement",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "chiedi prezzo",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "payout",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "profitto",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "tipo di contratto",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "spot d'ingresso",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "valore iniziale",
	"7674920c033ca14277c577e19c037a6754d4fa80": "spot d'uscita",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "valore finale",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "barriera",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "risultato",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "Aumento",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "Diminuzione",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "Nessuna variazione",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "stringa",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "numero",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "verde",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "blu",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "giallo",
	"78988010b890ce6f4d2136481f392787ec6d6106": "rosso",
	"062787aa328047e189774b3703d983b83938f6e9": "Superiore",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "Inferiore",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "Touch",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "No Touch",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "Finisce tra",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "Termina fuori",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "Stays In",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "Goes Out",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "Asian Up",
	"c098658ce3d3a258e4d155949a60072966b36db7": "Asian Down",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "La cifra combacia",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "La cifra differisce",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "Pari",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "Dispari",
	"18a63f5512afb5573e5b44deba78d629f0635317": "Sopra",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "Sotto",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "Apri",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "High",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "Low",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "Chiudi",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "Orario d'apertura",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "Tick",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "Secondi",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "Minuti",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "Ore",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "Up/Down",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "Asians",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "Digits",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "Touch/No Touch",
	"f7de1f66f0979667da275b7e8996e805395025a1": "Ends In/Out",
	"a431deecd4c2258097adae418d496fe9a8179fee": "Stays In/Goes Out",
	"91a64e3f83c91acf336c631fba295f297f94c399": "Usa dopo n secondi",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "Usa ogni n secondi",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "upper",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "middle",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "lower",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "Histogram",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "MACD",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "Signal",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "Expected non-empty array, but the given array is empty.",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "Expected non-empty array, given:",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "Expected non-empty array, but nothing was given.",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "Expected candle object, but the given object is not a candle.",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "Expected candle object, given:",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "Expected candle object, but nothing was given.",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "Expected tick, given:",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "Expected tick, but nothing was given.",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "must be a number, given:",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "non può essere zero.",
	"05a2f240d737a283370d315c199ba2671176f9b8": "il periodo dell'indicatore deve essere inferiore alla lunghezza dell'elenco degli input.",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "il periodo dell'indicatore non può essere zero.",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "Maximum number of trades reached",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "Maximum loss amount reached",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "Il file non è supportato:",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "Sei uscito!",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "Connessione persa prima di ricevere la risposta dal server",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "Acquistato",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "Blocks must be inside block holders, main blocks or functions",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "I blocchi sono stati caricati con successo",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "Scarica",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "Formato di file non riconosciuto.",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "La durata deve essere un numero intero positivo",
	"11ee9c5d534cc8d22651092222b532917594161a": "La durata minima è",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "Il numero di tick deve essere compreso tra 5 e 10",
	"ace1342bc3720b77ce510b93074041e7386d209e": "L'orario di scadenza non può essere uguale all'orario di inizio",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "Prediction must be one digit",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "deve essere aggiunto all'interno del blocco del trade",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "must be added inside the before purchase block",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "must be added inside the during purchase block",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "must be added inside the after purchase block",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "must be added inside",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "Clicca per selezionare",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "Per caricare blocchi da remoto devono essere una raccolta.",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "La destinazione deve essere un file xml",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "Questo url è già stato caricato",
	"34c59389053701a04127f74d32315e0206e076f8": "Si è verificato un errore durante il tentativo di caricare l'url",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "Make sure 'Access-Control-Allow-Origin' exists in the response from the server",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "Maximum allowed number of trades for each session is 100.",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "Both number of trades and loss amount are required.",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "Trade Limitations",
	"f90691af95e0735042635eb7fd2367812d800516": "Maximum number of trades",
	"a571293591257b7a4e97484de6054ab919bc3a04": "Maximum loss amount",
	"952f375412e89ff213a8aca383d18e5691354347": "Start",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "Si è verificato un errore, riavviare...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "Restarting in",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "Annulla",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "Salva i blocchi come",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "Nome del file",
	"bf33cc2e57180686002e873efb1564c214405c77": "Salva come raccolta",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "Salva",
	"4a1e616226c329a94da7768bc0435a3284478010": "Save the existing blocks (xml file)",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "Next",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "Back",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "Done",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "Take a quick tour",
	"a48e81d4a8da67637b46725824177a959fe99b21": "Ready to learn how to use Binary Bot?",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "Do not ask me again.",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "No Thanks",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "Yes",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "Workspace",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "Drag and drop block files.",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "Download sample strategies",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "Make your own strategies",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "Blocks toolbox",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "Add more blocks from here to your bot.",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "Accounts",
	"f5c47fd3b3553b10441a06054078cea745177dea": "Login before starting your bot. Always test your strategies with the virtual account.",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Bot controls",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "Control your blocks. Hold the cursor on each button for more info.",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "Enjoy!",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "Want to report an issue or ask for help?",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "Click here",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "Il risultato è",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "True if the result matches the selection",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "Dettagli del contratto",
	"011b5c3886f99f18d9239534f3423849fd75450b": "Returns the list of details for the finished contract",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) Get your trade result and trade again",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "Get the previous trade information and result, then trade again (Runs on trade finish)",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "Contract Detail:",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "Reads a selected option from contract details list",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "Contract Result",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "Returns the result of the finished contract",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "Negozia di nuovo",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "Runs the trade block again",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "Chiedi prezzo",
	"343fda69c73b78b84967055aae97f790c422adfd": "Ask Price for selected proposal",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) Watch and purchase your contract",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "Watch the tick stream and purchase the desired contract (Runs on tick update)",
	"87da93a46d143f6019979b3548414d9d7adabb35": "Payout for selected proposal",
	"160f06d4799c85021a810f68c5b517eea37a2737": "Acquista",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "Purchases a chosen contract.",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "La vendita è disponibile",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "True if sell at market is available",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) Watch and sell your purchased contract",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "Watch the purchased contract info and sell at market if available (Runs on contract update)",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "Vendi sul mercato",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "Vendi sul mercato.",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "Profitto/perdita della vendita",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "Returns the profit for sell at market.",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "Leggi",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "in",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "candela recente",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "Read the selected candle value in the nth recent candle",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "La direzione è",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "True if the direction matches the selection",
	"05bef508aadd62bf3967dcf67d769da296f19989": "Tick Direction",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "Returns the tick direction received by a before purchase block, its value could be 'up' if the tick is more than before, 'down' if less than before and empty ('') if the tick is equal to the previous tick",
	"cdb31fc857f01a59f664413498293c714285f46d": "nell'elenco delle candele",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "ottieni # dalla fine",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "Get the nth recent candle",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "Ultima cifra",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "Returns the last digit of the latest tick",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "Elenco delle candele",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "Returns the candle list",
	"5e9023e299575f2bc81242b931c10019b63f407a": "Valori delle candele",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "Returns a list of the selected candle values",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "Ultimo tick",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "Returns the tick value received by a before purchase block",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "This block is called on every tick",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "You can use this block to analyze the ticks comming regardless of your trades",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "Elenco dei tick",
	"17649cac8739adcae95e641f794880272ad33bd1": "Returns the list of tick values",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "Saldo:",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "Get balance number or string",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "Blocks inside are ignored",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "Put your blocks in here to prevent them from being removed",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "Carica il blocco da",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "Carica i blocchi dall'url",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "Notifica",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "Crea la notifica",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "Profitto totale",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "Returns the total profit",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "N. di utilizzi",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "Returns the number of runs since the beginning",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "Add sign to a number to make a Barrier Offset.",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "Mercato",
	"02349f7b8f107a4b438066130a593735f2d31609": "Restart On Error (Use with caution)",
	"1f4698382842477e211eb46de81fa506f01a8c34": "Entrambi",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "Tipo di contratto:",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "Intervallo della candela:",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "Durata:",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "Payout:",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "Valuta:",
	"911348bf6fef082476779805cd1bda16bef66d2d": "Barrier Offset",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "Previsione:",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) Define your trade contract",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "Define your trade contract and start the trade, add initializations here. (Runs on start)",
	"eabf5342bcb460c4f8261faa18695d851712614a": "Effettua il login.",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "Sono richieste tutte le tipologie di trade",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "la candela è nera?",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "Checks if the given candle is black, returns true if close is less than open in the given candle.",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "sulla candela",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "Read a field in a candle (read from the Candles list)",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "Bande di Bollinger",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "Elenco di input",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "Periodo",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "Std. Dev. Up Multiplier",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "Std. Dev. Down Multiplier",
	"974da601086448d0060aeed90e53ddd5acd17b91": "Calcola le Bande di Bollinger (BB) da un elenco con un periodo",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "Bollinger Bands Array",
	"58de49791c64aba14e36e5887244a5ef088286cd": "Calcola un elenco di Bande di Bollinger (BB) da un elenco con un periodo",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "Exponential Moving Average",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "Calculates Exponential Moving Average (EMA) from a list with a period",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "Exponential Moving Average Array",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "Calculates Exponential Moving Average (EMA) list from a list of values with a period",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "MACD Array",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "Fast EMA Period",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "Slow EMA Period",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "SMA Period (for Signal)",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "Calculates Moving Average Convergence Divergence (MACD) list from a list",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "Relative Strength Index",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "Relative Strength Index (RSI) from a list with a period",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "Relative Strength Index Array",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "Calculates Relative Strength Index (RSI) list from a list of values with a period",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "Media mobile semplice",
	"347775a293c14362d492f019e677c965be1d6e7d": "Calcola la Media mobile semplice (SMA) da un elenco con un periodo",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "Simple Moving Average Array",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "Calcola la Media mobile semplice (SMA) da un elenco di valori con un periodo",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Secondi dall'epoca",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "Returns the epoch time (seconds since epoch)",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "Usa ogni",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "Secondo(i)",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "Usa i blocchi all'interno ogni n secondi",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "Usa dopo",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "Usa i blocchi all'interno dopo n secondi"
};

/***/ }),
/* 368 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "Logika",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "Matematyka",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "Tekst",
	"4d064726954a17487f94e931f5b157b733ec22ed": "Zaawansowane",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "Lista",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "Zmienne",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "Funkcje",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "Pętla",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binary",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "Definicja zakładu",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "Przed zakupem",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "Podczas zakupu",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "Po zakupie",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "Analiza najmniejszych zmian ceny",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "Narzędzia",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "Czas",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "Świeca",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "Różne",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "Wskaźniki",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "Bieżąca kontrola konta",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "Handel opcjami może stać się poważnym uzależnieniem, tak jak wszystkie inne czynności, którym poświęcamy zbyt wiele czasu. Aby zapobiec niebezpieczeństwu takiego uzależnienia, umożliwiamy sprawdzanie rzeczywistej sytuacji na bieżąco, co zapewnia Ci regularne zestawienie Twoich zakładów i kont.",
	"4152043e8c670075d2c919677e835edb0d923cab": "Proszę określić w minutach preferowany odstęp czasu pomiędzy kontrolami konta",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "Podaj liczbę z przedziału 10–120",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "Kontynuuj handlowanie",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "Stan konta",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "Wyloguj",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "Zaloguj",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "Wyniki",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "Podsumowanie",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "Liczba uruchomień",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "Całkowita stawka",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "Całkowita wypłata",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "Wygrana",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "Przegrana",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "Całkowity zysk/ całkowita strata",
	"90eef613042c5a51f542421065b68b886d473807": "Saldo",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "Zakłady",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "Liczba",
	"db1c784524e1b54011a95823026161f7c8517fe0": "Odwołanie",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "Rodzaj zakładu",
	"6541776503f0f949109cde78e6634d07d3528cd3": "Pozycja wejściowa",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "Pozycja wyjściowa",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "Cena zakupu",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "Cena końcowa",
	"772fbced18230220d2d9be1456be16fc1b271d25": "Zysk/strata",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Bot Binary",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "Jeszcze wygodniejsze handlowanie",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "Czy interesuje Cię zautomatyzowanie swoich ulubionych strategii handlu opcjami binarnymi?",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Bot Binary to najnowocześniejsze narzędzie programistyczne pozwalające tworzyć aplikacje handlowe przy użyciu prostej funkcji „przeciągnij i upuść”.",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "Wymyśl dowolną liczbę botów do handlu opcjami binarnymi – od najprostszych formuł po niezwykle skomplikowane algorytmy – i pozwól, by handlowały za Ciebie, nawet gdy śpisz.",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "A co najważniejsze, po stworzeniu bota możemy pomóc Ci go sprzedać innym graczom w",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Sklepie Binary.com",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "Otrzymasz 80% kwoty sprzedaży każdego ze swoich botów w naszym sklepie.",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "Rozpocznij tworzenie bota już teraz",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "Potrzebujesz pomocy?",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "Skontaktuj się z nami",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "Wypłata",
	"78d7103a319e808455d397513279d99f3b3f3768": "Stawka",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "stan konta",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "cena ofertowa",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "wypłata",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "zysk",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "typ kontraktu",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "pozycja wejściowa",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "wartość wejściowa",
	"7674920c033ca14277c577e19c037a6754d4fa80": "pozycja wyjściowa",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "wartość wyjściowa",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "limit",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "wynik",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "Wzrost",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "Spadek",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "Bez zmian",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "ciąg",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "liczba",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "zielony",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "niebieski",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "żółty",
	"78988010b890ce6f4d2136481f392787ec6d6106": "czerwony",
	"062787aa328047e189774b3703d983b83938f6e9": "Wyższe",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "Niższe",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "Osiągnie",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "Nie osiągnie",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "Zakończy się w",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "Zakończy się poza",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "Pozostanie na danym poziomie",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "Przekroczy",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "Azjatycki – Wzrost",
	"c098658ce3d3a258e4d155949a60072966b36db7": "Azjatycki – Spadek",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "Zgadza się",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "Różni się",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "Parzysta",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "Nieparzysta",
	"18a63f5512afb5573e5b44deba78d629f0635317": "Powyżej",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "Poniżej",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "Otwórz",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "Wysoki",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "Niski",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "Zamknij",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "Godziny otwarcia",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "Najmniejsze zmiany ceny",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "Sekundy",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "Minuty",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "Godziny",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "Góra/dół",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "Azjatyckie",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "Cyfry",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "Osiągnie/nie osiągnie",
	"f7de1f66f0979667da275b7e8996e805395025a1": "Zakończy się w/poza",
	"a431deecd4c2258097adae418d496fe9a8179fee": "Pozostanie w/poza",
	"91a64e3f83c91acf336c631fba295f297f94c399": "Uruchom po n sek.",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "Uruchamiaj co n sek.",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "wyższy",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "średni",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "niższy",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "Histogram",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "MACD",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "Sygnał",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "Szereg nie może być pusty. Podany szereg jest pusty.",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "Szereg nie może być pusty. Podano:",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "Szereg nie może być pusty. Nic nie podano.",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "Należy podać obiekt świecowy. Podany obiekt nie jest świecą.",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "Należy podać obiekt świecowy. Podano:",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "Należy podać obiekt świecowy. Nic nie podano.",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "Należy podać najmniejszą zmianę ceny. Podano:",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "Należy podać najmniejszą zmianę ceny. Nic nie podano.",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "musi być liczbą, podano:",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "nie może być zerem.",
	"05a2f240d737a283370d315c199ba2671176f9b8": "okres wskaźnika musi być krótszy niż okres listy wejściowej.",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "okres wskaźnika nie może być równy zeru.",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "Zawarto już maksymalną liczbę zakładów",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "Została osiągnięta maksymalna kwota straty",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "Nieobsługiwany plik:",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "Wylogowano!",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "Utracono połączenie zanim uzyskano odpowiedź z serwera",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "Dokonano zakupu",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "Bloki muszą znajdować się między symbolami bloków, głównymi blokami lub funkcjami",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "Załadowano bloki",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "Pobierz",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "Nieznany format pliku.",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "Czas trwania musi być dodatnią liczbą całkowitą",
	"11ee9c5d534cc8d22651092222b532917594161a": "Minimalny czas trwania to",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "Liczba zmian ceny musi mieścić się w przedziale od 5 do 10",
	"ace1342bc3720b77ce510b93074041e7386d209e": "Czas wygaśnięcia nie może być taki sam jak czas rozpoczęcia",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "Przewidywanie musi mieć wartość jednej cyfry",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "należy dodać wewnątrz bloku Zakład",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "należy dodać wewnątrz bloku Przed zakupem",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "należy dodać wewnątrz bloku Podczas zakupu",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "należy dodać wewnątrz bloku Po zakupie",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "musi zostać dodany wewnątrz",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "Kliknij, aby wybrać",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "Zdalne bloki do załadowania muszę być zbiorem.",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "Plik docelowy musi być plikiem xml",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "Ten adres URL jest już załadowany",
	"34c59389053701a04127f74d32315e0206e076f8": "Podczas próby załadowania adresu URL wystąpił błąd",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "Upewnij się, że odpowiedź z serwera zawiera: „Access-Control-Allow-Origin”",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "Maksymalna liczba zawieranych zakładów w każdej sesji wynosi 100.",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "Wymagana jest zarówno liczba zakładów, jak i kwota straty.",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "Ograniczenia dot. zakładów",
	"f90691af95e0735042635eb7fd2367812d800516": "Maksymalna liczba zakładów",
	"a571293591257b7a4e97484de6054ab919bc3a04": "Maksymalna kwota straty",
	"952f375412e89ff213a8aca383d18e5691354347": "Start",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "Wystąpił błąd, trwa ponowne uruchamianie...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "Ponowne uruchomienie za",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "Anuluj",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "Zapisz bloki jako",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "Nazwa pliku",
	"bf33cc2e57180686002e873efb1564c214405c77": "Zapisz jako kolekcję",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "Zapisz",
	"4a1e616226c329a94da7768bc0435a3284478010": "Zapisz istniejące bloki (plik xml)",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "Dalej",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "Wstecz",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "Gotowe",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "Zobacz krótki przewodnik",
	"a48e81d4a8da67637b46725824177a959fe99b21": "Chcesz nauczyć się, jak korzystać z Binary Bot?",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "Nie pytaj ponownie.",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "Nie, dziękuję",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "Tak",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "Obszar roboczy",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "Przeciągnij i upuść pliki bloku.",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "Pobierz przykładowe strategie",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "Stwórz własne strategie",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "Zestaw narzędzi do tworzenia bloków",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "Dodaj stąd więcej bloków do swojego bota.",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "Konta",
	"f5c47fd3b3553b10441a06054078cea745177dea": "Zaloguj się przed uruchomieniem bota. Zawsze testuj strategie, korzystając z konta wirtualnego.",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Kontrola bota",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "Kontroluj swoje bloki. Zatrzymaj kursor na poszczególnych przyciskach, aby uzyskać więcej informacji.",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "Powodzenia!",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "Chcesz zgłosić problem lub poprosić o pomoc?",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "Kliknij tutaj",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "Wynik",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "Prawda, jeśli wynik jest zgodny z wyborem",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "Szczegóły kontraktu",
	"011b5c3886f99f18d9239534f3423849fd75450b": "Zwraca listę szczegółów dla zakończonego kontraktu",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) Uzyskaj wynik swojego zakładu i handluj ponownie",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "Uzyskaj informacje o poprzednim zakładzie i jego wynik, po czym handluj ponownie (Uruchamia się w momencie zakończenia zakładu)",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "Szczegóły kontraktu:",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "Wczytuje wybraną opcję z listy szczegółów kontraktu",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "Wynik kontraktu",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "Zwaraca wynik zakończonego kontraktu",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "Handluj ponownie",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "Uruchamia ponownie blok handlowy",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "Cena ofertowa",
	"343fda69c73b78b84967055aae97f790c422adfd": "Cena ofertowa dla wybranej propozycji",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) Obserwuj i dokonaj zakupu swojego kontraktu",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "Obserwuj strumień zmian cen i dokonaj zakupu wybranego kontraktu (Uruchamia się przy aktualizacji najmniejszych zmian cen)",
	"87da93a46d143f6019979b3548414d9d7adabb35": "Wypłata dla wybranej propozycji",
	"160f06d4799c85021a810f68c5b517eea37a2737": "Zakup",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "Kupuje wybrany kontrakt.",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "Dostępna jest opcja sprzedaży",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "Prawda, jeśli opcja sprzedaży na rynku jest dostępna",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) Obserwuj i sprzedaj swój zakupiony kontrakt",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "Zobacz informacje o zakupionym kontrakcie i sprzedaj go na rynku, jeśli taka opcja jest dostępna (Uruchamia się w momencie aktualizacji kontraktu)",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "Sprzedaj na rynku",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "Sprzedaj na rynku.",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "Zysk/strata ze sprzedaży",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "Pokazuje zysk ze sprzedaży na rynku.",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "Przeczytaj",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "w",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "ostatniej świecy",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "Zapoznaj się z wybranymi wartościami ostatniej świecy: nth",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "Kierunek",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "Prawda, jeśli kierunek jest zgodny z wyborem",
	"05bef508aadd62bf3967dcf67d769da296f19989": "Kierunek zmiany ceny",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "Zwraca kierunek zmiany ceny otrzymany przez blok Przed zakupem, wartość może być „w górę”, jeśli najmniejsza zmiana ceny jest większa niż wcześniej lub „w dół”, jeśli jest mniejsza niż wcześniej, bądź pusta (''), jeśli najmniejsza zmiana ceny jest równa poprzedniej najmniejszej zmianie ceny",
	"cdb31fc857f01a59f664413498293c714285f46d": "na liście świec",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "uzyskaj # od końca",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "Pokaż ostatnią świecę: nth",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "Ostatnia cyfra",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "Zwraca ostatnią cyfrę ostatniej najmniejszej zmiany ceny",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "Lista świec",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "Zwraca listę świec",
	"5e9023e299575f2bc81242b931c10019b63f407a": "Wartości świecy",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "Zwraca listę wybranych wartości świecy",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "Ostatnia najmniejsza zmiana ceny",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "Zwraca wartość najmniejszej zmiany ceny otrzymaną przez blok Przed zakupem",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "Blok jest wywoływany przy każdej najmniejszej zmianie ceny",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "Możesz korzystać z tego bloku w celu analizowania nadchodzących zmian ceny bez względu na twoje zakłady",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "Lista zmian ceny",
	"17649cac8739adcae95e641f794880272ad33bd1": "Zwaraca listę wartości najmniejszej zmiany ceny",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "Saldo:",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "Uzyskaj numer salda lub ciąg",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "Bloki wewnętrzne są ignorowane",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "Umieść tu swoje bloki, aby mieć pewność, że nie zostaną usunięte",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "Załaduj bloki z",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "Załaduj bloki z adresu URL",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "Powiadom",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "Tworzy powiadomienia",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "Całkowity zysk",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "Zwraca całkowity zysk",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "Liczba uruchomień",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "Zwraca liczbę uruchomień od początku funkcjonowania",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "Dodaj znak do liczby, aby utworzyć wyrównanie limitu.",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "Rynek",
	"02349f7b8f107a4b438066130a593735f2d31609": "Zrestartuj w przypadku błędu (używaj ostrożnie)",
	"1f4698382842477e211eb46de81fa506f01a8c34": "Oba",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "Rodzaj kontraktu:",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "Interwał świecy:",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "Czas trwania:",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "Wypłata:",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "Waluta:",
	"911348bf6fef082476779805cd1bda16bef66d2d": "Wyrównanie limitu",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "Przewidywanie:",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) Zdefiniuj swój kontrakt",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "Określ swój kontrakt i rozpocznij zakład, dodaj dane inicjowania tutaj. (Uruchamia się przy starcie)",
	"eabf5342bcb460c4f8261faa18695d851712614a": "Proszę się zalogować.",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "Wymagane są wszystkie rodzaje zakładów",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "czy świeca jest czarna?",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "Sprawdza, czy dana świeca jest czarna; zwraca wartość prawda, jeśli wartość zamknij jest mniejsza niż wartość otwórz w przypadku danej świecy.",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "w świecy",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "Przeczytaj pole w świecy (przeczytaj z listy świecy)",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "Wstęgi Bollingera",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "Lista wejściowa",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "Okres",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "Mnożnik odch. stand. w górę",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "Mnożnik odch. stand. w dół",
	"974da601086448d0060aeed90e53ddd5acd17b91": "Oblicza wstęgę Bollingera (BB) z listy z okresem",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "Szereg wstęgi Bollingera",
	"58de49791c64aba14e36e5887244a5ef088286cd": "Oblicza listę wstęg Bollingera (BB) z listy z poprawnym okresem",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "Wykładnicza średnia krocząca",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "Oblicza wykładniczą średnią kroczącą (EMA) z listy z okresem",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "Szereg wykładniczej średniej kroczącej",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "Oblicza wykładniczą średnią kroczącą (EMA) z listy wartości z okresem",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "Szereg MACD",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "Okres szybkiej EMA",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "Okres wolnej EMA",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "Okres SMA (dla sygnału)",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "Oblicza listę wskaźnika MACD z listy",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "Wskaźnik względnej siły",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "Wskaźnik względnej siły (RSI) z listy z okresem",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "Szereg wskaźnika względnej siły",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "Oblicza listę wskaźnika RSI (wskaźnik względnej siły) z listy wartości z okresem",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "Prosta średnia krocząca",
	"347775a293c14362d492f019e677c965be1d6e7d": "Oblicza prostą średnią kroczącą (EMA) z listy z okresem",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "Szereg prostej średniej wykładniczej",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "Oblicza prostą średnią kroczącą (SMA) z listy wartości z okresem",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Sekundy od epoki",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "Zwraca czas epoki (sekundy od epoki)",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "Uruchom co",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "Sek.",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "Uruchamiaj bloki wewnątrz co n sek.",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "Uruchom po",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "Uruchom bloki wewnątrz po n sek."
};

/***/ }),
/* 369 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "Lógica",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "Matemática",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "Texto",
	"4d064726954a17487f94e931f5b157b733ec22ed": "Avançado",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "Lista",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "Variável",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "Funções",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "Loop",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binary",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "Definição da negociação",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "Antes da aquisição",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "Durante a aquisição",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "Depois da aquisição",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "Análise de tique-taques",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "Ferramentas",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "Tempo",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "Vela",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "Diversos",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "Indicadores",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "Verificação da realidade",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "A negociação de opções pode se tornar um verdadeiro vício, tal como qualquer outra atividade levada até ao limite. Para evitar os perigos de tal vício, fornecemos uma verificação de realidade que lhe proporciona um resumo de todas as suas negociações e conta regularmente.",
	"4152043e8c670075d2c919677e835edb0d923cab": "Especifique o seu intervalo preferido, em minutos, para a verificação da realidade",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "Insira um número entre 10 e 120.",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "Continue a negociar",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "Statement",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "Sair",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "Conectar-se",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "Resultados",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "Resumo",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "Nº de execuções",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "Aposta total",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "Prêmio total",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "Ganho",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "Perda",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "Lucro/Perda total",
	"90eef613042c5a51f542421065b68b886d473807": "Saldo",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "Negociações",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "Número",
	"db1c784524e1b54011a95823026161f7c8517fe0": "Referência",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "Tipo de negociação",
	"6541776503f0f949109cde78e6634d07d3528cd3": "Preço de entrada",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "Preço de saída",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "Preço de compra",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "Preço final",
	"772fbced18230220d2d9be1456be16fc1b271d25": "Lucro/Perda",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Robô Binary",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "Negocie de forma mais eficiente do que você alguma vez imaginou ser possível",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "Está interessado em automatizar as suas estratégias preferidas para a negociação de opções binárias?",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "O robô Binary é a nossa ferramenta de programação de ponta que lhe permite criar aplicativos de negociação com uma função simples de arrastar e soltar no estilo quebra cabeças.",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "Invente qualquer número de robôs de negociação Binary, desde fórmulas simples a algoritmos complexos. Depois deixe-os negociar por você, mesmo enquanto dorme.",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "O melhor de tudo é que, uma vez que você construiu o robô, podemos ajudá-lo a vendê-lo a outros negociadores na",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "loja Binary.com",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "Receba 80% da receita de vendas de cada compra do seu robô na nossa loja de aplicativos.",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "Comece a desenvolver um novo robô já",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "Precisa de mais assistência?",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "Contate-nos",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "Prêmio",
	"78d7103a319e808455d397513279d99f3b3f3768": "Aposta",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "statement",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "preço de venda",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "prêmio",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "lucro",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "tipo de contrato",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "preço de entrada",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "valor de entrada",
	"7674920c033ca14277c577e19c037a6754d4fa80": "preço de saída",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "valor de saída",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "barreira",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "resultado",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "Sobe",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "Fall",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "Sem alteração",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "string",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "número",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "verde",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "azul",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "amarelo",
	"78988010b890ce6f4d2136481f392787ec6d6106": "vermelho",
	"062787aa328047e189774b3703d983b83938f6e9": "Acima",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "Abaixo",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "Toca",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "Não toca",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "Termina dentro",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "Termina fora",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "Fica dentro",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "Sai fora",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "Asiático acima",
	"c098658ce3d3a258e4d155949a60072966b36db7": "Asiático abaixo",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "Combina",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "Difere",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "Par",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "Ímpar",
	"18a63f5512afb5573e5b44deba78d629f0635317": "Over",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "Under",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "Open",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "Alto",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "Baixo",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "Close",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "Hora de abertura",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "Tique-taques",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "Segundos",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "Minutos",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "Horas",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "Acima/Abaixo",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "Asians",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "Dígitos",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "Toca/Não toca",
	"f7de1f66f0979667da275b7e8996e805395025a1": "Termina Dentro/Fora",
	"a431deecd4c2258097adae418d496fe9a8179fee": "Fica dentro/Sai fora",
	"91a64e3f83c91acf336c631fba295f297f94c399": "Executar-se após n segundos",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "Executar-se a cada n segundos",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "upper",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "middle",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "lower",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "Histograma",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "MACD",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "Sinal",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "Expected non-empty array, but the given array is empty.",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "Expected non-empty array, given:",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "Expected non-empty array, but nothing was given.",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "Expected candle object, but the given object is not a candle.",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "Expected candle object, given:",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "Expected candle object, but nothing was given.",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "Expected tick, given:",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "Expected tick, but nothing was given.",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "must be a number, given:",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "não pode ser zero.",
	"05a2f240d737a283370d315c199ba2671176f9b8": "período do indicador deve ser menor do que o comprimento da lista de entradas.",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "período do indicador não pode ser zero.",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "Número máximo de negociações atingido",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "Valor máximo de perdas atingido",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "Arquivo não é suportado:",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "Logged you out!",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "Conexão perdida antes de receber resposta do servidor",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "Purchased",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "Blocos devem estar dentro de contentores de blocos, blocos principais ou funções",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "Os blocos foram carregados com sucesso",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "Baixar",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "Formato de arquivo não reconhecido.",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "A duração deve ser um número inteiro positivo",
	"11ee9c5d534cc8d22651092222b532917594161a": "A duração mínima é",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "O número de tique-taques deve ser entre 5 e 10",
	"ace1342bc3720b77ce510b93074041e7386d209e": "A hora de expiração não pode ser igual à hora de início",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "A previsão deve ser de um dígito",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "deve ser adicionado dentro do bloco de negociação",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "deve ser adicionado dentro do bloco de pré-compra",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "must be added inside the during purchase block",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "deve ser adicionado dentro do bloco de pós-compra",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "deve ser adicionado dentro",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "Clique para selecionar",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "Blocos remotos a serem carregados devem ser uma coleção.",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "O destino deve ser um arquivo xml",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "Este URL já foi carregado",
	"34c59389053701a04127f74d32315e0206e076f8": "Ocorreu um erro ao tentar carregar o url",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "Certifique-se de que 'Access-Control-Allow-Origin' existe na resposta do servidor",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "O número máximo de negociações permitido em cada sessão é 100.",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "Tanto o número de negociações como o valor de perdas são necessários.",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "Limitações de negociação",
	"f90691af95e0735042635eb7fd2367812d800516": "Número máximo de negociações",
	"a571293591257b7a4e97484de6054ab919bc3a04": "Valor máximo de perdas",
	"952f375412e89ff213a8aca383d18e5691354347": "Iniciar",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "Ocorreu um erro, reiniciando...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "Reiniciando em",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "Cancelar",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "Salvar bloco como",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "Nome do arquivo",
	"bf33cc2e57180686002e873efb1564c214405c77": "Salvar como coleção",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "Salvar",
	"4a1e616226c329a94da7768bc0435a3284478010": "Salvar os blocos existentes (arquivo xml)",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "Próximo",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "Voltar",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "Concluído",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "Faça uma breve visita",
	"a48e81d4a8da67637b46725824177a959fe99b21": "Está pronta a aprender como usar o Binary Bot?",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "Não me pergunte novamente.",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "Não obrigado",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "Sim",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "Espaço de trabalho",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "Arrastar e soltar arquivos de bloco.",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "Baixar estratégias de amostra",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "Criar as suas próprias estratégias",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "Caixa de ferramentas de blocos",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "Adicione mais blocos daqui ao seu bot.",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "Contas",
	"f5c47fd3b3553b10441a06054078cea745177dea": "Conecte-se antes de iniciar o seu bot. Teste sempre as suas estratégias com a conta virtual.",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Controles do bot",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "Controle os seus blocos. Mantenha o cursos sobre cada botão para ver mais informações.",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "Divirta-se!",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "Deseja relatar um problema ou pedir ajuda?",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "Clique aqui",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "O resultado é",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "Verdadeiro se o resultado corresponder à seleção",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "Dados do contrato",
	"011b5c3886f99f18d9239534f3423849fd75450b": "Devolve a lista de detalhes do contrato terminado",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) Receba o resultado da sua negociação e negocie novamente",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "Receba as informações e o resultado da última negociação e depois negocie novamente (Executa-se no final da negociação)",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "Dado do contrato:",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "Lê uma opção selecionada da lista de dados do contrato",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "Resultado do contrato",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "Devolve o resultado do contrato terminado",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "Negocie novamente",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "Executa o bloco de negociação novamente",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "Preço de venda",
	"343fda69c73b78b84967055aae97f790c422adfd": "Preço de venda da proposta selecionada",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) Acompanhe e compre o seu contrato",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "Acompanhe o fluxo de tique-taques e compre o contrato desejado (Executa-se na atualização dos tique-taques)",
	"87da93a46d143f6019979b3548414d9d7adabb35": "Prêmio da proposta selecionada",
	"160f06d4799c85021a810f68c5b517eea37a2737": "Purchase",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "Compra um contrato selecionado.",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "Venda disponível",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "Verdadeiro se venda no mercado estiver disponível",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) Acompanhe e venda o seu contrato adquirido",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "Acompanhe as informações do contrato adquirido e venda no mercado caso disponível (Executa-se na atualização do contrato)",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "Sell at market",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "Vender no mercado.",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "Vender lucro/perda",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "Returns the profit for sell at market.",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "Read",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "in",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "vela recente",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "Read the selected candle value in the nth recent candle",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "Direction is",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "Verdadeiro se a direção combina com a seleção",
	"05bef508aadd62bf3967dcf67d769da296f19989": "Direção dos tique-taques",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "Devolve a direção dos tique-taques recebida por um bloco de pré-compra, o seu valor pode ser \"acima\" se o seu valor for superior ao anterior, \"abaixo\" se for inferior ao anterior e vazio (\") se o tique-taque for igual ao anterior",
	"cdb31fc857f01a59f664413498293c714285f46d": "na lista de velas",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "get # from end",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "Get the nth recent candle",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "Último dígito",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "Devolve o último dígito do tique-taque mais recente",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "Lista de velas",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "Devolve a lista de velas",
	"5e9023e299575f2bc81242b931c10019b63f407a": "Valores das velas",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "Devolve uma lista de valores das velas selecionadas",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "Último tique-taque",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "Devolve o valor do tique-taque recebido por um bloco de pré-compra",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "Este bloco é chamado em todos os tique-taques",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "You can use this block to analyze the ticks comming regardless of your trades",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "Lista de tique-taques",
	"17649cac8739adcae95e641f794880272ad33bd1": "Devolve a lista de valores de tique-taques",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "Balance:",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "Get balance number or string",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "Os blocos no interior são ignorados",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "Coloque os seus blocos aqui dentro para prevenir que sejam removidos",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "Carregar blocos de",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "Carregar blocos do URL",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "Notificar",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "Cria notificação",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "Lucro total",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "Devolve o lucro total",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "N.º de execuções",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "Devolve o número de execuções desde o início",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "Adicionar sinal a um número para criar uma deslocação de barreira.",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "Mercado",
	"02349f7b8f107a4b438066130a593735f2d31609": "Reiniciar perante erro (use com cautela)",
	"1f4698382842477e211eb46de81fa506f01a8c34": "Both",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "Tipo de contrato:",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "Intervalo da vela:",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "Duração:",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "Prêmio:",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "Moeda:",
	"911348bf6fef082476779805cd1bda16bef66d2d": "Deslocação da barreira",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "Previsão:",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) Defina o contrato da sua negociação",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "Defina o contrato da sua negociação e inicie a negociação. Adicione inicializações aqui. (Executa-se ao iniciar)",
	"eabf5342bcb460c4f8261faa18695d851712614a": "Conecte-se.",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "Todos os tipos de negociação são necessários",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "é a vela preta?",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "Verifique se a determinada vela é preta, devolverá a resposta \"verdadeiro\" se o fecho for inferior à abertura na determinada vela.",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "na vela",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "Leia um campo numa vela (ler da lista de velas)",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "Bandas de Bollinger",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "Lista de entradas",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "Período",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "Std. Dev. Up Multiplier",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "Std. Dev. Down Multiplier",
	"974da601086448d0060aeed90e53ddd5acd17b91": "Calcula Bandas de Bollinger (BB) a partir de uma lista com um período",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "Série de Bandas de Bollinger",
	"58de49791c64aba14e36e5887244a5ef088286cd": "Calcula Bandas de Bollinger (BB) a partir de uma lista com um período",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "Média Móvel Exponencial",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "Calcula uma Média Móvel Exponencial (EMA - Exponential Moving Average) a partir de uma lista com um período",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "Série de média móvel exponencial",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "Calcula uma lista de Médias Móveis Exponenciais (EMA - Exponential Moving Average) a partir de uma lista de valores com um período",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "Série MACD",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "Período de rápida MME",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "Período de lenta MME",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "Período de MMS (para o sinal)",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "Calcula a lista de Convergência e Divergência de Médias Móveis (MACD - Moving Average Convergence / Divergence) a partir de uma lista",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "Índice de Força Relativa",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "Índice de Força Relativa (RSI) de uma lista com um período",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "Série do Índice de Força Relativa",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "Calcula a lista do Índice de Força Relativa (RSI) de uma lista de valores com um período",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "Média Móvel Simples",
	"347775a293c14362d492f019e677c965be1d6e7d": "Calcula uma Média Móvel Simples (SMA - Simple Moving Average) a partir de uma lista com um período",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "Série de Médias Móveis Simples",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "Calcula uma lista de Médias Móveis Simples (SMA - Simple Moving Average) a partir de uma lista de valores dentro de um período de tempo",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Segundos desde o epoch",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "Devolve o horário epoch (segundos desde o epoch)",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "Executar a cada",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "Segundo(s)",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "Executar os blocos no interior a cada n segundos",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "Executar depois de",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "Executar os blocos no interior após n segundos"
};

/***/ }),
/* 370 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "Логика",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "Математика",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "Текст",
	"4d064726954a17487f94e931f5b157b733ec22ed": "Расширенные",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "Список",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "Переменная",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "Функции",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "Цикл",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binary",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "Определение контракта",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "До покупки",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "Во время покупки",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "После покупки",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "Анализ тиков",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "Инструменты",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "Время",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "Свечи",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "Разное",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "Индикаторы",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "Проверка реальности",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "Торговля бинарными опционами может вызывать зависимость, как и любая другая деятельность, доведенная до крайности. Чтобы избежать опасности возникновения подобной зависимости, мы проводим проверку реальности и предоставляем регулярный отчёт о Ваших сделках и счетах.",
	"4152043e8c670075d2c919677e835edb0d923cab": "Пожалуйста, укажите желаемый интервал для проверки реальности (в минутах)",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "Пожалуйста, введите число от 10 до 120.",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "Продолжить торговлю",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "История счёта",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "Выход",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "Вход",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "Результаты",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "Детали",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "Кол-во выполнений",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "Общая ставка",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "Общая выплата",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "Прибыль",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "Убыток",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "Общая прибыль/убыток",
	"90eef613042c5a51f542421065b68b886d473807": "Баланс",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "Контракты",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "Номер",
	"db1c784524e1b54011a95823026161f7c8517fe0": "Ссылка",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "Тип контракта",
	"6541776503f0f949109cde78e6634d07d3528cd3": "Входная котировка",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "Выходная котировка",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "Цена покупки",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "Цена продажи",
	"772fbced18230220d2d9be1456be16fc1b271d25": "Прибыль/убыток",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Binary Bot",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "Торгуйте ещё лучше и эффективнее",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "Хотите автоматизировать свои любимые стратегии для торговли бинарными опционами?",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Робот Binary — революционно-новый инструмент, позволяющий создавать торговые приложения, благодаря простой функции \"перетащить и отпустить,\" похожей на паззл.",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "Создавайте любое количество роботов для торговли бинарными опционами, закладывая в них простые формулы или сложнейшие алгоритмы. Позвольте роботам торговать за Вас, даже когда Вы спите.",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "Когда Вы создадите своего робота, мы можем помочь Вам продать его другим трейдерам через",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Магазин Binary.com",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "Получайте доход от продаж в размере до 80% от каждой покупки Вашего робота в нашем магазине приложений.",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "Начните создавать робота",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "Нужна помощь?",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "Свяжитесь с нами",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "Выплата",
	"78d7103a319e808455d397513279d99f3b3f3768": "Ставка",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "история счёта",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "цена аск",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "выплата",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "прибыль",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "тип контракта",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "входная котировка",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "значение на входе",
	"7674920c033ca14277c577e19c037a6754d4fa80": "выходная котировка",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "значение на выходе",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "барьер",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "результат",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "Повышение",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "Падение",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "Без изменений",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "строка",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "номер",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "зелёный",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "синий",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "жёлтый",
	"78988010b890ce6f4d2136481f392787ec6d6106": "красный",
	"062787aa328047e189774b3703d983b83938f6e9": "Выше",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "Ниже",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "Касание",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "Нет касания",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "Заканчивается внутри",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "Заканчивается вне",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "Останется внутри",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "Выйдет за пределы",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "Азиатские вверх",
	"c098658ce3d3a258e4d155949a60072966b36db7": "Азиатские вниз",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "Совпадёт",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "Отличается",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "Чётное",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "Нечётное",
	"18a63f5512afb5573e5b44deba78d629f0635317": "Над",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "Под",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "Открытие",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "Верхн.",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "Нижн.",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "Закрытие",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "Время открытия",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "Тики",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "Секунды",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "Минуты",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "Часы",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "Вверх/Вниз",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "Азиатские",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "Цифровые",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "Касание/Нет касания",
	"f7de1f66f0979667da275b7e8996e805395025a1": "Закончится внутри/вне",
	"a431deecd4c2258097adae418d496fe9a8179fee": "Останется внутри/вне",
	"91a64e3f83c91acf336c631fba295f297f94c399": "Запустить после n секунд",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "Запускать через каждые n секунд",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "верхн.",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "средн.",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "нижн.",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "Гистограмма",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "MACD",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "Сигнал",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "Массив не должен быть пустым, но данный массив пуст.",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "Предполагается, что массив не должен быть пустым, так как:",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "Предполагается, что массив не должен быть пустым, но ничего не было задано.",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "Предполагается, что объект должен быть свечой, но данный объект не является свечой.",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "Предполагается, что объект должен быть свечой, так как:",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "Предполагается, что объект должен быть свечой, но ничего не было задано.",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "Здесь должен быть тик, так как:",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "Здесь должен быть тик, но ничего не было задано.",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "должно быть числом, так как:",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "не может быть равен нулю.",
	"05a2f240d737a283370d315c199ba2671176f9b8": "период индикатора должен быть меньше длины списка ввода.",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "период индикатора не может быть равен нулю.",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "Вы достигли максимального количества сделок",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "Вы достигли максимальной суммы убытка",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "Файл не поддерживается:",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "Вы успешно вышли!",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "Соединение прервано до получения ответа сервера",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "Куплено",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "Блоки должны быть внутри контейнера для блоков, основных блоков или функций",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "Блоки загружены успешно",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "Загрузить",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "Нераспознанный формат файла.",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "Длительность должна быть положительным целым числом",
	"11ee9c5d534cc8d22651092222b532917594161a": "Минимальная длительность",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "Число тиков должно быть от 5 до 10",
	"ace1342bc3720b77ce510b93074041e7386d209e": "Время окончания не может совпадать со временем начала",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "Прогноз должен быть одной цифрой",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "должно быть добавлено внутри торгового блока",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "должно быть добавлено внутри блока До покупки",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "должно быть добавлено внутри блока Во время покупки",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "должно быть добавлено внутри блока После покупки",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "должно быть добавлено внутри",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "Нажмите, чтобы выбрать",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "Удалённые блоки для загрузки должны относиться к коллекции.",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "Целью должен быть файл xml",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "Данный url уже загружен",
	"34c59389053701a04127f74d32315e0206e076f8": "Возникла ошибка при загрузке url",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "Убедитесь, что в ответе сервера есть 'Доступ-Контроль-Разрешить-Источник' ('Access-Control-Allow-Origin')",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "Максимальное разрешенное количество контрактов за каждую сессию: 100.",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "Количество сделок и сумма убытка являются обязательными параметрами.",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "Торговые ограничения",
	"f90691af95e0735042635eb7fd2367812d800516": "Максимальное количество сделок",
	"a571293591257b7a4e97484de6054ab919bc3a04": "Максимальная сумма убытка",
	"952f375412e89ff213a8aca383d18e5691354347": "Начать",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "Произошла ошибка; повторная загрузка...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "Повторная загрузка через",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "Отмена",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "Сохранить блоки как",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "Имя файла",
	"bf33cc2e57180686002e873efb1564c214405c77": "Сохранить как коллекцию",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "Сохранить",
	"4a1e616226c329a94da7768bc0435a3284478010": "Сохранить существующие блоки (xml файл)",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "Далее",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "Назад",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "Готово",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "Быстрый обзор",
	"a48e81d4a8da67637b46725824177a959fe99b21": "Хотите узнать, как пользоваться Binary Bot?",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "Не спрашивайте меня снова.",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "Нет, спасибо",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "Да",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "Рабочая область",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "Перетащите блочные файлы.",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "Загрузить примеры стратегий",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "Создать собственные стратегии",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "Инструменты для блоков",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "Добавьте больше блоков для Вашего робота.",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "Счета",
	"f5c47fd3b3553b10441a06054078cea745177dea": "Войдите перед тем, как запустить робота. Всегда тестируйте свои стратегии на виртуальном счету.",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Управление роботом",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "Управляйте своими блоками. Направьте курсор на каждую кнопку для получения дополнительной информации.",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "Удачи!",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "Хотите обратиться за помощью или сообщить об ошибке?",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "Нажмите здесь",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "Результат",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "Значение верно, если результат соответствует выбору",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "Подробности контракта",
	"011b5c3886f99f18d9239534f3423849fd75450b": "Возвращается к списку подробностей истёкшего контракта",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) Узнайте результат и торгуйте снова",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "Получите информацию о предыдущем контракте, узнайте результат и торгуйте снова. (Запускается после завершения сделки)",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "Подробности контракта:",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "Считывает выбранный параметр из списка Подробностей контракта",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "Результат контракта",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "Возвращает результат оконченного контракта",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "Торговать снова",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "Повторно запускает блок торговли",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "Цена аск",
	"343fda69c73b78b84967055aae97f790c422adfd": "Цена аск для выбранного предложения",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) Просм. и купите контракт",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "Проследите за потоком тиков и купите нужный контракт. (Запускается при обновлении тиков)",
	"87da93a46d143f6019979b3548414d9d7adabb35": "Выплата для выбранного предложения",
	"160f06d4799c85021a810f68c5b517eea37a2737": "Покупка",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "Покупает выбранный контракт.",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "Продажа доступна",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "Значение верно, если доступна продажа по рыночной цене",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) Следите и продайте контракт",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "Следите за результатом купленного контракта и, по возможности, продайте его по рыночной цене. (Запускается при обновлении контракта)",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "Продать по рыночной цене",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "Продать по рыночной цене.",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "Продать прибыль/убыток",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "Возвращает прибыль для продажи по рыночной цене.",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "Прочитать",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "в",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "последн. свече",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "Прочитать значение выбранной свечи в последней n-й свече",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "Направление",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "Значение верно, если направление соответствует выбранному",
	"05bef508aadd62bf3967dcf67d769da296f19989": "Направление тика",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "Возвращает направление тика, полученное в блоке До покупки. Его значение может быть 'выше', если тик выше предыдущего, или 'ниже', если тик ниже предыдущего, а также пустым (''), если тик равен предыдущему",
	"cdb31fc857f01a59f664413498293c714285f46d": "в списке свечей",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "получить # с конца",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "Получить последнюю n-ю свечу",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "Последняя десятичная",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "Возвращает последнюю десятичную последнего тика",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "Список свечей",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "Возвращает список свечей",
	"5e9023e299575f2bc81242b931c10019b63f407a": "Значения свеч",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "Возвращает список выбранных значений свеч",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "Последний тик",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "Возвращает значение тика, полученное блоком До покупки",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "Этот блок вызывается при каждом тике",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "Вы можете использовать данный блок для анализа поступающих тиков, независимо от Ваших контрактов",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "Список тиков",
	"17649cac8739adcae95e641f794880272ad33bd1": "Возвращает список значений тиков",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "Баланс:",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "Получить баланс или строку",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "Внутренние блоки игнорируются",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "Поместите свои блоки здесь, чтобы не удалять их",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "Загрузить блок из",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "Загрузить блоки через url",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "Уведомить",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "Создаёт уведомление",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "Общая прибыль",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "Возвращает общую прибыль",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "Кол-во выполнений",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "Возвращает количество выполнений с самого начала",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "Добавить символ к числу, чтобы изменить барьер.",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "Рынок",
	"02349f7b8f107a4b438066130a593735f2d31609": "Повторная загрузка из-за ошибки (используйте осторожно)",
	"1f4698382842477e211eb46de81fa506f01a8c34": "Оба",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "Тип контракта:",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "Интервал свеч:",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "Длительность:",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "Выплата:",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "Валюта:",
	"911348bf6fef082476779805cd1bda16bef66d2d": "Изменение барьера",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "Прогноз:",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) Выберите нужный контракт",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "Выберите нужный контракт и начните торговлю; добавьте инициализацию. (Запускается в начале контракта)",
	"eabf5342bcb460c4f8261faa18695d851712614a": "Пожалуйста, войдите.",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "Необходимы все виды контрактов",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "свеча чёрная?",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "Определяет, является ли данная свеча чёрной; возвращает значение Верно, если цена данной свечи при закрытии меньше цены при открытии.",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "в свече",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "Прочитать поле на свечах (прочитать в Списке свечей)",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "Полосы Боллинджера",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "Список ввода",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "Период",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "Станд. коэффициент Dev. Вверх",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "Станд. коэффициент Dev. Вниз",
	"974da601086448d0060aeed90e53ddd5acd17b91": "Рассчитывает список полос Боллинджера (ПБ) из списка с периодом",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "Список полос Боллинджера",
	"58de49791c64aba14e36e5887244a5ef088286cd": "Рассчитывает список Полос Боллинджера (ПБ) из списка с периодом",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "Экспоненциальная СС",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "Рассчитывает экспоненциальную скользящую среднюю (ЭСС) из списка с периодом",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "Массив экспоненциальных СС",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "Рассчитывает список экспоненциальных скользящих средних (ЭСС) из списка значений с периодом",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "Линейка MACD",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "Период быстрой ЭСС",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "Период медленной ЭСС",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "Период ПСС (для сигнала)",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "Вычисляет список схождения-расхождения скользящих средних (MACD) из списка",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "Индекс относительной силы",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "Индекс относительной силы (RSI) из списка с периодом",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "Группа индексов относительной силы",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "Рассчитывает список индексов относительной силы (RSI) из списка значений с периодом",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "Простая скользящая средняя",
	"347775a293c14362d492f019e677c965be1d6e7d": "Рассчитывает простую скользящую среднюю (ПСС) из списка с периодом",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "Массив простых СС",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "Вычисляет список простых скользящих средних (ПСС) из списка значений с периодом",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Секунд с начала отсчёта",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "Возвращает время начала отсчёта (секунды с начала отсчёта)",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "Выполнять каждые",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "Секунд(ы)",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "Выполнять внутренние блоки каждые n секунд(ы)",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "Выполнить после",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "Выполнить внутренние блоки после n секунд"
};

/***/ }),
/* 371 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "Logic",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "Toán học",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "Văn bản",
	"4d064726954a17487f94e931f5b157b733ec22ed": "Nâng cao",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "Danh sách",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "Biến",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "Chức năng",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "Vòng lặp",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binary",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "Khái niệm thương mại",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "Trước khi mua hàng",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "Trong quá trình mua hàng",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "Sau khi mua hàng",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "Phân tích đánh dấu",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "Công cụ",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "Thời gian",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "Nến",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "Misc.",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "Indicators",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "Reality Check",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "Options trading can become a real addiction, as can any other activity pushed to its limits. To avoid the danger of such an addiction, we provide a reality-check that gives you a summary of your trades and accounts on a regular basis.",
	"4152043e8c670075d2c919677e835edb0d923cab": "Please specify your preferred reality-check interval in minutes",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "Please enter a number between 10 to 120.",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "Continue Trading",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "Statement",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "Log out",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "Log in",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "Results",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "Summary",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "No. of runs",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "Total Stake",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "Total Payout",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "Win",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "Loss",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "Total Profit/Loss",
	"90eef613042c5a51f542421065b68b886d473807": "Balance",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "Trades",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "Number",
	"db1c784524e1b54011a95823026161f7c8517fe0": "Reference",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "Trade Type",
	"6541776503f0f949109cde78e6634d07d3528cd3": "Entry Spot",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "Exit Spot",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "Giá Mua",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "Giá Cuối Cùng",
	"772fbced18230220d2d9be1456be16fc1b271d25": "Lãi/Lỗ",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Binary Bot",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "Kinh doanh hiệu quả ngoài sức tưởng tượng",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "Interested in automating your preferred strategies for trading binary options?",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Binary Bot is our leading-edge programming tool which allows you to build trading apps with a simple “jigsaw puzzle-like” drag-and-drop function.",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "Dream up any number of binary options trading bots, from incredibly simple formulas to vastly complex algorithms. Then let them trade for you, even while you sleep.",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "Best of all, once you’ve built a bot, we can help you sell it to fellow traders in the",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Binary.com Shop",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "Receive 80% of the sales revenue from every purchase of your bot in our app store.",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "Begin Building a Bot Now",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "Need further assistance?",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "Contact us",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "Payout",
	"78d7103a319e808455d397513279d99f3b3f3768": "Stake",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "statement",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "ask price",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "payout",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "profit",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "contract type",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "entry spot",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "entry value",
	"7674920c033ca14277c577e19c037a6754d4fa80": "exit spot",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "exit value",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "barrier",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "result",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "Rise",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "Fall",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "No Change",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "string",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "number",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "green",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "blue",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "yellow",
	"78988010b890ce6f4d2136481f392787ec6d6106": "red",
	"062787aa328047e189774b3703d983b83938f6e9": "Higher",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "Lower",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "Touch",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "No Touch",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "Ends In",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "Ends Out",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "Stays In",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "Goes Out",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "Asian Up",
	"c098658ce3d3a258e4d155949a60072966b36db7": "Asian Down",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "Matches",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "Differs",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "Even",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "Odd",
	"18a63f5512afb5573e5b44deba78d629f0635317": "Over",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "Under",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "Open",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "High",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "Low",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "Close",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "Open Time",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "Ticks",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "Seconds",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "Minutes",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "Hours",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "Up/Down",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "Asians",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "Digits",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "Touch/No Touch",
	"f7de1f66f0979667da275b7e8996e805395025a1": "Ends In/Out",
	"a431deecd4c2258097adae418d496fe9a8179fee": "Stays In/Goes Out",
	"91a64e3f83c91acf336c631fba295f297f94c399": "Run After n Seconds",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "Run Every n Seconds",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "upper",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "middle",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "lower",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "Histogram",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "MACD",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "Signal",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "Expected non-empty array, but the given array is empty.",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "Expected non-empty array, given:",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "Expected non-empty array, but nothing was given.",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "Expected candle object, but the given object is not a candle.",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "Expected candle object, given:",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "Expected candle object, but nothing was given.",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "Expected tick, given:",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "Expected tick, but nothing was given.",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "must be a number, given:",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "cannot be zero.",
	"05a2f240d737a283370d315c199ba2671176f9b8": "indicator period must be less than the length of input list.",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "indicator period cannot be zero.",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "Maximum number of trades reached",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "Maximum loss amount reached",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "File is not supported:",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "Logged you out!",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "Connection lost before receiving the response from the server",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "Purchased",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "Blocks must be inside block holders, main blocks or functions",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "Blocks are loaded successfully",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "Download",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "Unrecognized file format.",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "Duration must be a positive integer",
	"11ee9c5d534cc8d22651092222b532917594161a": "Minimum duration is",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "Number of ticks must be between 5 and 10",
	"ace1342bc3720b77ce510b93074041e7386d209e": "Expiry time cannot be equal to start time",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "Prediction must be one digit",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "must be added inside the trade block",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "must be added inside the before purchase block",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "must be added inside the during purchase block",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "must be added inside the after purchase block",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "must be added inside",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "Click to select",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "Remote blocks to load must be a collection.",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "Target must be an xml file",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "This url is already loaded",
	"34c59389053701a04127f74d32315e0206e076f8": "An error occurred while trying to load the url",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "Make sure 'Access-Control-Allow-Origin' exists in the response from the server",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "Maximum allowed number of trades for each session is 100.",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "Both number of trades and loss amount are required.",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "Trade Limitations",
	"f90691af95e0735042635eb7fd2367812d800516": "Maximum number of trades",
	"a571293591257b7a4e97484de6054ab919bc3a04": "Maximum loss amount",
	"952f375412e89ff213a8aca383d18e5691354347": "Start",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "An error occurred, restarting...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "Restarting in",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "Cancel",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "Save blocks as",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "Filename",
	"bf33cc2e57180686002e873efb1564c214405c77": "Save As Collection",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "Save",
	"4a1e616226c329a94da7768bc0435a3284478010": "Save the existing blocks (xml file)",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "Next",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "Back",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "Done",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "Take a quick tour",
	"a48e81d4a8da67637b46725824177a959fe99b21": "Ready to learn how to use Binary Bot?",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "Do not ask me again.",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "No Thanks",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "Yes",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "Workspace",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "Drag and drop block files.",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "Download sample strategies",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "Make your own strategies",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "Blocks toolbox",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "Add more blocks from here to your bot.",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "Accounts",
	"f5c47fd3b3553b10441a06054078cea745177dea": "Login before starting your bot. Always test your strategies with the virtual account.",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Bot controls",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "Control your blocks. Hold the cursor on each button for more info.",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "Enjoy!",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "Want to report an issue or ask for help?",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "Click here",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "Result is",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "True if the result matches the selection",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "Contract Details",
	"011b5c3886f99f18d9239534f3423849fd75450b": "Returns the list of details for the finished contract",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) Get your trade result and trade again",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "Get the previous trade information and result, then trade again (Runs on trade finish)",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "Contract Detail:",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "Reads a selected option from contract details list",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "Contract Result",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "Returns the result of the finished contract",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "Trade Again",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "Runs the trade block again",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "Ask Price",
	"343fda69c73b78b84967055aae97f790c422adfd": "Ask Price for selected proposal",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) Watch and purchase your contract",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "Watch the tick stream and purchase the desired contract (Runs on tick update)",
	"87da93a46d143f6019979b3548414d9d7adabb35": "Payout for selected proposal",
	"160f06d4799c85021a810f68c5b517eea37a2737": "Purchase",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "Purchases a chosen contract.",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "Sell is available",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "True if sell at market is available",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) Watch and sell your purchased contract",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "Watch the purchased contract info and sell at market if available (Runs on contract update)",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "Sell at market",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "Sell at market.",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "Sell profit/loss",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "Returns the profit for sell at market.",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "Read",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "in",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "recent candle",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "Read the selected candle value in the nth recent candle",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "Direction is",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "True if the direction matches the selection",
	"05bef508aadd62bf3967dcf67d769da296f19989": "Tick Direction",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "Returns the tick direction received by a before purchase block, its value could be 'up' if the tick is more than before, 'down' if less than before and empty ('') if the tick is equal to the previous tick",
	"cdb31fc857f01a59f664413498293c714285f46d": "in candle list",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "get # from end",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "Get the nth recent candle",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "Last Digit",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "Returns the last digit of the latest tick",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "Candles List",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "Returns the candle list",
	"5e9023e299575f2bc81242b931c10019b63f407a": "Candle Values",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "Returns a list of the selected candle values",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "Last Tick",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "Returns the tick value received by a before purchase block",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "This block is called on every tick",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "You can use this block to analyze the ticks comming regardless of your trades",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "Ticks List",
	"17649cac8739adcae95e641f794880272ad33bd1": "Returns the list of tick values",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "Balance:",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "Get balance number or string",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "Blocks inside are ignored",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "Put your blocks in here to prevent them from being removed",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "Load Block From",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "Load blocks from url",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "Notify",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "Creates notification",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "Total Profit",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "Returns the total profit",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "No. Of Runs",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "Returns the number of runs since the beginning",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "Add sign to a number to make a Barrier Offset.",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "Market",
	"02349f7b8f107a4b438066130a593735f2d31609": "Restart On Error (Use with caution)",
	"1f4698382842477e211eb46de81fa506f01a8c34": "Both",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "Contract Type:",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "Candle Interval:",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "Duration:",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "Payout:",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "Currency:",
	"911348bf6fef082476779805cd1bda16bef66d2d": "Barrier Offset",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "Prediction:",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) Define your trade contract",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "Define your trade contract and start the trade, add initializations here. (Runs on start)",
	"eabf5342bcb460c4f8261faa18695d851712614a": "Please login.",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "All trade types are required",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "is candle black?",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "Checks if the given candle is black, returns true if close is less than open in the given candle.",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "in candle",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "Read a field in a candle (read from the Candles list)",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "Bollinger Bands",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "Input List",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "Period",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "Std. Dev. Up Multiplier",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "Std. Dev. Down Multiplier",
	"974da601086448d0060aeed90e53ddd5acd17b91": "Calculates Bollinger Bands (BB) from a list with a period",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "Bollinger Bands Array",
	"58de49791c64aba14e36e5887244a5ef088286cd": "Calculates Bollinger Bands (BB) list from a list with a period",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "Exponential Moving Average",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "Calculates Exponential Moving Average (EMA) from a list with a period",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "Exponential Moving Average Array",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "Calculates Exponential Moving Average (EMA) list from a list of values with a period",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "MACD Array",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "Fast EMA Period",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "Slow EMA Period",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "SMA Period (for Signal)",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "Calculates Moving Average Convergence Divergence (MACD) list from a list",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "Relative Strength Index",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "Relative Strength Index (RSI) from a list with a period",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "Relative Strength Index Array",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "Calculates Relative Strength Index (RSI) list from a list of values with a period",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "Simple Moving Average",
	"347775a293c14362d492f019e677c965be1d6e7d": "Calculates Simple Moving Average (SMA) from a list with a period",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "Simple Moving Average Array",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "Calculates Simple Moving Average (SMA) list from a list of values with a period",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Seconds Since Epoch",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "Returns the epoch time (seconds since epoch)",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "Run Every",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "Second(s)",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "Run the blocks inside every n seconds",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "Run After",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "Run the blocks inside after n seconds"
};

/***/ }),
/* 372 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "逻辑",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "数学",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "文本",
	"4d064726954a17487f94e931f5b157b733ec22ed": "高级",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "列表",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "变量",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "功能",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "回路",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binary",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "交易的定义",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "购入前",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "购入时",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "购入后",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "跳动点分析",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "工具",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "时间",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "蜡烛线",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "杂项",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "指标",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "实况简报",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "二元期权交易和其他类似活动一样，过于沉迷可能会上瘾。为了避免这种风险，我们会定期向您提供交易和财务的实况简报。",
	"4152043e8c670075d2c919677e835edb0d923cab": "请指定您的优选实况调查间隔时间分钟数",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "请输入10和120之间的数字。",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "继续交易",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "声明",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "注销",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "登录",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "结果",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "摘要",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "运行次数",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "总投注金额",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "总赔付额",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "赢得",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "损失",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "总损益",
	"90eef613042c5a51f542421065b68b886d473807": "余额",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "交易",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "数量",
	"db1c784524e1b54011a95823026161f7c8517fe0": "引用",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "交易类型",
	"6541776503f0f949109cde78e6634d07d3528cd3": "入市现价",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "退市现价",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "买入价",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "最终价格",
	"772fbced18230220d2d9be1456be16fc1b271d25": "利润/亏损",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Binary Bot",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "交易效率比您想象的更高",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "想要让您倾向的二元期权交易策略自动化？",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Binary Bot 是我们尖端的程序设计工具，您可以使用简单“拼图游戏”式拖放功能，构建交易应用程序。",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "不论是简单的公式还是复杂的算法，请尽情发挥想象力，设计出无限量的二元期权交易bot，即使在您睡觉时也可自动为您进行交易。",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "更奇妙的是，一旦您建立好了bot，我们可以帮您在",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Binary.com商店推广给其他交易者。",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "通过我们的应用程序商店销售您的bot，您可获取销售收入金额的80%。",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "立刻建立Bot",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "需要帮忙？",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "联系我们",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "赔付额",
	"78d7103a319e808455d397513279d99f3b3f3768": "投注资金",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "声明",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "卖价",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "赔付额",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "利润",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "合约类型",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "入市现价",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "入市值",
	"7674920c033ca14277c577e19c037a6754d4fa80": "退市现价",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "退市值",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "障碍",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "结果",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "上升",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "下跌",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "没有变化",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "字符串",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "数字",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "绿色",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "蓝色",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "黄色",
	"78988010b890ce6f4d2136481f392787ec6d6106": "红色",
	"062787aa328047e189774b3703d983b83938f6e9": "高于",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "低于",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "触及",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "未触及",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "范围之内收盘",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "范围之外收盘",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "保持在范围之内",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "超出范围之外",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "亚洲上涨",
	"c098658ce3d3a258e4d155949a60072966b36db7": "亚洲下跌",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "相符",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "差异",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "偶数",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "奇数",
	"18a63f5512afb5573e5b44deba78d629f0635317": "大于",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "小于",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "开盘",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "高",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "低",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "收盘",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "开盘时间",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "跳动点",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "秒",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "分钟",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "小时",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "上涨/下跌",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "亚洲期权",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "位数",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "触及/未触及",
	"f7de1f66f0979667da275b7e8996e805395025a1": "范围之内/范围之外收盘",
	"a431deecd4c2258097adae418d496fe9a8179fee": "范围内/范围外",
	"91a64e3f83c91acf336c631fba295f297f94c399": "n 秒后运行",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "每n秒运行",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "上部",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "中部",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "下部",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "直方图",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "指数平滑移动平均线",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "信号",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "预期非空数组，但给定的数组为空。",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "预期非空数组，给出︰",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "预期非空数组，但未给定任何数组。",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "预期蜡烛对象，但给定的对象不是蜡烛。",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "预期蜡烛对象，给出︰",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "预期蜡烛对象，但未给定任何对象。",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "预期跳动点，给出︰",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "预期跳动点，但未给定任何对象。",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "必须是数字，给出︰",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "不能为零。",
	"05a2f240d737a283370d315c199ba2671176f9b8": "指标期限必须小于输入列表的长度。",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "指标期限不能为零。",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "最大达成交易的数目",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "最大损失金额",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "不支持的文件︰",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "您已被注销！",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "连接在收到服务器反应前已中断",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "已购入",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "程序块必须位于程序块定位器、主要程序块或函数内",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "程序块加载成功",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "下载",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "无法识别的文件格式。",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "持续时间必须是正整数",
	"11ee9c5d534cc8d22651092222b532917594161a": "最小持续时间是",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "跳动点数必须在5到10之间",
	"ace1342bc3720b77ce510b93074041e7386d209e": "到期时间不能等于开始时间",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "预测必须是单位数字",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "必须在交易程序块中添加",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "必须在购入前程序块中添加",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "必须添加在购入时程序块中",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "必须添加在购入后程序块中",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "必须添加进去",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "单击选择",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "远程程序块加载必须是集合件。",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "目标必须是 xml 文件",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "此 url 已经加载",
	"34c59389053701a04127f74d32315e0206e076f8": "尝试加载 url 时发生错误",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "请确保 '访问-控制-允许-起源' 存在于来自服务器的响应",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "每个交易期的最大允许交易次数是 100。",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "交易次数和损失金额是必填项。",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "交易限制",
	"f90691af95e0735042635eb7fd2367812d800516": "最大交易次数",
	"a571293591257b7a4e97484de6054ab919bc3a04": "最大损失金额",
	"952f375412e89ff213a8aca383d18e5691354347": "开始",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "出现错误，重新启动中...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "将于以下时间内重新启动",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "取消",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "程序块保存为",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "文件名",
	"bf33cc2e57180686002e873efb1564c214405c77": "另存为集合件",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "保存",
	"4a1e616226c329a94da7768bc0435a3284478010": "保存现有的程序块（xml 文件）",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "下一页",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "返回",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "完成",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "快速浏览",
	"a48e81d4a8da67637b46725824177a959fe99b21": "准备好学习如何使用Binary Bot 了吗？",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "不要再问我。",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "不，谢谢",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "是的",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "工作区",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "拖放程序块文件。",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "下载示例策略",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "制作自己的策略",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "程序块工具箱",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "从这里添加更多程序块到机器人程序。",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "账户",
	"f5c47fd3b3553b10441a06054078cea745177dea": "启用机器人程序前请先登录。每次测试策略时请使用虚拟账户。",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Bot 控件",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "控制您的程序块。将光标放在每个按钮上即可获取更多信息。",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "享受其中乐趣！",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "想要报告问题或寻求帮助吗？",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "请单击此处",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "结果是",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "如果结果与选择匹配，请回答“是”",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "合约细节",
	"011b5c3886f99f18d9239534f3423849fd75450b": "将已完成合约的详细信息列表退回",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) 获得交易结果，并再次交易",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "获得以前的交易信息和结果，然后再次交易 （在交易完成上运行）",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "合约细节:",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "从合同详细信息列表中读取所选的选项",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "合约结果",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "将已完成合约的结果退回",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "再次交易",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "再次运行交易程序块",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "卖价",
	"343fda69c73b78b84967055aae97f790c422adfd": "选定建议的卖价",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) 查看并购入合约",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "查看看跳动点流向和购入所需合约（在跳动点更新上运行）",
	"87da93a46d143f6019979b3548414d9d7adabb35": "选定建议的赔付额",
	"160f06d4799c85021a810f68c5b517eea37a2737": "购入",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "购入选定的合约。",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "可卖出",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "如果市场上可卖出，请回答“是”",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) 查看和卖出已购入合约",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "查看已购入合约的信息，如可用，则在市场上卖出（合约更新上运行）",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "在市场卖出",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "在市场卖出。",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "销售利润/亏损",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "返回在市场上卖出的利润。",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "读取",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "在",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "最近的蜡烛图线",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "读取最近第 n 个蜡烛图线的选定蜡烛线值",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "方向是",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "如方向与选择匹配，请回答“是”",
	"05bef508aadd62bf3967dcf67d769da296f19989": "跳动点方向",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "返回购前程序块收到的跳动点方向。如果跳动点比以前多，它的数值可能“上涨” ；如果比以前少，则为“下跌”；如果跳动点与前相同，则为空（“”）",
	"cdb31fc857f01a59f664413498293c714285f46d": "在蜡烛图线列表中",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "从最终端获得 #",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "获得第 n 个最近蜡烛图线",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "最后的数字",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "返回最新跳动点的最后数字",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "蜡烛图线列表",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "返回蜡烛图线列表",
	"5e9023e299575f2bc81242b931c10019b63f407a": "蜡烛图线值",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "返回选定的蜡烛图线值列表",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "最后的跳动点",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "返回购前程序块收到的跳动点值",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "每个跳动点都呼叫这个程序块",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "无论是否有交易，您都可以使用此程序块分析来临的跳动点",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "跳动点列表",
	"17649cac8739adcae95e641f794880272ad33bd1": "返回跳动点值的列表",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "余额：",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "获取余额数字或字符串",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "忽略内部程序块",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "把您的程序块放在这里，以防止被移除",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "加载程序块自",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "从 url 加载程序块",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "通知",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "创建通知",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "总利润",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "返回总利润",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "运行次数",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "返回自开始以来的运行数量",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "给数字添加符号，以制作障碍抵消。",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "市场",
	"02349f7b8f107a4b438066130a593735f2d31609": "出错时重新启动（小心使用）",
	"1f4698382842477e211eb46de81fa506f01a8c34": "两个",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "合约类型：",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "蜡烛图线间隔︰",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "持续时间︰",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "赔付额：",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "货币︰",
	"911348bf6fef082476779805cd1bda16bef66d2d": "障碍抵消",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "预测︰",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) 定义交易合约",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "定义交易合约和开始交易，在这里添加初始化。（在开始上运行）",
	"eabf5342bcb460c4f8261faa18695d851712614a": "请登录。",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "需要所有交易类型",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "黑色的蜡烛图线？",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "查看给定的蜡烛图线是否为黑色，如果给定的蜡烛图线关闭少于开放，返回 “是”。",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "在蜡烛图线中",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "读取（从蜡烛图线列表读取）蜡烛图线的字段",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "布林线",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "输入列表",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "期间",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "标准偏差上涨乘法器",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "标准偏差下跌乘法器",
	"974da601086448d0060aeed90e53ddd5acd17b91": "使用有期限列表计算布林线 (BB)",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "布林线数组",
	"58de49791c64aba14e36e5887244a5ef088286cd": "使用有期限列表计算布林线 (BB) 列表",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "指数移动平均线",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "使用有期限列表计算指数移动平均线 (EMA)",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "指数移动平均线数组",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "使用有期限数值列表计算指数移动平均线 (EMA) 列表",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "指数平滑移动平均线数组",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "快速指数平均数指标周期",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "慢速指数平均数指标周期",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "簡單移動平均周期（信號）",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "从列表计算指数平滑移动平均线 (MACD) 列表",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "相对强度指标",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "从有期限列表获得的相对强度指标 (RSI)",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "相对强度指标数组",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "使用有期限数值列表计算相对强度指标 (RSI)",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "简单移动平均线",
	"347775a293c14362d492f019e677c965be1d6e7d": "使用有期限列表计算简单移动平均线 (SMA)",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "简单移动平均线数组",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "使用有期限数值列表计算简单移动平均线 (SMA) 列表",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "自Epoch以来的秒数",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "返回epoch时间（自epoch以来的秒数）",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "运行每个",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "秒",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "在每 n 秒内运行程序块",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "以下时间过后运行",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "在 n 秒后运行内部程序块"
};

/***/ }),
/* 373 */
/***/ (function(module, exports) {

module.exports = {
	"3d52a6d8fedcc48a65297c07bf5f7e3e41aab5aa": "邏輯",
	"3edf0df49942da6d11a1a217e4d3af4a5a8e64f2": "數學",
	"c3328c39b0e29f78e9ff45db674248b1d245887d": "文本",
	"4d064726954a17487f94e931f5b157b733ec22ed": "高階",
	"a1fffaaafb7cc996685bceb829c053cc4f7de43d": "清單",
	"19de69cb601f53a4ea7af22a65c71ae63251365c": "變數",
	"2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483": "功能",
	"dc7f77b4ccfc9f70a78bd97303bd10ba4c9d70c8": "迴路",
	"66639f7d455dd71faa9147f5d69e5ce885d8bebd": "Binary",
	"0ba66deaab2f2cd3b0793d03f600ee2b8f577fbc": "交易的定義",
	"9201c6ac624e98e168e6ccddbcd5a9b5cdff06b3": "購入前",
	"44ab9a87268d3fd74040ed0b55c04f83294cfdef": "購入時",
	"c415c9399b7ae7285d2c1c880a6a0aa18f62ff8c": "購入後",
	"d07ffc19d51f0973859a0d95c1d15cd9f22388ca": "跳動點分析",
	"4fa8cc860c52b268dc6a3adcde7305e9415db5bb": "工具",
	"6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b": "時間",
	"8d8fd6765e184419cad8b88d1a60c895d79578c2": "蠟燭線",
	"548f449b63ff41eaaff5a2d679ffa56b2015fc20": "雜項",
	"8cf71374fa095a64b5295b672daef8507ec7be6a": "指標",
	"9feddbabd7e7309e96c590069057158e96baa8f6": "實況簡報",
	"038fe2bdb7ec6ee078f60bdb5bee94654ec6a81d": "二元期權交易就像任何其他活動一樣，過於沉迷可能會上癮。為了避免發生此種風險，我們定期向您提供交易和財務的實況簡報。",
	"4152043e8c670075d2c919677e835edb0d923cab": "請指定您首選的實況調查間隔時間，以分鐘計",
	"2672cf85642ebe39a98679b0dfd665d13f2b1c4d": "請輸入10和120之間的數字。",
	"2439f2f199b2a3e798aa9b4feaa9248bdec9bc0b": "繼續交易",
	"a72ca256dc49e55a1a57b9a727fbde9834c9a3f7": "聲明",
	"6e78c91f5a05fc0d4f1a787d38e3d6fe2f856d46": "登出",
	"f7c400ed695f898b8ee9d21664aa17b5bb693828": "登入",
	"612e12d29278b5519294bc25cdaddffec6d0f1c6": "結果",
	"12b71c3e0fe5f7c0b8d17cc03186e281412da4a8": "摘要",
	"d847919a30d31c0be624087f3370492b3fdf80c6": "運行次數",
	"1e5e614c900bd1584f0bb286450d6386955b486a": "總投注金額",
	"03969004b50f3f14cd77e318eaaca1945c128ed4": "總賠付額",
	"4973f4c599d5f42cf7bde52d66c3ed8ef77accb1": "贏得",
	"12e24a7d8ac40579e8a0aef4869288afe7ed6745": "損失",
	"5405a1f68d262cc4d6f2b8dc93382afe6cf31778": "總損益",
	"90eef613042c5a51f542421065b68b886d473807": "餘額",
	"597b1092b35773a3b65fbcb4e6424c2bcc006dd1": "交易",
	"b7baa1d40c4ea29afc9098732bffee2a861a6c44": "數量",
	"db1c784524e1b54011a95823026161f7c8517fe0": "引用",
	"74751e67c3e1010c343095eaf543e7cb21ced2ef": "交易類型",
	"6541776503f0f949109cde78e6634d07d3528cd3": "入市現價",
	"77bcdf0da628448afd03ab5259f31f56c9071ca6": "退市現價",
	"257d4c5a3f637e1a35bfc26330dd3ebee92f5dd0": "買入價",
	"8875c6d210e37a0772b7d1a37a48d345c90440d8": "最終價格",
	"772fbced18230220d2d9be1456be16fc1b271d25": "利潤/虧損",
	"ff29ccd7a6c6073cc462ed590d27a91632fdf67e": "Binary Bot",
	"608061fb5aab975013fa70c5c814a1d8ba30c152": "交易效率比您想象的更高",
	"e4ce8dc3e416e69262ba642dc57d3975d6616980": "想要讓您傾向的二元期權交易策略自動化？",
	"f261237ca8beec6f77b76c4121feb8da22818c56": "Binary Bot 是我們尖端的程式設計工具，讓您建立擁有簡單拼圖遊戲式拖放功能的交易應用程式。",
	"f6c85c68616eeaaa15fcd53fdc52f6eb5c886357": "不論是非常簡單的公式，或是極度複雜的算法，請發揮您的想像力，設計出無限量的二元期權交易bot，即使在您睡眠時也可自動為您進行交易。",
	"e6906a0d1c28b202f9bd49da4a6abbddca57399a": "更奇妙的是，一旦您建立好了bot，我們可幫您把它通過",
	"1dd0cf79c572bcdbdfabbd54ee95710a21234d73": "Binary.com商店賣給其他交易者。",
	"abeef9a35ae6256796ba2462e4f64d308de42359": "通過我們的應用程式商店銷售您的bot，您可獲取銷售收入金額的80%。",
	"0606f0b7763ee6e8094a3dab7873d34c08fd3670": "立刻建立Bot",
	"221acaf3a0290adafe08cdcb8c66121c73d8b4a3": "需要幫忙？",
	"4832e45812a2724f16a15f9ae87adfc8ae4168cf": "聯繫我們",
	"9bb396940adb9705fe57eba6ea8b578e6aafa792": "賠付額",
	"78d7103a319e808455d397513279d99f3b3f3768": "投注資金",
	"bbb930cc426507ed3f6b7c343c75dd0e041494b7": "聲明",
	"e6e886cdcdefeb6d3edb4c31bed06dd183ac4153": "賣價",
	"50e72909992bdc37c7c07769d1b7efac5e52874c": "賠付額",
	"ecb5ba7044417916ba12de5fa9e6fccac3e5d475": "利潤",
	"c980b910204c7babdffe8ff3f7e755f30133383c": "合約類型",
	"a726c6955157f1b8b92f9932652434a7150f80f8": "入市現價",
	"a66d5c7ef2c63dbc9a8f9e6ae4e2bc575e74a36e": "入市值",
	"7674920c033ca14277c577e19c037a6754d4fa80": "退市現價",
	"e8b8bd9f2eabc12875605a37c93e7f04a713fcb8": "退市值",
	"779455ee3bde8494d9629b353e17b19e92357ba8": "障礙",
	"37a5301a88da334dc5afc5b63979daa0f3f45e68": "結果",
	"563339f82447b4e758ad76d5a0b63b5698594fba": "上升",
	"5c1ae82c29543ac887703776bf3da2c7dcce683d": "下跌",
	"2fc096bb7b6596ab243d0286c9f43fdf2b9b406d": "沒有變化",
	"ecb252044b5ea0f679ee78ec1a12904739e2904d": "字串",
	"53b0a1b2fadf4e040cdc2155a7340de24aca93cb": "數字",
	"bc74f4f071a5a33f00ab88a6d6385b5e6638b86c": "綠色",
	"4c9a82ce72ca2519f38d0af0abbb4cecb9fceca9": "藍色",
	"96de5543d183d7de52ac5fa21c46fc811f673f89": "黃色",
	"78988010b890ce6f4d2136481f392787ec6d6106": "紅色",
	"062787aa328047e189774b3703d983b83938f6e9": "高於",
	"b91eed4b7a80cd9572a27e65ebdff9caa4b3b9a4": "低於",
	"e3f139abb7a549a1210b36f7dbf89215ad6c9902": "觸及",
	"7d7932bcc2e262ae98cf09dc5445130fb3881769": "未觸及",
	"a16814a48ec58c2e24ba224a80921a5c02361abe": "範圍之內收盤",
	"391d02cd75ebcd6ed26f5f45ddf7d40bf13e9dc5": "範圍之外收盤",
	"534ec5da4e82ec419abc170e1a8448f55a01664f": "保持在範圍之內",
	"98cbe1998effd8b1a8aefdcc538573055e99a5f5": "超出範圍之外",
	"93d13bad1d2c2841db127cb70cc35bfc98059fc9": "亞洲上漲",
	"c098658ce3d3a258e4d155949a60072966b36db7": "亞洲下跌",
	"ee2dbd5d6d82d0833069b07e7dd2848d3bf4d83a": "相符",
	"8444b7ce28bbc3443cc5cf73359b8353989b2a4b": "差異",
	"9e767ad03e5547f251044e0724dc1d9f3e75aeed": "偶數",
	"dc28f5f3c65ec611f0f30022650d24382d27448e": "奇數",
	"18a63f5512afb5573e5b44deba78d629f0635317": "大於",
	"2a268b89b83f8cb38ea48e46e93dd8840db512f9": "小於",
	"cf9b77061f7b3126b49d50a6fa68f7ca8c26b7a3": "開盤",
	"b1a5954a483f8f8b0207385095f74aeb409b3f80": "高",
	"a124947cbd2d1d92b47e027274c3269ff0c7a84b": "低",
	"bbfa773e5a63a5ea58c9b6207e608ca0120e592a": "收盤",
	"1173872a4fb205b713702f0eec5cf2c732c828fd": "開盤時間",
	"53adebdc2b1cbbedb56395b19a73fe47b87cc554": "跳動點",
	"5fb1db527825d2996e37c655e5dec49d4da80c09": "秒",
	"092f99ea11a34a8490e7a767a83a42fc45634f82": "分鐘",
	"9e25a34e635a123f8958bbe26e7c4843278597fb": "小時",
	"f94510322ecd9b3a2af67a10bd51ecc4ac6a24e7": "上漲/下跌",
	"9c7960c6b11d35ac9d6cdc1ebaad3af43b2065c5": "亞洲期權",
	"2260ce49306460c8a2ef501939f29ad6ddd4e934": "位數",
	"0186aa73a1b75fa8f0eb98bbd9ad01102bb09ec1": "觸及/未觸及",
	"f7de1f66f0979667da275b7e8996e805395025a1": "範圍之內/範圍之外收盤",
	"a431deecd4c2258097adae418d496fe9a8179fee": "範圍內/範圍外",
	"91a64e3f83c91acf336c631fba295f297f94c399": "n 秒後運行",
	"024696596f26a4db232fd9e966eadfeb27c0bd1a": "每 n 秒運行",
	"c538c170bdc6b0f3bb98dce44a016a2e2d45a6e7": "上部",
	"85c274929bc0e28eafd3734f2c25046c3b95b36b": "中部",
	"346e3ee198e98146993894d3de8ecab1a86c3e80": "下部",
	"f16459104f92ab6b38aa265adb4ecbfc3768e303": "長條圖",
	"e09f635f4e77476c9ca1c37bc9992e9ace3431c1": "指數平滑異同移動平均線",
	"27bed13a88c60350c3de92ec3820e1cc4f7d6ec3": "訊號",
	"693892fa2ef47803ebf6f56e5d046474d22b09e5": "預期非空陣列，但給定的陣列為空。",
	"518c0b5e4f32706ac0822f5f3c20e23f66045415": "預期非空陣列，給出︰",
	"75d57e0dd5658dc154ab9149ef6dedaeded909e0": "預期非空陣列，但未給定任何陣列。",
	"6968e1af95e8915ebd1a52d2a0a9e21e51cd4f88": "預期蠟燭對象，但給定的對象不是蠟燭。",
	"ac5c071aab82d3c9bef52be71951a796e4cabe22": "預期蠟燭對象，給出︰",
	"cafce23143cbd1d3604870bc537682c37e726bdb": "預期蠟燭對象，但未給定任何對象。",
	"897c7741dd9674730cb8304a4f5e241e4c40d6f5": "預期跳動點，給出︰",
	"a1dd3f4a9acb8a93bd60d6f2a881b27c59b82a8d": "預期跳動點，但未給定任何對象。",
	"93576240acc9ffcd3e6a0aa259c7eb32f4c34c88": "必須是數目字，給出︰",
	"ccd81e42a5e36c2b44f7085b3d3997a4fa513a9e": "不能為零。",
	"05a2f240d737a283370d315c199ba2671176f9b8": "指標期限必須小於輸入清單的長度。",
	"a1e8b0b4f347e4dcb244ee3e8769bc64ee84ee67": "指標期限不能為零。",
	"46fc6f27a835486d63d9e927c6687e4508cb3087": "最大達成交易的數目",
	"9202ddae4cea16513e53bbc965d88ed975e59512": "最大損失金額",
	"629777b7d4d610ace6dee24442730f27d7d0853e": "不支持的文件︰",
	"e99811bd3b1ad17e74614060ecb180602be35ad6": "您已被登出！",
	"3b26e990d3acff493ee2cf66d1280bed2625e43f": "連接在收到伺服器反應前已中斷",
	"8b70c504aa09cadfdc4baac6909b492d9d63db71": "已購入",
	"e4458464df6cbb8da1134875ba51519c5d244d9f": "區塊必須位於區塊筒、主要區塊或函數內",
	"af145748c9cf765a3b059eec20cb1dbb899297d8": "區塊載入成功",
	"a479c9c34e878d07b4d67a73a48f432ad7dc53c8": "下載",
	"da162a909c2981ed318d23cd9a6be1d66e0a8400": "無法識別的檔案格式。",
	"2f9f9096be1a1c0569a9ce54e57f0420f6b3c2e9": "持續時間必須是正整數",
	"11ee9c5d534cc8d22651092222b532917594161a": "最小持續時間是",
	"5283ac04c9a8ba8a937d1edb4ba986aeefce8bf1": "跳動點數必須介於 5 和 10 之間",
	"ace1342bc3720b77ce510b93074041e7386d209e": "到期時間不能和開始時間相同",
	"fed3e7bd6696fb97a12d720845ab5388456bfc3b": "預測必須是一個數位",
	"ab1e8d2323be79c5b0403065b088f428778c7605": "必須在交易區塊中新增",
	"ff55a11f2a8ef76846f24cb60cb49e118f5552c3": "必須在購入前區塊中新增",
	"61dd25992a554b74a613971ba52e49d66b2966ee": "必須在購入時區塊中新增",
	"62cef231185ce9362e94e3fd38309e9a73f11b73": "必須在購入後區塊中新增",
	"6ddf2b3075ac9ab5d66b40e15ea9a34c087672ea": "必須新增進內",
	"aac1569ccf6b1a11b0ad0fbefdb9ffc777b4c733": "按一下選取",
	"5e719fa76e1b6cb396376c82ebdd04bec7253229": "遠端區塊載入必須是集合物件。",
	"df84a88f38b03b5b342362d72370b0d66afdae35": "目標必須是 xml 檔",
	"cd680fd936e9559ef1d95efac7a71680e2b13a89": "此 url 已經載入",
	"34c59389053701a04127f74d32315e0206e076f8": "試圖載入 url 時出錯",
	"ca92532fe6eddc40c362c56b3b996d6851baa6d1": "請確保「存取-控制-允許-起源」 存在於來自伺服器的回應",
	"49715bf4b3da75e31c6266378d5766c42e32fb89": "每個交易期的最大允許交易次數是 100。",
	"752ba649b5409e3e5f65c23d83d1b7286e3cb044": "交易次數和損失金額是必填項。",
	"9f1c61cc03f3ef9324db05502f7f0b61e61e1521": "交易限制",
	"f90691af95e0735042635eb7fd2367812d800516": "最大交易次數",
	"a571293591257b7a4e97484de6054ab919bc3a04": "最大損失金額",
	"952f375412e89ff213a8aca383d18e5691354347": "開始",
	"30e8df3645b759bb3a7540402e80255a39e7aec7": "出現錯誤，正在重新開機...",
	"34040fc10f01da331c08a8241356fde27bcdda32": "將於以下時間內重新開機",
	"77dfd2135f4db726c47299bb55be26f7f4525a46": "取消",
	"08548ce1ad20fb84564db0c018ddbc067d8bb631": "區塊儲存為",
	"a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867": "檔案名",
	"bf33cc2e57180686002e873efb1564c214405c77": "另存為集合件",
	"efc007a393f66cdb14d57d385822a3d9e36ef873": "儲存",
	"4a1e616226c329a94da7768bc0435a3284478010": "保存現有的區塊（xml 檔）",
	"bc981983e7f547dc62e19a1e383acfe00782a6d5": "下一頁",
	"b52b36b7269fbfc58ec24bb724691951a3decbe8": "返回",
	"e9b450d14bc2363d292c84f17cfad5cfbd58a458": "完成",
	"29cadadfebdd578a50b7b3d1b2c5b33e424d5de7": "快速瀏覽",
	"a48e81d4a8da67637b46725824177a959fe99b21": "準備好學習如何使用 Binary Bot 了嗎？",
	"fcb6e90e7223e1d1d735f15dbb7ded9d81bbe7ef": "不要再問我。",
	"6f3e6ebf249947cec4f64117253a8fe43335ae79": "不，謝謝",
	"5397e0583f14f6c88de06b1ef28f460a1fb5b0ae": "是的",
	"4ca0a75c2b7fa7da4364d03b72c46fee1860a2bf": "工作區",
	"5fcf29b9f0b8971c8148e70a150ddc9ac04c94fc": "拖放區塊檔。",
	"ddcbb5361b1a16eba60fca2383fb297bb90ed9b3": "下載示例策略",
	"cd2026251587b1a2299de2638e867bfba324c8bd": "製作自己的策略",
	"d171baee235d4c93f63755a876782dc5be4c3e47": "區塊工具箱",
	"056f19272d96f902c38207cf163ea8dbff7fbd32": "從這裡新增更多區塊到機器人程式。",
	"36bae31694f85bd7a5b0ad45e51ef622b95baadb": "帳戶",
	"f5c47fd3b3553b10441a06054078cea745177dea": "啟用機器人程式前請先登入。每次測試策略時請使用虛擬帳戶。",
	"fd825ae94aa79500a878dd4590a4b360e7162663": "Bot 控制項",
	"6ee7980833e1ed72901b919ffd0fa20e1a251d3f": "控制您的區塊。將游標放在每個按鈕上即可獲得更多資訊。",
	"f5169c84497de3aea74f7da9e7e177d1427e736b": "享受其中樂趣！",
	"4f1b3d682c2a00b393c33637da402463bc11d5ff": "想要報告問題或尋求幫助嗎？",
	"0049f8894e41937ebb9111cd3def6749049fb50f": "請按一下此處",
	"cd5f85b6f187605f82386eacd680f93820af8d11": "結果是",
	"1e38ce3d180cefae485a6986ca7c67841e30376f": "如果結果與選擇匹配，請回答「是」",
	"130859d75b98316e103257c1f3c21832b3e80dc4": "合約詳請",
	"011b5c3886f99f18d9239534f3423849fd75450b": "返回已完成合約的詳細資訊清單",
	"5c89497fc3c128e2ff865ce8df15356054f2c028": "(4) 獲得交易結果並再次交易",
	"14ea81918758c994cbe3178e695e56afc1ef2b45": "獲得以前的交易資訊和結果，然後再次交易（在交易完成上運行）",
	"5098e2bcc96ee227983c9f7eeddfd226c220ca00": "合約詳細資訊︰",
	"251c830f8f869e0887e8b4dc4c30ba1738c7097e": "從合同詳細資訊清單中讀取所選的選項",
	"dc3f26688f5ef436999ab59f699bcda077e65738": "合約結果",
	"d645c153b95989901238e9e8b7f9bac49abd053d": "返回已完成合約的結果",
	"b3b543c80063a116ced4965d8537b7b62d14c0b7": "再次交易",
	"a1eeb7c1e92e9a5d9323ed8ebd7ca7ffed8b0232": "再次運行交易區塊",
	"da3105e38c42a481ad7230ed393b0e12bebe9c4f": "賣價",
	"343fda69c73b78b84967055aae97f790c422adfd": "選定建議的賣價",
	"d4d34ce9d9dd7e87213469f88cb7ac43725675d5": "(2) 觀看和購入合約",
	"fb61a3c71f4c488b3b470cb7daf502a3e9b5ad48": "觀看跳動點流向和購入所需的合約（在跳動點更新上運行）",
	"87da93a46d143f6019979b3548414d9d7adabb35": "選定建議的賠付額",
	"160f06d4799c85021a810f68c5b517eea37a2737": "購入",
	"4c2fdde3d9c1950498ed263d6ce21d4bf3d0800b": "購入選定的合約。",
	"ca5586bdb5bdc1a2c0baf53ed0ecd21fafabebe7": "可賣出",
	"03bad10717e183b24829baf483dc715e1a44bf7b": "如果市場上可賣出，請回答「是」",
	"2c71ed279a402e93312dbda173ab18f244d6bf46": "(3) 查看和賣出所購入的合約",
	"17632a9f51611d2579d95b4b1ccb9476566d7ccf": "查看購入的合約資訊，如果可以的話，在市場上賣出（在合約更新上運行）",
	"579607dc4f989ce2b94b558431666a0ab07ac1f3": "在市場上賣出",
	"e20afd5cf3811a42071c9a312abb2afdad4c590b": "在市場上賣出。",
	"4712cbff8e92822fc960ef9c0197293a19675eae": "銷售利潤/虧損",
	"df817b48c7a076561b4f8bedc52d65d2e351ab52": "退回在市場上賣出的利潤。",
	"852b438f91ad9eb2cdd84419a675a216d543c687": "讀取",
	"af10ef20dd9060bbeead0afbc55381a66af442ef": "在",
	"61d905ffe59ca12f5a15f11345728757d120c97e": "最近的蠟燭圖線",
	"aba43a580daa7f306956ec69b83e6e37e7233126": "讀取最近第 n 個蠟燭圖線的選定蠟燭線值",
	"e4bed3e67e58b2334ee4b9c6ce59ac7a95d80aaf": "方向是",
	"ad47561efb1dcbd7246d9b64487f615647fda036": "「真」，如方向與選擇匹配",
	"05bef508aadd62bf3967dcf67d769da296f19989": "跳動點方向",
	"21bfc78607d3a64de767a6677d1db42156d5039d": "返回購前區塊收到的跳動點方向。如果跳動點比以前多，它的數值可能「上漲」，如比以前少則「下跌」及如果跳動點與前相同則為空（「」）",
	"cdb31fc857f01a59f664413498293c714285f46d": "蠟燭圖線清單中",
	"20fd5f86f08796f145d69dedc209a27e459b2f51": "從結束端獲得 #",
	"a96606af8c33ac3428b45abc4782dbf93f458d29": "得到第 n 個最近蠟燭圖線",
	"2e4202acde880b7b1c3686f0335ff879fc1e5c7a": "最後數位",
	"e46e0bd2f7fe37217dec8aa26ebce8ffa3608663": "返回最新跳動點的最後數位",
	"d5fde4c9d5edf660f760fc226df4d2678d3334ab": "蠟燭圖線清單",
	"95e552a40d3446c96905cd3ec7e3d123d0246ce8": "返回蠟燭圖線清單",
	"5e9023e299575f2bc81242b931c10019b63f407a": "蠟燭圖線數值",
	"cd8cdf3d47e921c8a72addae9269e66041d417c5": "返回選定蠟燭圖線數值清單",
	"e04b522218a181cf0223042dd18ae08dcc22d8d3": "最後跳動點",
	"6ee445fc253a55c9ed54c009c3f020ac65200d80": "返回購前區塊收到的跳動點數值",
	"4b2340a890e88d1886757c3f7172e273a1edc31f": "每個跳動點都呼叫這個區塊",
	"bffcc02697937d2610eae57e5ed36d5edbfed518": "不論是否有交易，您可以使用此區塊分析到來的跳動點",
	"ebffc758056e6b2fc2af99af17fbc6853e5d3583": "跳動點清單",
	"17649cac8739adcae95e641f794880272ad33bd1": "返回跳動點數值清單",
	"802dc02469ae51067ca620ff57dfb5bdb3e524ac": "餘額:",
	"c4ee8e12b2484cd5b47cdf00bfa2c50b83e91d3d": "得到剩餘數字或字串",
	"69280143949fcd59c171dd60f6b6e13d0cc08fe6": "忽略內部區塊",
	"d072c2ceeb5c1217722d14c74de7aeab945b4215": "把區塊放在這裡，以防止被移除",
	"b06acc4158c824231f727a13e1c9811f43d5be42": "從此處載入區塊",
	"661db37251a1ed1afe357ee13895f37a623d7cbf": "從此 url 載入區塊",
	"6c03ee54ad3a51fc92a1d69943e99667847705b6": "通知",
	"a2d0c89fdfff3176efd4a443eb0f6607067b93e7": "建立通知",
	"45ebd38f4c641ebf6f72be8c3a79dfa50cf9f20e": "利潤總計",
	"ffb465875e1ff2b49bcaa7c6b70965ffe39fa59d": "返回總利潤",
	"bc528d26f66fe8c4aa4bb24ec9c99dff12c055e0": "運行次數",
	"bea5756b18644ccfab01c1c0dbd6fa9db7103379": "返回起始至今的運行次數",
	"c67ded6b64019212eb2bc69afd761f5b3f626040": "給數字新增符號，以製作障礙抵消。",
	"569bbd757e1bb8bbccd250b98dc2bb37cb47b787": "市場",
	"02349f7b8f107a4b438066130a593735f2d31609": "出錯時重新開機（小心使用）",
	"1f4698382842477e211eb46de81fa506f01a8c34": "兩個",
	"c1baf816aac5a5cd849768773fc248cd249dc296": "合約類型:",
	"2faeb5c01923c3cb6c031146ea23fbf43d72b526": "蠟燭圖線間隔︰",
	"9693aeaaf68e3929b59b79306feaa0a847d01192": "持續時間︰",
	"15edb47b74a0ecf67e8799087491cb5d6720ff00": "賠付額:",
	"b66c8f6ee4d73f0dba18e50ae286261a97f3bf56": "貨幣:",
	"911348bf6fef082476779805cd1bda16bef66d2d": "障礙偏移量",
	"7b6c4800c92fc89b77fdb39901052847d12caf18": "預測︰",
	"cd1495cb4c60266a6abad9024022ae079bf7e416": "(1) 定義交易合約",
	"a43c3299d30a5bc7e31a574cdc87f59cbc8fe585": "定義交易合約和開始交易，在這裡新增初始化。（在開始上運行）",
	"eabf5342bcb460c4f8261faa18695d851712614a": "請登入。",
	"559f682cbda9fdf635263a782b7c6125ec4e745a": "所有交易類型都需要",
	"0f2ba74929aca6fea950e351dcd576b7cd841fa4": "蠟燭圖線是黑色的？",
	"6f69eb9519c0ac8fa014de9fbbc1f3054663440f": "檢查看蠟燭圖線是否黑色，如果給定的蠟燭圖線關閉少於開放, 返回「真」。",
	"66aa155c6baaf33def677eb1311534751dfa06ab": "在蠟燭圖線中",
	"d79d854dcd0829e2177a47beab6a55569e781ab1": "讀取 （從蠟燭圖線清單讀取） 蠟燭圖線的一個欄位",
	"b44e884c355e447d0da0e6ba45caaff18c84373b": "布林通道",
	"d6a2a207343bd83aacdc80b579ff4419713a256e": "輸入清單",
	"170a28a9db6d27d7212fc6dc249434a57517e7bc": "期間",
	"b833989d69900a4be9e32d1bab65c8f8233f099e": "標準偏差上漲乘法器",
	"1cee82f19c0bedef64f68b32e6b02128efe7c61b": "標準偏差下跌乘法器",
	"974da601086448d0060aeed90e53ddd5acd17b91": "從有期限的清單計算布林通道 (BB)",
	"d5b65cac1f1cf9421ac978eebe532de99040cca6": "布林通道陣列",
	"58de49791c64aba14e36e5887244a5ef088286cd": "從有期限的清單計算布林通道 (BB)",
	"4bd99f76f1104229744455d93df0ff76b9eeed58": "指數移動平均線",
	"ea615c6d6a74e25a6d2f1bc9980b46e73508c2eb": "從有期限的清單中計算指數移動平均線 (EMA)",
	"4082d9379e59b38c891d046312f8d3c4b64ae3b1": "指數移動平均線陣列",
	"562edc102c5dd9e2fbbede1140b8a5461c2d4dc8": "從有期限的數值清單中計算指數移動平均線 (EMA)",
	"a537f4f3c0f6c68bf896fb23cb2ecdc658488ea2": "指數平滑異同移動平均線陣列",
	"b18e572ea14edd48587145f1ef50718adbf256c6": "快速指數移動平均週期",
	"974023bddd6249d0f6404872cfcae205b2599ea2": "慢速指數移動平均週期",
	"934da66ec70e7f8b736550f5c0591f5d3d45b619": "簡單移動平均線週期（訊號）",
	"6b15ce93fd68d80aeee7f7964c1306044c3c1baf": "從清單計算指數平滑異同移動平均線 (MACD) 清單",
	"95ec92885c855ba9cf734c17a43f081901e4d2cc": "相對強度指標",
	"b033619e108c9e43bfd8a42cd97bf5c5dc86dc65": "從有期限清單獲得的相對強度指標 (RSI)",
	"4034de66995b876b2ba9bfd0274025e39168e05d": "相對強度指標陣列",
	"f9da880c8b0e4cce4431912c24eba939e6bc06e1": "使用有期限的數值清單計算相對強度指標 (RSI)",
	"a9842c95766da40bf4ea6ee263cb5a5985847763": "簡單移動平均線",
	"347775a293c14362d492f019e677c965be1d6e7d": "從有期限的清單中計算簡單移動平均線 (SMA)",
	"4cc7b9e53d082896ad884eb01be16320af65f282": "簡單移動平均線陣列",
	"2c75179a57af3c36581008b65e86ed81c4a4cbea": "從有期限的數值清單中計算簡單移動平均線 (SMA)",
	"5606b4460ac96063b8a8e5647008f3ec97252fc5": "Epoch以來的秒數",
	"2de20bdeecb1a8c28bd36fe75f028ed4318d0348": "返回epoch時間（epoch以來的秒數）",
	"f43cb41af7ce8a69c7aecbc1c603bb0381270982": "運行每個",
	"4b6fe6898f0f956d48a4c8172c6dfbcb4159ab09": "秒數",
	"2eea87bb804e4e73e3f8e9c41140f7ed83ea8875": "運行每隔 n 秒鐘內的區塊",
	"7b9c76088576a64f32d67ec335162b9f73eaa026": "過後運行",
	"ff56ffac023cf69ca5c7f71d407499536f4f86b5": "n 秒後內部運行區塊"
};

/***/ }),
/* 374 */
/***/ (function(module, exports) {

module.exports = require("child_process");

/***/ }),
/* 375 */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),
/* 376 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 377 */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ })
/******/ ]);